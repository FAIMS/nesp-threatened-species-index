/*
 * GENERATED WITH FAIMS-TOOLS, SHA1: 003c07593e4f4841c320819da001a8bdcc410558
 */
import android.util.Log;
import android.os.Build.MODEL;
import java.util.concurrent.atomic.AtomicInteger;
import android.database.DatabaseUtils;

// Beanshell won't let me write "\0".
final String SEP = Character.toString ((char) 0);

final String MSG_LOADING = "Loading...";

final String USER_MENU_PATH = "User/User/Select_User";
userMenuPath = USER_MENU_PATH; // Depricated. Use `USER_MENU_PATH` instead

final long SESS_START_TIME = System.currentTimeMillis();

Object dialog;          // Used to help coordinate the display of a "busy..." dialog
String parentTabgroup;  // Used to allow entities to be saved as children
String parentTabgroup__;// The tab group which was previously displayed
String redirectTab;     // makes newTab work as expected
String username = "";
String userId   = "";
List   autoSaveGeo = null;
List   autoSaveAttrs = null;

setFileSyncEnabled(true);
setSyncDelay(5.0f);
setSyncEnabled(true);
setSyncMaxInterval(600.0f);
setSyncMinInterval(5.0f);

if (isNull(USER_MENU_PATH)) {
  Log.w("", "`USER_MENU_PATH` is empty or null");
}

boolean isInUnitTestTime() {
  return android.os.Build.MODEL.equals("faims-mock-device");
}

void assert(boolean condition) {
  if (condition)
    return;

  String msg =
    "Test failed: " +
    "Line: " + this.namespace.getInvocationLine() +
    ": "     + this.namespace.getInvocationText() +
    ". "     + this.callstack;

  throw new Exception(msg);
}

// Like `any` in Python
boolean any(List booleans) {
  for (b : booleans)
    if (b) return true;
  return false;
}

String listToSqlString(List l){
  String sqlString = "(";
  for (int i = 0; i < l.size() - 1; i++) {
    element = l.get(i);
    sqlString += "'" + element + "', ";
  }
  if (l.size() > 0) {
    int lastIndex = l.size() - 1;
    element = l.get(lastIndex);
    sqlString += "'" + element + "'";
  }
  sqlString += ")";

  return sqlString;
}

// Run a list of queries one-after-the-other. The next query starts executing
// once the previous finishes.
//
// `callbacks` is a list of `FetchCallback` objects corresponding to each query
// in `queries`. Although `callbacks` cannot be null, any of it elements can.
void sequentialFetchAll(List queries, List callbacks) {
  if (queries == null || callbacks == null)
    throw IllegalArgumentException("Arguments cannot be null");
  if (queries.size() != callbacks.size())
    throw IllegalArgumentException("Argument lists must have the same length");

  if (queries.size() == 0)
    return;

  String        queriesHead   = queries  .get(0);
  FetchCallback callbacksHead = callbacks.get(0);

  List queriesTail   = queries  .subList(1, queries  .size());
  List callbacksTail = callbacks.subList(1, callbacks.size());

  FetchCallback executeTail = new FetchCallback() {
    onFetch(result) {
      if (callbacksHead != null)
        callbacksHead.onFetch(result);

      sequentialFetchAll(queriesTail, callbacksTail);
    }

    onError(String message) {
      if (callbacksHead != null)
        callbacksHead.onError(message);
    }
  };

  fetchAll(queriesHead, executeTail);
}

/******************************************************************************/
/*                                STRING UTILS                                */
/******************************************************************************/

/* Works similarly to Java's String.replaceFirst, except the `needle` is a
 * string instead of a regex.
 */
String replaceFirst(String haystack, String needle, String replacement) {
  i = haystack.indexOf(needle);
  if (i == -1)           return haystack;
  if (needle.equals("")) return haystack;
  pre  = haystack.substring(0, i                                   );
  post = haystack.substring(   i+needle.length(), haystack.length());
  return pre + replacement + post;
}

String replaceFirst(String haystack, String replacement) {
  return replaceFirst(haystack, "%s", replacement);
}

/* Replaces `placeholder` in an SQL `query` with `replacement`. The following
 * example returns the string
 * "SELECT * FROM table WHERE col1 = 'my replacement'":
 *
 * dbReplaceFirst(
 *     "SELECT * FROM table WHERE col1 = {my_placeholder}",
 *     "{my_placeholder}",
 *     "my replacement"
 * );
 */
String dbReplaceFirst(String query, String placeholder, String replacement) {
  String escapedReplacement = DatabaseUtils.sqlEscapeString(replacement);
  return replaceFirst(query, placeholder, escapedReplacement);
}

String dbReplaceFirst(String query, String replacement) {
  return dbReplaceFirst(query, "%s", replacement);
}

String translate(String s, Map m) {
  String out = "";

  for (char c : s) {
    String translation = m.get(c);

    if (isNull(translation)) out += c;
    else                     out += translation;
  }

  return out;
}

String escape(String s) {
  Map dict = new HashMap();
  dict.put('\"', "\\\"");
  dict.put('\\', "\\\\");
  dict.put('\b', "\\b" );
  dict.put('\f', "\\f" );
  dict.put('\n', "\\n" );
  dict.put('\r', "\\r" );

  return translate(s, dict);
}

Map MEMOISED_FILTERED_BY_REGEX = new LinkedHashMap();

List filterListByRegex(List unfiltered, String regex, boolean forceUpdate) {
  // Return a copy of the memoised result if possible. It's important to return
  // a copy because if the contents of the list are modified, memoisation will
  // break.
  List key = new ArrayList();
  key.add(unfiltered);
  key.add(regex);

  List memoised = MEMOISED_FILTERED_BY_REGEX.get(key);
  if (memoised != null && !forceUpdate)
    return new ArrayList(memoised);

  // Compute the filtered list
  List filteredList;
  Set  filteredSet = new LinkedHashSet();
  for (element : unfiltered)
    if (element.matches(regex))
      filteredSet.add(element);
  filteredList = new ArrayList(filteredSet);

  // Memoise and return
  MEMOISED_FILTERED_BY_REGEX.put(key, filteredList);
  return new ArrayList(filteredList);
}

List filterListByRegex(List unfiltered, String regex) {
  return filterListByRegex(unfiltered, regex, false);
}

String getRandomString(int len) {
  char[] chars  = (
      "abcdefghijklmnopqrstuvwxyz" +
      "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
      "1234567890"
  ).toCharArray();
  Random random = new Random();

  StringBuilder sb = new StringBuilder();
  for (int i = 0; i < len; i++) {
      char c = chars[random.nextInt(chars.length)];
      sb.append(c);
  }

  return sb.toString();
}

String args2str(Object[] args) {
  String str = "";
  String sep = ", ";

  for (Object o : args) {
    if (o instanceof String) str += "\"" + escape(o) + "\"" + sep;
    else                     str +=               o         + sep;
  }

  // The loop adds a superfluous trailing separator. This removes it.
  str = str.substring(0, str.length() - sep.length());

  return str;
}

// "Function to string". Makes it very slightly less painful to write callback
// functions as strings.
String fun2str(String funName, Object[] args) {
  String argsStr = args2str(args);

  String str = "{funName}({argsStr})";
  str = replaceFirst(str, "{funName}", funName);
  str = replaceFirst(str, "{argsStr}", argsStr);

  return str;
}

String fun2str(String funName, Object args) {
  return fun2str(funName, new Object[]{args});
}

/************************** FUNCTION-STRING MAPPING ***************************/
/* Allows reflected functions to be associated with a key and called later    */
/* on. This is mostly useful for de-spagehettifying calls to `addOnEvent`,    */
/* which would otherwise effectively use eval.                                */
/******************************************************************************/
Map KEY_TO_FUN_NAME = new HashMap();
Map KEY_TO_FUN_ARGS = new HashMap();

String function2key(String function, Object[] args) {
  if (args == null)
    args = new Object[0];

  String key = getRandomString(64); // 64 ==> Odds of collision ~= 1e-115

  KEY_TO_FUN_NAME.put(key, function);
  KEY_TO_FUN_ARGS.put(key, args);

  return key;
}

key2call(String key) {
  String   funName = KEY_TO_FUN_NAME.get(key);
  Object[] funArgs = KEY_TO_FUN_ARGS.get(key);

  if (funName == null) return;
  if (funArgs == null) return;

  this.invokeMethod(funName, funArgs);
}

String function2callableString(String function, Object[] args) {
  return fun2str("key2call", function2key(function, args));
}

/******************************************************************************/
/*                           DOCUMENT OBJECT MODEL                            */
/******************************************************************************/
String  PREVIOUSLY_DISPLAYED_TAB_GROUP    = "";
String  CURRENTLY_DISPLAYED_TAB_GROUP     = "";
String  PREVIOUSLY_DISPLAYED_TAB          = "";
String  CURRENTLY_DISPLAYED_TAB           = "";
Map     REF_TO_TYPE                       = new LinkedHashMap();
HashSet DATA_REFS                         = new HashSet();
HashSet NO_UI_REFS                        = new HashSet();
HashSet HIER_REFS                         = new HashSet();
Map     VP_REF_TO_REF                     = new HashMap();
HashSet REFS_AS_HASH_SET                  = null;
List    REFS_AS_LIST                      = null;
List    TAB_GROUPS_AS_LIST                = new ArrayList();
HashSet TAB_GROUPS_AS_HASH_SET            = null;
List    TABS_AS_LIST                      = new ArrayList();
HashSet TABS_AS_HASH_SET                  = null;
HashMap ATTRIB_NAMES_NON_STANDARD         = new HashMap();
List    NODATA_TAB_GROUPS                 = new ArrayList();
List    NOAUTOSAVE_TAB_GROUPS             = new ArrayList();
HashSet NOAUTOSAVE_TAB_GROUPS_AS_HASH_SET = null;
NODATA_TAB_GROUPS.add("User");
NODATA_TAB_GROUPS.add("Control");

REF_TO_TYPE.put("User/User/Select_User", "list");
REF_TO_TYPE.put("Control/Main/New_Record", "button");
REF_TO_TYPE.put("Control/Search/Search_Term", "input");
REF_TO_TYPE.put("Control/Search/Search_Button", "button");
REF_TO_TYPE.put("Control/Search/Entity_Types", "dropdown");
REF_TO_TYPE.put("Control/Search/Entity_List", "list");
REF_TO_TYPE.put("Control/ID_Numbers/Next_Source_ID", "input");
REF_TO_TYPE.put("Record/Survey/Source_ID", "input");
REF_TO_TYPE.put("Record/Survey/Source_Type", "dropdown");
REF_TO_TYPE.put("Record/Survey/Source_Description", "input");
REF_TO_TYPE.put("Record/Survey/Source_Provider", "input");
REF_TO_TYPE.put("Record/Survey/Location_Name", "input");
REF_TO_TYPE.put("Record/Survey/Search_Type_Description", "dropdown");
REF_TO_TYPE.put("Record/Survey/Start_Date", "input");
REF_TO_TYPE.put("Record/Survey/Finish_Date", "input");
REF_TO_TYPE.put("Record/Survey/Start_Time", "input");
REF_TO_TYPE.put("Record/Survey/Finish_Time", "input");
REF_TO_TYPE.put("Record/Survey/Set_Start_Time", "button");
REF_TO_TYPE.put("Record/Survey/Set_Finish_Time", "button");
REF_TO_TYPE.put("Record/Survey/Duration_in_Minutes", "input");
REF_TO_TYPE.put("Record/Survey/Duration_in_Days_Nights", "input");
REF_TO_TYPE.put("Record/Survey/Number_of_Traps_per_Day_Night", "input");
REF_TO_TYPE.put("Record/Survey/Area_m2", "input");
REF_TO_TYPE.put("Record/Survey/Length_km", "input");
REF_TO_TYPE.put("Record/Survey/Site_Name", "input");
REF_TO_TYPE.put("Record/Survey/Latitude", "input");
REF_TO_TYPE.put("Record/Survey/Longitude", "input");
REF_TO_TYPE.put("Record/Survey/Northing", "input");
REF_TO_TYPE.put("Record/Survey/Easting", "input");
REF_TO_TYPE.put("Record/Survey/Accuracy", "input");
REF_TO_TYPE.put("Record/Survey/Take_From_GPS_1", "button");
REF_TO_TYPE.put("Record/Survey/Projection_Reference", "dropdown");
REF_TO_TYPE.put("Record/Survey/Positional_Accuracy_External_m", "input");
REF_TO_TYPE.put("Record/Survey/Survey_Comments", "input");
REF_TO_TYPE.put("Record/Survey/Intensive_Management", "input");
REF_TO_TYPE.put("Record/Survey/Monitoring_Program", "dropdown");
REF_TO_TYPE.put("Record/Sighting/New_Sighting", "button");
REF_TO_TYPE.put("Record/Sighting/Sightings", "list");
REF_TO_TYPE.put("Sighting/Sighting/Taxon_ID", "dropdown");
REF_TO_TYPE.put("Sighting/Sighting/Common_Name", "dropdown");
REF_TO_TYPE.put("Sighting/Sighting/Scientific_Name", "dropdown");
REF_TO_TYPE.put("Sighting/Sighting/Count", "input");
REF_TO_TYPE.put("Sighting/Sighting/Unit_of_Measurement", "dropdown");
REF_TO_TYPE.put("Sighting/Sighting/New_Unit_of_Measurement", "input");
REF_TO_TYPE.put("Sighting/Sighting/Sighting_Comments", "input");
REF_TO_TYPE.put("User/User", "tab");
REF_TO_TYPE.put("Control/Main", "tab");
REF_TO_TYPE.put("Control/Search", "tab");
REF_TO_TYPE.put("Control/ID_Numbers", "tab");
REF_TO_TYPE.put("Record/Survey", "tab");
REF_TO_TYPE.put("Record/Sighting", "tab");
REF_TO_TYPE.put("Sighting/Sighting", "tab");

DATA_REFS.add("Record/Survey/Source_ID");
DATA_REFS.add("Record/Survey/Source_Type");
DATA_REFS.add("Record/Survey/Source_Description");
DATA_REFS.add("Record/Survey/Source_Provider");
DATA_REFS.add("Record/Survey/Location_Name");
DATA_REFS.add("Record/Survey/Search_Type_Description");
DATA_REFS.add("Record/Survey/Start_Date");
DATA_REFS.add("Record/Survey/Finish_Date");
DATA_REFS.add("Record/Survey/Start_Time");
DATA_REFS.add("Record/Survey/Finish_Time");
DATA_REFS.add("Record/Survey/Duration_in_Minutes");
DATA_REFS.add("Record/Survey/Duration_in_Days_Nights");
DATA_REFS.add("Record/Survey/Number_of_Traps_per_Day_Night");
DATA_REFS.add("Record/Survey/Area_m2");
DATA_REFS.add("Record/Survey/Length_km");
DATA_REFS.add("Record/Survey/Site_Name");
DATA_REFS.add("Record/Survey/Latitude");
DATA_REFS.add("Record/Survey/Longitude");
DATA_REFS.add("Record/Survey/Northing");
DATA_REFS.add("Record/Survey/Easting");
DATA_REFS.add("Record/Survey/Accuracy");
DATA_REFS.add("Record/Survey/Projection_Reference");
DATA_REFS.add("Record/Survey/Positional_Accuracy_External_m");
DATA_REFS.add("Record/Survey/Survey_Comments");
DATA_REFS.add("Record/Survey/Intensive_Management");
DATA_REFS.add("Record/Survey/Monitoring_Program");
DATA_REFS.add("Sighting/Sighting/Taxon_ID");
DATA_REFS.add("Sighting/Sighting/Common_Name");
DATA_REFS.add("Sighting/Sighting/Scientific_Name");
DATA_REFS.add("Sighting/Sighting/Count");
DATA_REFS.add("Sighting/Sighting/Unit_of_Measurement");
DATA_REFS.add("Sighting/Sighting/New_Unit_of_Measurement");
DATA_REFS.add("Sighting/Sighting/Sighting_Comments");







HIER_REFS.add("Sighting/Sighting/Taxon_ID");
HIER_REFS.add("Sighting/Sighting/Common_Name");
HIER_REFS.add("Sighting/Sighting/Scientific_Name");
HIER_REFS.add("Sighting/Sighting/Unit_of_Measurement");

TAB_GROUPS_AS_LIST.add("User");
TAB_GROUPS_AS_LIST.add("Control");
TAB_GROUPS_AS_LIST.add("Record");
TAB_GROUPS_AS_LIST.add("Sighting");

TABS_AS_LIST.add("User/User");
TABS_AS_LIST.add("Control/Main");
TABS_AS_LIST.add("Control/Search");
TABS_AS_LIST.add("Control/ID_Numbers");
TABS_AS_LIST.add("Record/Survey");
TABS_AS_LIST.add("Record/Sighting");
TABS_AS_LIST.add("Sighting/Sighting");



String getType(String ref) {
  String type = REF_TO_TYPE.get(ref);
  if (type == null) return "";
  else              return type;
}

List getRefs() {
  return getRefsAsList();
}

List getRefsAsList() {
  if (REFS_AS_LIST == null)
    REFS_AS_LIST = new ArrayList(REF_TO_TYPE.keySet());
  return REFS_AS_LIST;
}

HashSet getRefsAsHashSet() {
  if (REFS_AS_HASH_SET == null)
    REFS_AS_HASH_SET = new HashSet(REF_TO_TYPE.keySet());
  return REFS_AS_HASH_SET;
}

List getRefsByType(String type) {
  List refs = new ArrayList();
  for (String ref : getRefs())
    if (getType(ref).equals(type))
      refs.add(ref);
  return refs;
}

List getNoautosaveTabGroups() {
  return NOAUTOSAVE_TAB_GROUPS;
}

HashSet getNoautosaveTabGroupsAsHashSet() {
  if (NOAUTOSAVE_TAB_GROUPS_AS_HASH_SET == null)
    NOAUTOSAVE_TAB_GROUPS_AS_HASH_SET = new HashSet(NOAUTOSAVE_TAB_GROUPS);
  return NOAUTOSAVE_TAB_GROUPS_AS_HASH_SET;
}

boolean isFlaggedNoautosave(String ref) {
  return getNoautosaveTabGroupsAsHashSet().contains(ref);
}

boolean hasData(String ref) {
  return DATA_REFS.contains(ref);
}

boolean hasNoUi(String ref) {
  return NO_UI_REFS.contains(ref);
}

String getVpRef(String ref) {
  return VP_REF_TO_REF.get(ref);
}

boolean hasVpRef(String ref) {
  return getVpRef(ref) != null;
}

/* Returns `true` if `ref` refers to a hierarhical menu. (e.g. a hierarchical
 * dropdown or hierarchical picture gallery.) Returns `false` otherwise.
 */
boolean isHier(String ref) {
  return HIER_REFS.contains(ref);
}

boolean isValidRef(String ref) {
  boolean isValidRef = false;
  if (!isInUnitTestTime())
    isValidRef = isValidRef || linker.getUIRenderer().getViewByRef(ref) != null;
  isValidRef = isValidRef || getRefsAsHashSet()     .contains(ref);
  isValidRef = isValidRef || getTabsAsHashSet()     .contains(ref);
  isValidRef = isValidRef || getTabGroupsAsHashSet().contains(ref);
  return isValidRef;
}

boolean validateRef(ref) {
  String msg =
    isInUnitTestTime() ?
    "Ref '" + ref + "' may not refer to a UI element" :
    "Ref '" + ref + "' does not refer to a UI element";

  if (!isValidRef(ref) && !"module".equals(ref)) {
    Log.w(this.callstack.get(1).getInvocationText(), msg);
    return false;
  }
  return true;
}

List getTabGroups() { return getTabGroupsAsList(); }
List getTabGroupsAsList() { return TAB_GROUPS_AS_LIST; }

HashSet getTabGroupsAsHashSet() {
  if (TAB_GROUPS_AS_HASH_SET == null)
    TAB_GROUPS_AS_HASH_SET = new HashSet(TAB_GROUPS_AS_LIST);
  return TAB_GROUPS_AS_HASH_SET;
}

List getTabs() { return getTabsAsList(); }
List getTabsAsList() { return TABS_AS_LIST; }

HashSet getTabsAsHashSet() {
  if (TABS_AS_HASH_SET == null)
    TABS_AS_HASH_SET = new HashSet(TABS_AS_LIST);
  return TABS_AS_HASH_SET;
}

List getStartingIdRefs() {
  List l = new ArrayList();
  l.add("Control/ID_Numbers/Next_Source_ID");
  return l;
}

List getMenuTypes() {
  List menuTypes = new ArrayList();
  menuTypes.add("checkbox");
  menuTypes.add("dropdown");
  menuTypes.add("list");
  menuTypes.add("picture");
  menuTypes.add("radio");
  return menuTypes;
}

List getMediaTypes() {
  List mediaTypes = new ArrayList();
  mediaTypes.add("audio");
  mediaTypes.add("camera");
  mediaTypes.add("file");
  mediaTypes.add("video");
  return mediaTypes;
}

boolean isMenuType(String type) {
  return getMenuTypes().contains(type);
}

boolean isMediaType(String type) {
  return getMediaTypes().contains(type);
}

boolean hasMenuType(String ref) {
  String refType = getType(ref);
  return isMenuType(refType);
}

boolean hasMediaType(String ref) {
  String type = getType(ref);
  return isMediaType(type);
}

boolean isFlaggedNodata(String tabGroup) {
  return NODATA_TAB_GROUPS.contains(tabGroup);
}

void updateDisplayedTab(String tab) {
  if (tab.equals(CURRENTLY_DISPLAYED_TAB))
    return;

  PREVIOUSLY_DISPLAYED_TAB = CURRENTLY_DISPLAYED_TAB;
  CURRENTLY_DISPLAYED_TAB  = tab;
}

String getPreviouslyDisplayedTab() {
  return PREVIOUSLY_DISPLAYED_TAB;
}

String getDisplayedTab() {
  return CURRENTLY_DISPLAYED_TAB;
}

void updateDisplayedTabGroup(String tabGroup) {
  if (tabGroup.equals(CURRENTLY_DISPLAYED_TAB_GROUP))
    return;

  PREVIOUSLY_DISPLAYED_TAB_GROUP = CURRENTLY_DISPLAYED_TAB_GROUP;
  CURRENTLY_DISPLAYED_TAB_GROUP  = tabGroup;
}

String getPreviousTabGroup() {
  return getPreviouslyDisplayedTabGroup();
}

String getPreviouslyDisplayedTabGroup() {
  return PREVIOUSLY_DISPLAYED_TAB_GROUP;
}

String getDisplayedTabGroup() {
  return CURRENTLY_DISPLAYED_TAB_GROUP;
}

boolean isDisplayed(String ref) {
  return getDisplayedTabGroup().equals(ref) ||
         getDisplayedTab     ().equals(ref);
}

String getTabGroupRef(String fullRef) {
  Boolean lastPartOnly = false;
  return getTabGroupRef(fullRef, lastPartOnly);
}

String getTabGroupRef(String fullRef, Boolean lastPartOnly) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");

  if (parts.length < 1) return null;
  return parts[0];
}

String getTabRef(String fullRef) {
  Boolean lastPartOnly = false;
  return getTabRef(fullRef, lastPartOnly);
}

String getTabRef(String fullRef, Boolean lastPartOnly) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");

  if (parts.length < 2) return null;
  if (lastPartOnly) return                  parts[1];
  else              return parts[0] + "/" + parts[1];
}

String getLastRefPart(String fullRef) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");
  return parts[parts.length-1];
}

String getGuiElementRef(String fullRef) {
  Boolean lastPartOnly = true;
  return getGuiElementRef(fullRef, lastPartOnly);
}

String getGuiElementRef(String fullRef, Boolean lastPartOnly) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");

  if (parts.length < 3) return null;
  if (lastPartOnly) return parts[2];
  else              return fullRef;
}

boolean isTab(String ref) {
  return getTabsAsHashSet().contains(ref);
}

boolean isTabGroup(String ref) {
  return getTabGroupsAsHashSet().contains(ref);
}

String getArch16nKey(String ref) {
  String lastRefPart = getLastRefPart(ref);

  if (isNull(lastRefPart)) return null;
  else                     return "{" + lastRefPart + "}";
}

String getArch16nVal(String ref) {
  return arch16nSubstituteValues(getArch16nKey(ref));
}

String guessArch16nVal(String ref) {
  return guessArch16nValFromRef(ref);
}

String guessArch16nValFromRef(String ref) {
  String arch16nKey = getArch16nKey(ref);
  return guessArch16nValFromKey(arch16nKey);
}

String guessArch16nValFromKey(String key) {
  if (isNull(key)) return "";
  key = key.replaceAll("_", " ");
  key = key.replaceAll("^\\{", "");
  key = key.replaceAll("\\}$", "");
  return key;
}

/* Example:
 *   english.0.properties:
 *       please=Please
 *       enable_gps=enable GPS
 *       ...
 *
 *   ui_logic.bsh:
 *       arch16nSubstituteValues("{please} {enable_gps}.") ==
 *           "Please enable GPS."
 */
String arch16nSubstituteValues(String unSubbed) {
  if (isInUnitTestTime())
    return unSubbed;

  List entries = new ArrayList();
  entries.add(new NameValuePair(unSubbed, ""));
  entries = linker.convertToNameValuePairs(entries);
  return entries.get(0).getName();
}

String getAttributeName(String ref) {
  String guiElementRef = getGuiElementRef(ref);
  if (isNull(guiElementRef))
    return null;

  if (ATTRIB_NAMES_NON_STANDARD.containsKey(ref))
    return ATTRIB_NAMES_NON_STANDARD.get(ref);

  return guiElementRef.replaceAll("_", " ");
}

List getAttribsMatchingRef(String pattern) {
  Set attribsSet;

  List attribsList = new ArrayList();
  for (ref : getRefsMatching(pattern))
    attribsList.add(getAttributeName(ref));

  attribsSet  = new HashSet(attribsList);
  attribsList = new ArrayList(attribsSet);

  return attribsList;
}

String getArchEntType(String ref) {
  String tabGroupRef = getTabGroupRef(ref);
  if (isNull(tabGroupRef)) {
    return null;
  }

  String archEntType = tabGroupRef.replaceAll("_", " ");
  return archEntType;
}

String getArchEntTypePascalCased(String ref) {
  String archEntType = getArchEntType(ref);
  if (archEntType == null) {
    return archEntType;
  }

  return archEntType.replaceAll(" ", "");
}

List getRefsMatching(String pattern) {
  Map dict = new HashMap();
  dict.put('/', "\\/");
  dict.put('*', ".*");
  String regex = translate(pattern, dict);

  return filterListByRegex(getRefs(), regex);
}

String getRefMatching(String pattern) {
  List matches = getRefsMatching(pattern);
  if (matches.size() == 0)
    return "";
  return matches.get(0);
}

/******************************************************************************/
/*                            BINDING ACCUMULATOR                             */
/*                                                                            */
/* The binding accumulator allows onEvent bindings for the same element to    */
/* accumulate over multiple onEvent calls instead of having later calls       */
/* override earlier ones.                                                     */
/*                                                                            */
/* It also adds support for a several additional events:                      */
/*   - "blur" --- This is merely an interface to make code for adding "blur"  */
/*         events more consistent.                                            */
/*   - "copy" --- Triggered as a record is duplicated, immediately before it  */
/*         is first saved.                                                    */
/*   - "create" --- Triggered after a savable, auto-generated tab group is    */
/*         shown (but possibly before the "show" event is triggered).         */
/*   - "delete" --- Triggered after a record is deleted.                      */
/*   - "prefetch" --- Triggered before the "fetch" event. More specifically,  */
/*         this event is triggered before a tab group is fetched and          */
/*         displayed.                                                         */
/*   - "fetch" --- Triggered after a record is fetched and displayed in a     */
/*         given tab group.                                                   */
/*   - "focus" --- This is merely an interface to make code for adding        */
/*         "focus" events more consistent.                                    */
/*   - "leave" --- Triggered after a given tab group is navigated away        */
/*         from. Note that this event cannot be triggered when the FAIMS app  */
/*         is exited.                                                         */
/*   - "save" --- Triggered each time a tab group is saved. This includes the */
/*         first time the tab group is saved as well as subsequent            */
/*         onSave(String, Boolean) calls.                                     */
/*   - "firstsave" --- Similar to "save", but only triggered upon the first   */
/*         save (i.e. the save which creates the arch ent). When this event   */
/*         is triggered, it occurs immediately before the "save" event.       */
/*                                                                            */
/* Additionally, the binding accumulator augments the "load" event so that    */
/* the `statement` in addOnEvent("module", "load", statement) gets executed   */
/* after the module has finished loading. (That is, when this script has been */
/* loaded, including the execution of any asynchronous functions.)            */
/*                                                                            */
/* Importantly, a single call to `bindOnEvents` must occur after all the      */
/* `addOnEvent` and `delOnEvent` calls. Calling `bindOnEvents` is what        */
/* actually establishes the bindings once they have been added to the         */
/* accumulator.                                                               */
/******************************************************************************/
// This counts the number of _a_synchonrous jobs before the module is considered
// to be loaded.
//     Only one synchronous job is counted, and that's loading this script; that
// is why this variable is initialised to 1.
AtomicInteger NUM_JOBS_TILL_LOADED = new AtomicInteger(1);
AtomicInteger NUM_FETCHES_OCCURING = new AtomicInteger(0);

final int PRECEDENCE_MIN = 0;
final int PRECEDENCE_MID = Integer.MAX_VALUE/2;
final int PRECEDENCE_MAX = Integer.MAX_VALUE;

int NUM_EVTS = 0;
Map ON_EVT_CONDS  = new HashMap(); // (ref, event type) -> callback statement
Map ON_EVT_STMTS  = new HashMap(); // (ref, event type) -> callback statement
Set CUSTOM_EVENTS = new HashSet(); // Events not handled by `onEvent`

CUSTOM_EVENTS.add("blur");
CUSTOM_EVENTS.add("copy");
CUSTOM_EVENTS.add("create");
CUSTOM_EVENTS.add("delete");
CUSTOM_EVENTS.add("fetch");
CUSTOM_EVENTS.add("focus");
CUSTOM_EVENTS.add("leave");
CUSTOM_EVENTS.add("prefetch");
CUSTOM_EVENTS.add("save");
CUSTOM_EVENTS.add("firstsave");

List getPrioritised(String statement, int priority) {
  List prioritised = new ArrayList();

  prioritised.add(statement);
  prioritised.add(priority);
  prioritised.add(NUM_EVTS++);

  return prioritised;
}

Comparator PrioritisedComparator() {
  int compare(List a, List b) {
    int aPriority = a.get(1);
    int bPriority = b.get(1);

    int aEvtNum   = a.get(2);
    int bEvtNum   = b.get(2);

    if (aPriority > bPriority) return -1;
    if (aPriority < bPriority) return +1;
    if (aEvtNum   > bEvtNum  ) return +1;
    if (aEvtNum   < bEvtNum  ) return -1;
    return 0;
  }
  boolean equals(a, b) { return compare(a, b) == 0; }
  return this;
}

String getOnEventKey(String ref, String event) {
  return ref + SEP + event;
}

ArrayList getOnEventPriorities(String ref, String event, Map map) {
  String    key = getOnEventKey(ref, event);
  ArrayList val = (ArrayList) map.get(key);

  if (val == null) return new ArrayList();
  else             return val;
}

/* Returns the set of statements bound to an element at `ref` and occurring on
 * `event`.
 */
ArrayList getOnEventVal(String ref, String event, Map map) {
  String    key  = getOnEventKey(ref, event);
  ArrayList val  = (ArrayList) map.get(key);
  ArrayList val_ = new ArrayList();

  if (val == null)
    val = new ArrayList();

  // Sort the vals by their precedence
  Collections.sort(val, PrioritisedComparator());

  // Unpack the inner objects (Strings) from the `Prioritised` objects, put them
  // in `val_`.
  for (v : val)
    val_.add(v.get(0));

  return val_;
}

ArrayList getConds(String ref, String event) {
  return getOnEventVal(ref, event, ON_EVT_CONDS);
}

ArrayList getStatements(String ref, String event) {
  return getOnEventVal(ref, event, ON_EVT_STMTS);
}

void addToOnEventPriorities(
    String ref,
    String event,
    String statement,
    int precedence,
    Map map
) {
  // In the case that a statement already exists for a given (`ref`, `event`)
  // pair, writing `val.add(statement);` will be enough to add the extra
  // statement. This is because `getStatements` returns a reference to a list.
  // In the case just described, the list is stored in the `ON_EVT_STMTS` map.
  // However, sometimes `getStatements` returns empty lists which are not stored
  // in that map. In this case, calling `ON_EVT_STMTS.put` is required.
  //
  // `precedence` controls the order that statements are executed. Roughly,
  // a statement with a higher precedence is executed before a statement with
  // a lower precedence.
  assert(precedence >= 0);
  assert(precedence <= Integer.MAX_VALUE);

  validateRef(ref);

  String    key = getOnEventKey       (ref, event);
  ArrayList val = getOnEventPriorities(ref, event, map);

  ArrayList statements = val;

  statements.add(getPrioritised(statement, precedence));
  map.put(key, statements);
}

String getOnEventString(
    String ref,
    String event,
    Map map,
    String sep,
    boolean doAddTrailingSep
) {
  ArrayList stmts = getOnEventVal(ref, event, map);
  String stmtsStr = "";

  if (stmts.size() > 0)
    stmtsStr = stmts.get(0);

  for (int i = 1; i < stmts.size(); i++)
    stmtsStr += sep + stmts.get(i);

  if (doAddTrailingSep)
    stmtsStr += sep;

  return stmtsStr;
}

String getStatementsString(String ref, String event) {
  String condsStr = getOnEventString(ref, event, ON_EVT_CONDS, " && ", false);
  String stmtsStr = getOnEventString(ref, event, ON_EVT_STMTS, "; "  , true);

  if (isNull(condsStr))
    return stmtsStr;
  return "if (" + condsStr + ") { " + stmtsStr + " }";
}

void executeOnEvent(String ref, String event) {
  validateRef(ref);

  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}

boolean hasOnEvent(String ref, String event, String statement) {
  return getStatements(ref, event).contains(statement);
}

void delOnEvent(String ref, String event, String statement) {
  validateRef(ref);

  String    key = getOnEventKey(ref, event);
  ArrayList val = (ArrayList) ON_EVT_STMTS.get(key);

  if (val == null)
    return;

  for (Iterator i = val.iterator(); i.hasNext(); ) {
    obj = i.next();
    if (statement.equals(obj.get(0)))
      i.remove();
  }
}

void delOnEvents(String ref, String event) {
  validateRef(ref);

  String key = getOnEventKey(ref, event);
  ON_EVT_STMTS.remove(key);
}

void addOnEvent(String ref, String event, String statement, int precedence) {
  addToOnEventPriorities(ref, event, statement, precedence, ON_EVT_STMTS);
}

/* Adds a condition to be checked before any expressions bound by `addOnEvent`
 * are evaluated. `check` is `boolean` expression which must evaluate to `true`
 * before the bound expressions evaluate. For instance, in the following logic,
 * `onShowMyTabGroup()` will never be evaluated:
 *
 * ```
 * boolean myChecker() {
 *   showWarning("I'm Sorry, Dave", "I'm afraid I can't do that.");
 *   return false;
 * }
 *
 * addOnEvent    ("My_Tab_Group", "show", "onShowMyTabGroup()");
 * addOnEventCond("My_Tab_Group", "show", "myChecker()");
 * ```
 */
void addOnEventCond(String ref, String event, String check) {
  addToOnEventPriorities(ref, event, check, PRECEDENCE_MID, ON_EVT_CONDS);
}

void addOnEvent(String ref, String event, String statement) {
  addOnEvent(ref, event, statement, PRECEDENCE_MID);
}

void addOnEvent(
    String ref, String event, String function, Object[] args, int precedence
) {
  String statementString = function2callableString(function, args);
  addOnEvent(ref, event, statementString);
}

void addOnEvent(String ref, String event, String function, Object[] args) {
  addOnEvent(ref, event, function, args, PRECEDENCE_MID);
}

void addOnEventCond(String ref, String event, String check, Object[] args) {
  String checkString = runnable2runnableString(check);
  addOnEvent(ref, event, checkString);
}

void bindOnEvent(String ref, String event) {
  String stmtsStr     = getStatementsString(ref, event);
  String focusStmtStr = getStatementsString(ref, "focus");
  String blurStmtStr  = getStatementsString(ref, "blur" );

  if (event.equals("load") && ref.equals("module")) {
    ;
  } else if (event.equals("focus")) {
    onFocus(ref, focusStmtStr, blurStmtStr);
  } else if (event.equals("blur" )) {
    onFocus(ref, focusStmtStr, blurStmtStr);
  } else if (!CUSTOM_EVENTS.contains(event)) {
    onEvent(ref, event, stmtsStr);
  } else {
    ; // Other events are implemented using auto-generated callback functions
  }
}

void bindOnEvents() {
  for (String key : ON_EVT_STMTS.keySet()) {
    refevent = key.split(SEP);
    ref   = refevent[0];
    event = refevent[1];
    bindOnEvent(ref, event);
  }
}

void onLeaveTab() {
  onLeaveTabGroup(getPreviouslyDisplayedTab());
}

/* Execute the "leave" event for the tab group at `ref` if a callback for it
 * exists.
 */
void onLeaveTabGroup(String ref) {
  String event    = "leave";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}

void onLeaveTabGroup() {
  onLeaveTabGroup(getPreviouslyDisplayedTabGroup());
}

/* Execute the "leave" event for the tab group at `ref` if a callback for it
 * exists.
 */
void onLeaveTabGroup(String ref) {
  String event    = "leave";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}

void incJobsTillLoaded() {
  NUM_JOBS_TILL_LOADED.incrementAndGet();
}

boolean isModuleLoaded() {
  return NUM_JOBS_TILL_LOADED.get() == 0;
}

/* Returns `true` if the module has loaded.
 */
boolean decJobsTillLoaded() {
  return NUM_JOBS_TILL_LOADED.decrementAndGet() == 0;
}

void decAndExecIfModuleLoaded() {
  if (decJobsTillLoaded())
    executeOnEvent("module", "load");
}

boolean isDoingFetchEvent() {
  return NUM_FETCHES_OCCURING.get() > 0;
}

/* Establishes `onEvent` bindings necessary to make the "leave" event work for
 * tab groups. The "leave" event is really triggered upon "show" of another tab
 * group.
 */
for (String ref : getTabGroups()) {
  String callback;

  // Update (previously) displayed tab group
  callback = fun2str("updateDisplayedTabGroup", ref);
  addOnEvent(ref, "show",   callback, PRECEDENCE_MAX);
  addOnEvent(ref, "create", callback, PRECEDENCE_MAX);

  // Trigger on leave tab group event
  callback = "onLeaveTabGroup()";
  addOnEvent(ref, "show", callback, PRECEDENCE_MAX);
}

/* Establishes `onEvent` bindings necessary to make the "leave" event work for
 * tabs. The "leave" event is really triggered upon "show" of another tab.
 */
for (String ref : getTabs()) {
  String callback;

  // Update (previously) displayed tab group
  callback = fun2str("updateDisplayedTab", ref);
  addOnEvent(ref, "show",   callback, PRECEDENCE_MAX);

  // Trigger on leave tab group event
  callback = "onLeaveTab()";
  addOnEvent(ref, "show", callback, PRECEDENCE_MAX);
}

for (String tg : getTabGroups()) {
  if (isFlaggedNodata(tg))
    continue;

  addOnEvent(
      tg,
      "prefetch",
      "NUM_FETCHES_OCCURING.incrementAndGet()",
      PRECEDENCE_MAX
  );
  addOnEvent(
      tg,
      "fetch",
      "NUM_FETCHES_OCCURING.decrementAndGet()",
      0
  );
}

/******************************************************************************/
/*                     LOCALSETTINGS VIEW/TABLE CREATION                      */
/******************************************************************************/
void makeLocalId(){
  fetchOne(
      "CREATE TABLE IF NOT EXISTS perflog (" +
      "    id              INTEGER PRIMARY KEY," +
      "    deviceModel     TEXT," +
      "    sessStartMs     INTEGER," +
      "    parentNameSpace TEXT," +
      "    srcLine         TEXT," +
      "    query           TEXT," +
      "    queryStartMs    INTEGER," +
      "    queryStopMs     INTEGER," +
      "    numAentvalue    INTEGER," +
      "    numArchentity   INTEGER," +
      "    numRelationship INTEGER," +
      "    numAentreln     INTEGER " +
      ")"
  );

  fetchOne(
      "CREATE TABLE IF NOT EXISTS localSettings (" +
      "    key   TEXT PRIMARY KEY," +
      "    value TEXT" +
      ")"
  );

  fetchOne(
      "DROP VIEW IF EXISTS parentchild"
  );

  fetchOne(
      "CREATE VIEW parentchild AS "+
      "           SELECT parent.uuid as parentuuid, child.uuid as childuuid, parent.participatesverb as parentparticipatesverb, parent.relationshipid, parent.aenttypename as parentaenttypename, child.participatesverb as childparticipatesverb, child.aenttypename as childaenttypename, createdat"+
      "             FROM (SELECT uuid, participatesverb, aenttypename, relationshipid, relntimestamp as createdat"+
      "                     FROM latestnondeletedaentreln "+
      "                     JOIN relationship USING (relationshipid) "+
      "                     JOIN latestnondeletedarchent USING (uuid) "+
      "                     JOIN aenttype USING (aenttypeid)) parent "+
      "             JOIN (SELECT uuid, relationshipid, participatesverb, aenttypename "+
      "                     FROM latestnondeletedaentreln "+
      "                     JOIN relationship USING (relationshipid) "+
      "                     JOIN latestnondeletedarchent USING (uuid) "+
      "                     JOIN aenttype USING (aenttypeid)) child "+
      "               ON (parent.relationshipid = child.relationshipid AND parent.uuid != child.uuid)"
  );
}
makeLocalId();

/******************************************************************************/
/*                            PERFORMANCE TESTING                             */
/*                                                                            */
/* Code to a) time queries; and b) create dummy records. (The vast majority   */
/* the code is for the latter.)                                               */
/******************************************************************************/
import android.os.StatFs;
import android.os.Environment;
import java.io.File;
import java.io.FileOutputStream;
import java.nio.channels.Channels;
import java.nio.channels.FileChannel;
import java.nio.channels.ReadableByteChannel;
import java.nio.file.Files;
import java.text.DecimalFormat;
import java.util.concurrent.ConcurrentLinkedQueue;

ConcurrentLinkedQueue PERF_FILES             = new ConcurrentLinkedQueue();
AtomicInteger         PERF_NUM_CBS_DONE_FILE = null;
AtomicInteger         PERF_NUM_CBS_DONE_SAVE = null;
AtomicInteger         PERF_NUM_CBS_DONE_SET  = null;
AtomicInteger         PERF_NUM_CBS_TODO_FILE = null;
AtomicInteger         PERF_NUM_CBS_TODO_SAVE = null;
AtomicInteger         PERF_NUM_CBS_TODO_SET  = null;
boolean               PERF_ALLOW_CREATION    = false;
String                PERF_TEST_IMG          = "";
                      PERF_TYPE_TREE         = null;
int                   PERF_PHOTOS_PER_FIELD  = 1;

int getNumDummyPhotos() {
  return getNumDummyPhotos(PERF_TYPE_TREE);
}

int getNumDummyPhotos(tree) {
  if (tree == null) return 0;

  int childSum = 0;
  for (child : tree.getChildren())
    childSum += getNumDummyPhotos(child);

  boolean isRoot = isNull(tree.label);
  if (isRoot) return childSum;
  else        return childSum + getNumDummyPhotosAtNode(tree);
}

int getNumDummyPhotosAtNode(tree) {
  // Figure out how many camera refs there are at this node (i.e. in this arch
  // ent).
  List cameraRefs = getRefsByType("camera");
  List cameraRefsAtNode = new ArrayList();
  for (String ref : cameraRefs)
    if (getArchEntType(ref).equals(tree.label))
      cameraRefsAtNode.add(ref);

  return getNumDummyRecordsAtNode(tree) *
    cameraRefsAtNode.size() *
    PERF_PHOTOS_PER_FIELD;
}

int getNumSavedPhotos() {
  String dirStr = "/sdcard/faims/modules/" + getModuleId() + "/files/server/";
  return getNumFilesInDir(dirStr);
}

int getNumFilesInDir(String path) {
  File file = new File(path);
  return getNumFilesInDir(file);
}

int getNumFilesInDir(File dir) {
  int num = 0;

  File[] files = dir.listFiles();
  if (files == null) return num;

  for (File file : dir.listFiles())
    num += file.isFile() ? 1 : getNumFilesInDir(file);

  return num;
}

int getNumDummyRecords() {
  getNumDummyRecords(PERF_TYPE_TREE);
}

int getNumDummyRecords(tree) {
  if (tree == null) return 0;

  int childSum = 0;
  for (child : tree.getChildren())
    childSum += getNumDummyRecords(child);

  boolean isRoot = isNull(tree.label);
  if (isRoot) return childSum;
  else        return childSum + getNumDummyRecordsAtNode(tree);
}

int getNumDummyRecordsAtNode(tree) {
  int sum = 1;
  for (; tree.getParent() != null; tree = tree.getParent()) {
    sum *= tree.data;
  }
  return sum;
}

float getFileSizeInMBytes(String path) {
  File file = new File(path);
  return file.length() / 1000.f / 1000.f;
}

float getDirSizeInMBytes(String path) {
  File file = new File(path);
  return getDirSizeInMBytes(file);
}

float getDirSizeInMBytes(File dir) {
  float length = 0;

  File[] files = dir.listFiles();
  if (files == null) return length;

  for (File file : dir.listFiles())
    length += file.isFile()
      ? file.length() / 1000.f / 1000.f
      : getDirSizeInMBytes(file);

  return length;
}

float getSizeDummyPhotosInMBytes() {
  return getNumDummyPhotos() * getFileSizeInMBytes(PERF_TEST_IMG);
}

float getSizeSavedPhotosInMBytes() {
  String dirStr = "/sdcard/faims/modules/" + getModuleId() + "/files/server/";
  return getDirSizeInMBytes(dirStr);
}

String megabytesToString(float mb) {
  DecimalFormat df = new DecimalFormat();
  df.setMaximumFractionDigits(1);
  return df.format(mb);
}

String getSizeDummyPhotosInMBytesAsString() {
  return megabytesToString(getSizeDummyPhotosInMBytes());
}

String getSizeSavedPhotosInMBytesAsString() {
  return megabytesToString(getSizeSavedPhotosInMBytes());
}

float getFreeSpaceInMBytes() {
  return getFreeSpaceInMBytes(Environment.getRootDirectory().getAbsolutePath());
}

float getFreeSpaceInMBytes(String path) {
  StatFs statFs = new StatFs(path);
  return statFs.getBlockCount() * statFs.getBlockSize() / 1000.f / 1000.f;
}

String getFreeSpaceInMBytesAsString() {
  return megabytesToString(getFreeSpaceInMBytes());
}

Tree(String label, Object data) {
  String label    = label;
  Object data     = data;
         parent   = null;
  List   children;

  void addChild(tree) {
    if (super.children == null)
      super.children = new ArrayList();

    tree.setParent(super);
    super.children.add(tree);
  }

  getChild(int i) {
    return super.children.get(i);
  }

  int getIndex() {
    if (super.getParent() == null)
      return -1;
    return super.getParent().getChildren().indexOf(super);
  }

  getDescendant(String ref) {
    String[] refStrArr  = ref.split("/");
    List     refIntList = new ArrayList();

    for (String refStr : refStrArr) {
      int refInt = Integer.parseInt(refStr);
      refIntList.add(refInt);
    }

    return super.getDescendant(refIntList);
  }

  getDescendant(List ref) {
    if (ref.size() == 0)
      return super;

    int  head = ref.get(0);
    List tail = ref.subList(1, ref.size());

    if (ref.size() == 1) return getChild(head);
    if (ref.size() >= 2) return getChild(head).getDescendant(tail);
  }

  String getAncestorRefString(String sep, String key) {
    String s = "";
    for (Object n = super; n.getParent() != null; n = n.getParent()) {
      String val = "";
      if (key.equals("index")) val = n.getIndex() + "";
      if (key.equals("label")) val = n.label;

      s = sep + val + s;
    }

    if (!s.equals(""))
      s = s.substring(sep.length(), s.length()); // Remove initial `sep`

    return s;
  }

  String getAncestorRefString() {
    return getAncestorRefString("/", "index");
  }

  List getChildren() {
    if (super.children == null)
      return new ArrayList();
    return super.children;
  }

  int getNumNodes() {
    int sum = 1;
    for (child : super.getChildren())
      sum += child.getNumNodes();
    return sum;
  }

  void setParent(tree) {
    super.parent = tree;
  }

  getParent() {
    return super.parent;
  }

  String toString() {
    String s = "\n- " + super.label + " (" + data + ")";
    if (super.children != null)
      for (c : super.children)
        s += c.toString().replace("\n", "\n\t\t");
    return s;
  }

  return this;
}

TimedFetchCallback(String query, FetchCallback cb, int callerIdx) {
  int           callerIdx = callerIdx;
  String        query     = query;
  FetchCallback cb        = cb;
  bsh.CallStack cs_       = this.callstack.copy();

  long startTime = System.currentTimeMillis(); // Timer starts here
  long stopTime  = -1;

  void onFetch(Object result) {
    super.stopTimer();
    super.updatePerfLog();

    if (super.cb != null)
      super.cb.onFetch(result);
  }

  void onError(String message) {
    if (super.cb != null)
      super.cb.onError(message);
  }

  void stopTimer() {
    super.stopTime = System.currentTimeMillis();
  }

  double getElapsedMillis() {
    if (stopTime < 0)
      return -Double.MAX_VALUE;
    return super.stopTime - super.startTime;
  }

  void updatePerfLog() {
    String deviceModel     = android.os.Build.MODEL;
    String sessStartMs     = SESS_START_TIME + "";
    String parentNameSpace = cs_.get(callerIdx + 1).getName() + "";
    String srcLine         = cs_.get(callerIdx + 0).getInvocationLine() + "";
    String query           = query;
    String queryStartMs    = startTime + "";
    String queryStopMs     = stopTime + "";

    String updateQuery = "";
    updateQuery += " INSERT INTO perflog (";
    updateQuery += "             deviceModel,";
    updateQuery += "             sessStartMs,";
    updateQuery += "             parentNameSpace,";
    updateQuery += "             srcLine,";
    updateQuery += "             query,";
    updateQuery += "             queryStartMs,";
    updateQuery += "             queryStopMs,";
    updateQuery += "             numArchentity,";
    updateQuery += "             numAentvalue,";
    updateQuery += "             numRelationship,";
    updateQuery += "             numAentreln";
    updateQuery += " )    SELECT %s, %s, %s, %s, %s, %s, %s, a, av, r, ar";
    updateQuery += "        FROM";
    updateQuery += "             (SELECT COUNT(*) AS a  FROM archentity  ) a,";
    updateQuery += "             (SELECT COUNT(*) AS av FROM aentvalue   ) av,";
    updateQuery += "             (SELECT COUNT(*) AS r  FROM relationship) r,";
    updateQuery += "             (SELECT COUNT(*) AS ar FROM aentreln    ) ar";

    updateQuery = dbReplaceFirst(updateQuery, deviceModel);
    updateQuery = dbReplaceFirst(updateQuery, sessStartMs);
    updateQuery = dbReplaceFirst(updateQuery, parentNameSpace);
    updateQuery = dbReplaceFirst(updateQuery, srcLine);
    updateQuery = dbReplaceFirst(updateQuery, query);
    updateQuery = dbReplaceFirst(updateQuery, queryStartMs);
    updateQuery = dbReplaceFirst(updateQuery, queryStopMs);

    fetchOne(updateQuery);
  }

  return this;
}

void timedFetchOne(String q, FetchCallback cb, int callerIdx) {
  tcb = TimedFetchCallback(q, cb, callerIdx);
  fetchOne(q, tcb);
}

void timedFetchAll(String q, FetchCallback cb, int callerIdx) {
  tcb = TimedFetchCallback(q, cb, callerIdx);
  fetchAll(q, tcb);
}

void timedFetchOne(String q, FetchCallback cb) {
  timedFetchOne(q, cb, 2);
}

void timedFetchAll(String q, FetchCallback cb) {
  timedFetchAll(q, cb, 2);
}

void timedFetchOne(String q) {
  timedFetchOne(q, null, 2);
}

void timedFetchAll(String q) {
  timedFetchAll(q, null, 2);
}

void timedPopulateCursorList(String ref, String q, int limit) {
  String boundQ = q;
  boundQ = dbReplaceFirst(boundQ, "?", limit + "");
  boundQ = dbReplaceFirst(boundQ, "?", "0");
  timedFetchAll(boundQ, null, 2);

  populateCursorList(ref, q, limit);
}

void setUpTypeHierarchy() {
  //- 
  //  - Record
  //    - Sighting

  n0 = Tree("", 1);
  n1 = Tree("Record", 1);
  n2 = Tree("Sighting", 1);

  n0.addChild(n1);

  n1.addChild(n2);


  PERF_TYPE_TREE = n0;
}

setUpTypeHierarchy();

void saveEntitiesToPCRel(
    String parentType,
    String childType,
    String parentUuid,
    String childUuid
) {
    String relName = parentType + " - " + childType;
    String pOf     = "Parent Of";
    String cOf     = "Child Of";
    saveEntitiesToHierRel(relName, parentUuid, childUuid, pOf, cOf, "");
}

String randomMenuValue(String ref) {
  List vocabIds = getVocabIdsFromRef(ref);
  int  len      = vocabIds.size();
  if (len <= 0)
    return "";

  Random r   = new Random();
  int    i   = r.nextInt(len);

  return vocabIds.get(i);
}

String randomInputValue(String ref) {
  int len = 5;
  randomInputValue(ref, len);
}

String randomInputValue(String ref, int len) {
  if (getType(ref).equals("camera"))
    if (PERF_FILES.isEmpty()) {
      Log.e("randomInputValue()", "PERF_FILES empty, using empty string");
      return "";
    } else
      return PERF_FILES.poll();
  else
    return getRandomString(len);
}

List getAttribsForRef(String ref) {
  int numAttribs = 1;
  if (!hasData(ref))                 numAttribs = 0;
  if (hasMediaType(ref))             numAttribs = 0;
  if (getType(ref).equals("camera")) numAttribs = PERF_PHOTOS_PER_FIELD;

  List attribs = new ArrayList();
  for (int i = 0; i < numAttribs; i++) {
    String attribName = getAttributeName(ref);
    String annotation = "";
    String vocab      = "";
    String measure    = "";
    String certainty  = "1.0";

    if (hasMenuType(ref)) vocab   = randomMenuValue (ref);
    else                  measure = randomInputValue(ref);

    EntityAttribute ea = createEntityAttribute(
        attribName,
        annotation,
        vocab,
        measure,
        certainty
    );
    attribs.add(ea);
  }

  return attribs;
}

List getAttribsForArchEnt(String archEntType) {
  List attribs = new ArrayList();
  for (String ref : getRefs())
    if (getArchEntType(ref).equals(archEntType))
      attribs.addAll(getAttribsForRef(ref));

  return attribs;
}

List getDummyGeometry(String archEntType) {
  String tabGroupRef = archEntType.replaceAll(" ", "_");

  if (getTakeFromGpsMappings().get(tabGroupRef) == null)
    return null;

  Double northing = 1.f;
  Double easting  = 1.f;

  MapPos mapPos = new MapPos(easting, northing);
  Point samplePoint = new Point(mapPos, null, (PointStyle) null, null);
  ArrayList geolist = new ArrayList();
  geolist.add(samplePoint);

  return geolist;
}

void displayRecordDigest(int numCreated) {
  String q = "";
  q += "   SELECT '{All}', count(*)";
  q += "     FROM latestnondeletedarchent";
  q += "    UNION";
  q += "   SELECT aenttypename, count(*)";
  q += "     FROM latestnondeletedarchent";
  q += "     JOIN aenttype USING (aenttypeid)";
  q += " GROUP BY aenttypename";

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      String head = "{perf_digest_1_head}";
      String body = "";
      if (numCreated >= 0)
        body += numCreated + " {perf_digest_1_body_1}";
      body += " {perf_digest_1_body_2}";

      if (result == null)
        result = new ArrayList();
      for (List row : result) {
        String type = row.get(0);
        String num  = row.get(1);

        body += "\t- " + type + ": " + num + "\n";
      }

      body += "\nThere are " +
        getNumSavedPhotos() +
        " saved files on this device. There is " +
        getFreeSpaceInMBytesAsString() +
        " MB of free space on this device, of which the saved files use " +
        getSizeSavedPhotosInMBytesAsString() +
        " MB.";

      if (dialog != null)
        dialog.dismiss();
      showWarning(head, body);
    }
  };

  fetchAll(q, cb);
}

void displayRecordDigest() {
  displayRecordDigest(-1);
}

PerfSaveCallback(tree, String parentUuid) {
  tree              = tree;
  String parentUuid = parentUuid;

  saveRel(uuid) {
    parent            = super.tree.getParent();
    String parentUuid = super.parentUuid;

    if (parent == null || parentUuid == null)
      return;

    String parentType = parent    .label;
    String childType  = super.tree.label;

    saveEntitiesToPCRel(parentType, childType, parentUuid, uuid);
  }

  void onSave(String uuid, boolean newRecord) {
    int cbsDone = PERF_NUM_CBS_DONE_SAVE.incrementAndGet();
    int cbsTodo = PERF_NUM_CBS_TODO_SAVE.get();
    if (cbsTodo == cbsDone)
      displayRecordDigest(cbsDone);

    if (newRecord)
      super.saveRel(uuid);

    for (subtree : super.tree.getChildren())
      saveArchEnts(subtree, uuid);
  }

  void onError(String message) {
    if (dialog != null)
      dialog.dismiss();
    showWarning("Error", message);
  }

  return this;
}

void saveArchEnts(tree, String parentUuid) {
  String archEntName = tree.label;
  List   geometry    = getDummyGeometry(archEntName);
  int    numEnts     = tree.data;
  cb                 = PerfSaveCallback(tree, parentUuid);

  for (int i = 0; i < numEnts; i++) {
    List attribs = getAttribsForArchEnt(archEntName);
    saveArchEnt(null, archEntName, geometry, attribs, cb);
  }
}

void createDummyRecords() {
  int  n = getNumDummyRecords();
  dialog = showBusy("{perf_dummy_busy_head}", n + " {perf_dummy_busy_body}");

  enqueueTestFiles("createDummyRecordsRecursively()");
}

void createDummyRecordsRecursively() {
  int n = getNumDummyRecords();
  PERF_NUM_CBS_TODO_SAVE = new AtomicInteger(n);
  PERF_NUM_CBS_DONE_SAVE = new AtomicInteger(0);

  for (child : PERF_TYPE_TREE.getChildren())
    saveArchEnts(child, null);
}

void enqueueTestFiles(String cb) {
  enqueueTestFiles(getNumDummyRecords(), cb);
}

void enqueueTestFiles(int numFiles, String cb) {
  if (isNull(PERF_TEST_IMG)) {
    String head; String body;
    head  = "Record Creation Aborted";
    body  = "The master file from which test files are enqueued could not be ";
    body += "found on disk. Record creation cannot take place unless this file";
    body += " is present. Please ensure that your device is connected to the ";
    body += "internet, re-load the module, and try to run a create dummy ";
    body += "records again.";
    showWarning(head, body);
    return;
  }

  // Set `PERF_NUM_CBS_TODO_FILE` and `PERF_NUM_CBS_DONE_FILE`
  int numPhotosToMake;
  numPhotosToMake  = getNumDummyPhotos();
  numPhotosToMake -= PERF_FILES.size();
  numPhotosToMake  = Math.max(0, numPhotosToMake);
  // We're going to count returns from attachFile too, hence multiplication by 2
  PERF_NUM_CBS_TODO_FILE = new AtomicInteger(numPhotosToMake + 1);
  PERF_NUM_CBS_DONE_FILE = new AtomicInteger(0);

  // Make records
  for (int i = 0; i < numPhotosToMake; i++) {
    String fileName = attachFile(
        PERF_TEST_IMG,
        false,
        null,
        fun2str("checkEnqueueTestFilesIsDone", cb)
    );

    PERF_FILES.add(fileName);
  }
  checkEnqueueTestFilesIsDone(cb);
}

void checkEnqueueTestFilesIsDone(String onDone) {
  int cbsDone = PERF_NUM_CBS_DONE_FILE.incrementAndGet();
  int cbsTodo = PERF_NUM_CBS_TODO_FILE.get();
  if (cbsTodo == cbsDone)
    execute(onDone);
}

PerfImageDownloader() {
  void run() {
    if (isInUnitTestTime())
      return;

    String filStr = "/sdcard/faims/modules/" + getModuleId() +
        "/files/test.jpg";
    String urlStr = "https://github.com/FAIMS/FAIMS-Tools/raw/master/" +
        "generators/christian/tests/images/construction-2894x1924.jpg";

    if (detectFile(filStr))
      return;

    try {
      URL           urlObj = new URL(urlStr);
      URLConnection urlCon = urlObj.openConnection();

      new File(filStr).getParentFile().mkdirs();

      InputStream      is  = urlCon.getInputStream();
      FileOutputStream fos = new FileOutputStream(filStr);

      byte[] buffer = new byte[4096];
      int len;

      // While we have availble data, continue downloading and storing to local
      // file
      while ((len = is.read(buffer)) > 0)
        fos.write(buffer, 0, len);

      if (is  != null) is .close();
      if (fos != null) fos.close();
    } catch (Exception e) {
      Log.e("PerfImageDownloader.run()", e.getMessage());
    }

    // Set `PERF_TEST_IMG` if the file was created successfully
    detectFile(filStr);
  }

  void start() {
    Runnable r = PerfImageDownloader();
    new Thread(r).start();
  }

  boolean detectFile(String filStr) {
    File newImg = new File(filStr);
    if (newImg.length() > 0) {
      PERF_TEST_IMG = filStr;
      return true;
    }
    return false;
  }

  return this;
}

void verifyEnableRecordCreation() {
  String q = "";
  q += " SELECT userid, fname, lname, email, password";
  q += "   FROM user";
  q += "  WHERE fname = 'Faims'";
  q += "    AND lname = 'Admin'";

  FetchCallback callback = new FetchCallback() {
    onFetch(result) {
      String userId    = result.get(0);
      String nameFirst = result.get(1);
      String nameLast  = result.get(2);
      String email     = result.get(3);
      String password  = result.get(4);

      User user = new User(userId, nameFirst, nameLast, email, password);
      setUser(user);

      showVerifyUserDialog("enableRecordCreation()");
    }
  };

  fetchOne(q, callback);
}

void enableRecordCreation() {
  PERF_ALLOW_CREATION = true;
  setUpPerfActionBarItems();

  showWarning("{perf_create_on_head}", "{perf_create_on_body}");
}

boolean isInPerfTestTime() {
  return false;
}

// Produce entity number specification
void setUpDummyRecordCreation() {
  int n = PERF_TYPE_TREE.getNumNodes()
      - 1; // Ignore root node

  PERF_NUM_CBS_TODO_SET = new AtomicInteger(n);
  PERF_NUM_CBS_DONE_SET = new AtomicInteger(0);

  setUpDummyRecordCreation(PERF_TYPE_TREE, "");
}

String getBreadCrumbs(node) {
  return node.getAncestorRefString(" › ", "label");
}

String typeToReadableType(String type) {
  if (type.equals("")) return "{this_module}";
  else                 return "{each} " + type;
}

void setUpDummyRecordCreation(tree, String parentType) {
  String type = tree.label;

  for (child : tree.getChildren())
    setUpDummyRecordCreation(child, type);

  if (!type.equals("")) {
    // Make head and body for `showTextAlert`
    String treeRef = tree.getAncestorRefString();
    String head    = getBreadCrumbs(tree);
    String body    = "{perf_rec_num_body_1} %s {perf_rec_num_body_2} %s " +
                     "{perf_rec_num_body_3}";
    body = replaceFirst(body, type);
    body = replaceFirst(body, typeToReadableType(parentType));

    promptSetDummyRecordQuantity(treeRef, head, body);
  }
}

void promptSetDummyRecordQuantity(String treeRef, String head, String body) {
  String cb = "setDummyRecordQuantity(\"%s\", \"%s\", \"%s\")";
  cb = replaceFirst(cb, treeRef);
  cb = replaceFirst(cb, head);
  cb = replaceFirst(cb, escape(body));

  showTextAlert(head, body, cb, "checkSetDummyRecordQuantityIsDone()");
}

void setDummyRecordQuantity(
    String treeRef,
    String failHead,
    String failBody
) {
  // Parse data as int
  int intData;
  try {
    intData = Integer.parseInt(getLastTextAlertInput());
  } catch (Exception e) {
    promptSetDummyRecordQuantity(treeRef, failHead, failBody);
    return;
  }

  PERF_TYPE_TREE.getDescendant(treeRef).data = intData;
  checkSetDummyRecordQuantityIsDone();
}

void checkSetDummyRecordQuantityIsDone() {
  int cbsDone = PERF_NUM_CBS_DONE_SET.incrementAndGet();
  int cbsTodo = PERF_NUM_CBS_TODO_SET.get();
  if (cbsTodo == cbsDone) {
    String totalImgs = getNumDummyPhotos() + "";
    String totalSizs = getSizeDummyPhotosInMBytesAsString();
    String totalFree = getFreeSpaceInMBytesAsString();
    String totalRecs = getNumDummyRecords() + "";
    String treeString = PERF_TYPE_TREE.toString();
    String treeStringNoRoot = treeString.substring(
        "\n-  (1)".length(),
        treeString.length()
    );

    String head = "{perf_update_head}";
    String body =
         "{perf_update_body_1} " + treeStringNoRoot +
        " {perf_update_body_2} " + totalRecs +
        " {perf_update_body_3} " + totalImgs +
        " {perf_update_body_4} " + totalFree +
        " {perf_update_body_5} " + totalSizs +
        " {perf_update_body_6}";

    showAlert(head, body, "createDummyRecords()", "");
  }
}

void verifyCreateDummyRecords() {
  // Unless syncing is disabled, 'database locked' errors will happen
  setFileSyncEnabled(false);
  setSyncEnabled    (false);

  if (isSyncEnabled()) {
    showWarning("{perf_dummy_err_head}", "{perf_dummy_err_body}");
    return;
  }

  showAlert(
      "{perf_wiz_head}",
      "{perf_wiz_body}",
      "setUpDummyRecordCreation()",
      ""
  );
}

void setUpPerfActionBarItems() {
  removeActionBarItem("create_dummy_records");
  removeActionBarItem("display_record_digest");
  removeActionBarItem("enable_record_creation");

  String userMenuTabGroup = getTabGroupRef(USER_MENU_PATH);
  if (!isDisplayed(userMenuTabGroup)) {
    PERF_ALLOW_CREATION = false;
    return;
  }
  if (!isInPerfTestTime())
    return;

  ActionButtonCallback createDummyRecords = new ActionButtonCallback() {
      actionOnLabel() {
        "{create_dummy_records}";
      }
      actionOn() {
        verifyCreateDummyRecords();
      }
  };

  ActionButtonCallback displayRecordDigest = new ActionButtonCallback() {
      actionOnLabel() {
        "{display_record_digest}";
      }
      actionOn() {
        displayRecordDigest();
      }
  };

  ActionButtonCallback enableRecordCreation = new ActionButtonCallback() {
      actionOnLabel() {
        "{enable_record_creation}";
      }
      actionOn() {
        verifyEnableRecordCreation();
      }
  };

  // Careful! The `if` statements are weirdly formatted
  addActionBarItem("display_record_digest",  displayRecordDigest);
  if (PERF_ALLOW_CREATION)
  addActionBarItem("create_dummy_records",   createDummyRecords);
  if (!PERF_ALLOW_CREATION)
  addActionBarItem("enable_record_creation", enableRecordCreation);
}

void setUpPerfTestMode() {
  if (!isInPerfTestTime())
    return;

  // Download test image
  PerfImageDownloader().start();

  // Display performance testing notification
  showWarning("{perf_mode_head}", "{perf_mode_body}");
}

if (!isNull(USER_MENU_PATH)) {
  String userMenuTabGroup = getTabGroupRef(USER_MENU_PATH);

  setUpPerfTestMode();
  addOnEvent(userMenuTabGroup, "show",  "setUpPerfActionBarItems()");
  addOnEvent(userMenuTabGroup, "leave", "setUpPerfActionBarItems()");
}


/******************************************************************************/
/*                           LOCALSETTINGS UPDATES                            */
/******************************************************************************/
void insertIntoLocalSettings(String ref) {
  String val = getFieldValue(ref);
  insertIntoLocalSettings(ref, val);
}

void insertIntoLocalSettings(String key, String val, boolean doOverwrite) {
  if (val == null) val = "";

  String q;
  if (doOverwrite) q = "REPLACE INTO localSettings(key, value) VALUES(%s, %s)";
  else             q = "INSERT  INTO localSettings(key, value) VALUES(%s, %s)";

  q = dbReplaceFirst(q, key);
  q = dbReplaceFirst(q, val);
  fetchOne(q);
}

void insertIntoLocalSettings(String key, String val) {
  insertIntoLocalSettings(key, val, true);
}

void insertIntoLocalSettings(String key, Integer val) {
  insertIntoLocalSettings(key, Integer.toString(val));
}

void deleteFromLocalSettings(String key) {
  String q = "DELETE FROM localsettings WHERE key=%s";
  q = dbReplaceFirst(q, key);

  fetchOne(q);
}

void insertIntoLocalSettingsOnChange(String ref) {
  String val = getFieldValue(ref);

  String insertCallback = fun2str("insertIntoLocalSettings", ref);

  addOnEvent(ref, "blur",  insertCallback);
  addOnEvent(ref, "click", insertCallback);
}

void setFieldValueFromLocalSettings(
    String  key,
    String  ref,
    boolean doOverwrite,
    String defaultVal
) {
  String val = getFieldValue(ref);
  if (!isNull(val) && !doOverwrite) {
    return;
  }

  String q = "SELECT value FROM localSettings WHERE key = %s";
  q = dbReplaceFirst(q, key);

  FetchCallback set = new FetchCallback() {
    onFetch(result) {
      if (result != null && result.size() >= 1) {
        setFieldValue(ref, result.get(0));
      } else if (defaultVal != null) {
        setFieldValue(ref, defaultVal);
      }
    }
  };

  fetchOne(q, set);
}

void setFieldValueFromLocalSettings(
    String  key,
    String  ref,
    boolean doOverwrite
) {
  setFieldValueFromLocalSettings(key, ref, doOverwrite, null);
}

void setFieldValueFromLocalSettings(
    String  ref,
    boolean doOverwrite,
    String  defaultVal
) {
  setFieldValueFromLocalSettings(ref, ref, doOverwrite, defaultVal);
}

void setFieldValueFromLocalSettings(String ref, boolean doOverwrite) {
  setFieldValueFromLocalSettings(ref, ref, doOverwrite);
}

void setFieldValueFromLocalSettings(String key, String ref) {
  setFieldValueFromLocalSettings(key, ref, false);
}

void setFieldValueFromLocalSettings(String ref) {
  setFieldValueFromLocalSettings(ref, false);
}

void setFieldValueFromLocalSettingsOnEvent(
    String ref,
    boolean doOverwrite,
    String defaultVal,
    String event
) {
  String cb = fun2str(
      "setFieldValueFromLocalSettings",
      new Object[]{ref, doOverwrite, defaultVal}
  );

  addOnEvent(getTabGroupRef(ref), event, cb);
}

void setFieldValueFromLocalSettingsOnShow(
    String ref,
    boolean doOverwrite,
    String defaultVal
) {
  setFieldValueFromLocalSettingsOnEvent(ref, doOverwrite, defaultVal, "show");
}

void setFieldValueFromLocalSettingsOnShow(String ref, boolean doOverwrite) {
  setFieldValueFromLocalSettingsOnShow(ref, doOverwrite, (String) null);
}

/* Causes the value of the field given by `ref` to be saved each time it is
 * modified (on blur). The value of the field is restored when the tab group
 * containing the field is displayed.
 *
 * This function depends on `addOnEvent`. Therefore this function must be called
 * after `addOnEvent` is defined, but before `bindOnEvents` is called. This will
 * be so if the call is made in the autogenerator's `logic` tags.
 */
void persistOverSessions(String ref, boolean doOverwrite, String defaultVal) {
  String tabGroupRef = getTabGroupRef(ref);
  boolean isData = !isFlaggedNodata(tabGroupRef);

  String event;
  if (isData) event = "create";
  else        event = "show";

  setFieldValueFromLocalSettingsOnEvent(ref, doOverwrite, defaultVal, event);
  insertIntoLocalSettingsOnChange      (ref);
}

void persistOverSessions(String ref, boolean doOverwrite) {
  setFieldValueFromLocalSettingsOnShow(ref, doOverwrite);
  insertIntoLocalSettingsOnChange     (ref);
}

void persistOverSessions(String ref, String defaultVal) {
  persistOverSessions(ref, false, defaultVal);
}

void persistOverSessions(String ref) {
  persistOverSessions(ref, false, (String) null);
}



/******************************************************************************/
/*                           FIELD COPYING HELPERS                            */
/*                                                                            */
/* Provides an easy way to copy field values, even between vocabs.            */
/******************************************************************************/
boolean isSelected(String ref, String vocabName) {
  String vocabNameActual = getMenuValue(ref);

  if (vocabNameActual == null)
    return vocabNameActual == vocabName;
  else
    return vocabNameActual.equals(vocabName);
}

boolean setMenuValue(String ref, String vocabName) {
  String attrName = getAttributeName(ref);
  String vocabId = getVocabId(attrName, vocabName);

  if (isNull(vocabId))
    return false;

  setFieldValue(ref, vocabId);
  return isSelected(ref, vocabName);
}

boolean copyFieldValue(String src, String dst) {
  Boolean doFindVocabId = true;
  return copyFieldValue(src, dst, doFindVocabId);
}

/* `src`           The ref of the source field.
 * `dst`           The ref of the destination field.
 * `doFindVocabId` If this is true, and the properties/attributes of `src` and
 *                 `dst` are different, `copyFieldValue` treats `src` and `dst`
 *                 as if they were menus. Therefore, to copy the value seen by
 *                 the user (i.e. the vocabName of `src`), a database query is
 *                 performed. The query determines the which vocabId of `dst`
 *                 will make it display the same vocabName as `src`.
 *
 *                 If `doFindVocabId` is false, the value returned by
 *                 `getFieldValue` is copied, without any database accesses.
 */
boolean copyFieldValue(String src, String dst, Boolean doFindVocabId) {
  if (!doFindVocabId) {
    String valSrc = getFieldValue(src);
    setFieldValue(dst, valSrc);
    return true;
  }

  String valSrc;
  if (hasMenuType(src)) valSrc = getMenuValue (src);
  else                  valSrc = getFieldValue(src);

  if (hasMenuType(dst)) setMenuValue (dst, valSrc);
  else                  setFieldValue(dst, valSrc);

  String valDst;
  if (hasMenuType(dst)) valDst = getMenuValue (dst);
  else                  valDst = getFieldValue(dst);

  return valDst.equals(valSrc);
}

void clearField(String ref) {
  switch(getType(ref)) {
    case "dropdown": setFieldValue(ref, null); break;
    case "list":     return;
    default:         setFieldValue(ref, "");
  }
}

/* Copies the value from the field at `src` to the field at `dst` whenever the
 * a new record containing `dst` is created.
 *
 * `doCheckParent` If this is true, the value is only copied when the parent tab
 *                 group of the tab group referred to by `dst` is equal to the
 *                 tab group referred to by `src`. This is a way of checking
 *                 whether the field referred to by `src` has been loaded.
 * `doFindVocabId` Same as the `doFindVocabId` argument for the `copyFieldValue`
 *                 function.
 */
void inheritFieldValue(
    String src,
    String dst,
    boolean doCheckParent,
    boolean doFindVocabId
) {
  String fun = "";
  fun += "if (!{check} || getPreviouslyDisplayedTabGroup().equals(\"{parent}\"))";
  fun += "  copyFieldValue(\"{src}\", \"{dst}\", {find})";

  fun = replaceFirst(fun, "{check}",  doCheckParent + "");
  fun = replaceFirst(fun, "{parent}", getTabGroupRef(src));
  fun = replaceFirst(fun, "{src}",    src);
  fun = replaceFirst(fun, "{dst}",    dst);
  fun = replaceFirst(fun, "{find}",   doFindVocabId + "");


  String dstParent = getTabGroupRef(dst);
  if (isFlaggedNodata(dstParent)) addOnEvent(dstParent, "show",   fun);
  else                            addOnEvent(dstParent, "create", fun);
}

/* If `doCheckParent`, then the value at `src` will only be inherited to `dst`
 * if `getTabGroupRef(src)` was the previously displayed tab group.
 */
void inheritFieldValue(String src, String dst, boolean doCheckParent) {
  inheritFieldValue(src, dst, doCheckParent, true);
}

void inheritFieldValue(String src, String dst) {
  inheritFieldValue(src, dst, true);
}



/******************************************************************************/
/*                            NEW TAB REDIRECTION                             */
/*                                                                            */
/* Causes a call to `newTab("tab/path")` to take the user to the specified    */
/* tab.                                                                       */
/******************************************************************************/
void newTab(String ref, Boolean resolveTabs) {
  if (!resolveTabs) {
    newTab(ref);
    return;
  }

  if (isTab(ref))
    redirectTab = ref;

  String tabGroupRef = getTabGroupRef(ref);
  if (isDisplayed(tabGroupRef))
    resolveNewTab();
  else
    newTabGroup(tabGroupRef);
}

void resolveNewTab() {
  if (isNull(redirectTab))
    return;
  if (!isTab(redirectTab))
    return;

  newTab(redirectTab);
  redirectTab = "";
}

for (String ref : getTabGroups()) {
  addOnEvent(ref, "show", "resolveNewTab()");
}

/******************************************************************************/
/*                           DROPDOWN VALUE GETTER                            */
/*                                                                            */
/* For consistency with `getListItemValue()`.                                 */
/******************************************************************************/
String DROPDOWN_ITEM_VALUE = null;

String getDropdownItemValue() {
  return DROPDOWN_ITEM_VALUE;
}

for (entry : REF_TO_TYPE.entrySet()) {
  String type = entry.getValue();
  String ref  = entry.getKey();
  String evt  = "click";
  String stmt = "DROPDOWN_ITEM_VALUE = getFieldValue(\"%s\")";
  stmt = replaceFirst(stmt, ref);

  if (!type.equals("dropdown"))
    continue;
  if (hasNoUi(ref))
    continue;

  addOnEvent(ref, evt, stmt);
}

/******************************************************************************/
/*                              MENU POPULATION                               */
/******************************************************************************/
/* Deprecated: Fetches the contents of a specifed vocabulary and stores it in
 * the given list.
 */
void fetchVocab(String vocabName, List storageList) {
  fetchVocab(vocabName, storageList, null);
}

void fetchVocab(String vocabName, List storageList, String callbackFunction) {
  fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = '" + vocabName + "';", new FetchCallback() {
    onFetch(result) {
      if (isNull(result))
        result = new ArrayList();

      storageList.addAll(result);
      Log.d("fetchVocab()", "Fetched vocabulary \"" + vocabname + "\" contents: " + result.toString());
      if (callbackFunction != null && !isNull(callbackFunction)) {
        execute(callbackFunction);
      }
    }
  });
}

/** Wrapper for to make a vocab without an exlusion list **/
String getMakeVocabType(String ref) {
  if (isHier(ref)) return "hierarchical" + getType(ref);
  else             return ""             + getType(ref);
}

void makeVocabs() {
  for (String ref : DATA_REFS)
    if (!hasNoUi(ref))
      makeVocab(ref);
  for (String ref : VP_REF_TO_REF.keySet())
    if (!hasNoUi(ref))
      makeVocab(ref);
}

void makeVocab(String ref) {
  if (!hasMenuType(ref))
    return;

  if (hasVpRef(ref))
    makeVocab(getMakeVocabType(ref), ref, getAttributeName(getVpRef(ref)));
  else
    makeVocab(getMakeVocabType(ref), ref, getAttributeName(ref));
}

void makeVocab(String type, String ref, String attrName) {
  makeVocab(type, ref, attrName, null);
}
void makeVocab(String type, String ref, String attrName, List vocabExclusions) {
    makeVocab(type, ref, attrName, vocabExclusions, null);
}

/* Populates the ref specified vocabulary from the database based on the given
 * attribute name, where type is the type of the vocab to populate (checkbox,
 * dropdown, hierarchicaldropdown, hierarchicalpicture, list, picture, radio).
 * */
void makeVocab(
    String type,
    String ref,
    String attrName,
    List   vocabExclusions,
    String callbackFunction
){
  if (
      isNull(type) ||
      isNull(ref) ||
      isNull(attrName)
  ) {
    Log.e(
        "makeVocab()",
        "Can't make populate vocab whose type, ref or attribute is null"
    );
    return;
  }

  if (!isModuleLoaded()) {
    String head = "Logic Error";
    String body = "makeVocab called before module loaded";
    showWarning(head, body);
    return;
  }

  // Make a filtered vocab
  List menuEntries = getMenuEntries(attrName);
  if (vocabExclusions == null) vocabExclusions = new ArrayList();

  List filteredVocab = new ArrayList();
  for(item : menuEntries) {
    if (vocabExclusions.contains(item.get(1))) {
      Log.d("makeVocab()", "removing vocab exclusion: " + item.get(1));
    } else {
      filteredVocab.add(item);
    }
  }

  // Determine whether to include a null option in the menu
  Boolean hasNull =
         !vocabExclusions.contains("")
      && !vocabExclusions.contains(null);

  // Populate menu
  populateMenu(type, ref, attrName, filteredVocab, hasNull);

  // Execute callback
  if (!isNull(callbackFunction))
    execute(callbackFunction);
}

boolean populateMenu(
    String  type,
    String  ref,
    String  attrName,
    List    entries,
    boolean hasNull
) {
  if (isNull(type))
    type = getMakeVocabType(ref);

  switch(type) {
    case "checkbox":
    case "CheckBoxGroup":
      populateCheckBoxGroup             (ref, entries);           break;
    case "dropdown":
    case "DropDown":
      populateDropDown                  (ref, entries, hasNull);  break;
    case "hierarchicaldropdown":
    case "HierarchicalDropDown":
      populateHierarchicalDropDown      (ref, attrName, hasNull); break;
    case "hierarchicalpicture":
    case "HierarchicalPictureGallery":
      populateHierarchicalPictureGallery(ref, attrName);          break;
    case "List":
    case "list":
      populateList                      (ref, entries);           break;
    case "picture":
    case "PictureGallery":
      populatePictureGallery            (ref, entries);           break;
    case "radio":
    case "RadioGroup":
      populateRadioGroup                (ref, entries);           break;
    default:
      Log.e(
          "populateMenu()",
          "Can't populate vocab; type '" + type + "' not recognised"
      );
      return false;
  }
  return true;
}

boolean populateMenu(String ref, List entries) {
  return populateMenu(null, ref, "", entries, true);
}

void populateMenu(String ref, String entry) {
  List entries  = new ArrayList();
  entries.add(new NameValuePair(entry, ""));

  populateMenu(ref, entries);
}

/******************************************************************************/
/*                             MENU VALUE GETTER                              */
/*                                                                            */
/* Provides simple ways of getting a menu's vocabname as opposed to the       */
/* default, which is the vocabid.                                             */
/******************************************************************************/
// Map from vocabid to vocabname. Populated by `fetchMenuValues()`.
Map VOCABID_TO_VOCABNAME        = new HashMap();
Map VOCABNAME_TO_VOCABID        = new HashMap();
Map ATTRIB_NAME_TO_VOCABIDS     = new HashMap();
Map ATTRIB_NAME_TO_MENU_ENTRIES = new HashMap();

void setVocabId(String attrName, String vocabName, String vocabId) {
  String key = attrName + SEP + vocabName;
  String val = vocabId;

  VOCABNAME_TO_VOCABID.put(key, val);
}

String getVocabId(String attrName, String vocabName) {
  return VOCABNAME_TO_VOCABID.get(attrName + SEP + vocabName);
}

void addVocabId(String attrName, String vocabId) {
  List vocabIds = ATTRIB_NAME_TO_VOCABIDS.get(attrName);
  if (vocabIds == null) {
    vocabIds = new ArrayList();
    ATTRIB_NAME_TO_VOCABIDS.put(attrName, vocabIds);
  }

  vocabIds.add(vocabId);
}

void addMenuEntry(
    String attrName,
    String vocabId,
    String vocabName,
    String picUrl,
    String parentVocabId
) {
  List menuEntries = ATTRIB_NAME_TO_MENU_ENTRIES.get(attrName);
  if (menuEntries == null) {
    menuEntries = new ArrayList();
    ATTRIB_NAME_TO_MENU_ENTRIES.put(attrName, menuEntries);
  }

  List menuEntry = new ArrayList();
  menuEntry.add(vocabId);
  menuEntry.add(vocabName);
  menuEntry.add(picUrl);
  menuEntry.add(parentVocabId);

  menuEntries.add(menuEntry);
}

List getMenuEntries(String attrName) {
  List menuEntries = ATTRIB_NAME_TO_MENU_ENTRIES.get(attrName);
  if (menuEntries == null) return new ArrayList();
  else                     return new ArrayList(menuEntries);
}

List getMenuEntriesFromRef(String ref) {
  return getMenuEntries(getAttributeName(ref));
}

List getVocabIdsFromAttribName(String attribName) {
  List vocabIds = ATTRIB_NAME_TO_VOCABIDS.get(attribName);
  if (vocabIds == null) return new ArrayList();
  else                  return new ArrayList(vocabIds);
}

List getVocabIdsFromRef(String ref) {
  String attribName = getAttributeName(ref);
  return getVocabIdsFromAttribName(attribName);
}

/*
 * Initialises `VOCABID_TO_VOCABNAME` with the (vocabid -> vocabname) mapping of
 * every menu.
 */
void fetchMenuValues() {
  String q = "";
  q += "   SELECT VocabID, VocabName, AttributeName, PictureURL, ParentVocabID";
  q += "     FROM Vocabulary";
  q += "     JOIN AttributeKey USING (AttributeID)";
  q += " ORDER BY VocabCountOrder";

  FetchCallback populateHashMap = new FetchCallback() {
    onFetch(List result) {
      if (result == null)
        result = new ArrayList();

      for (List row : result) {
        String vocabId       = row.get(0);
        String vocabName     = row.get(1);
        String attrName      = row.get(2);
        String picUrl        = row.get(3);
        String parentVocabId = row.get(4);

        // Populate VOCABID_TO_VOCABNAME
        VOCABID_TO_VOCABNAME.put(vocabId, vocabName);

        // Populate VOCABNAME_TO_VOCABID
        setVocabId(attrName, vocabName, vocabId);

        // Populate ATTRIB_NAME_TO_VOCABIDS
        addVocabId(attrName, vocabId);

        // Populate ATTRIB_NAME_TO_MENU_ENTRIES
        addMenuEntry(attrName, vocabId, vocabName, picUrl, parentVocabId);
      }

      decAndExecIfModuleLoaded();
    }
  };

  incJobsTillLoaded();
  fetchAll(q, populateHashMap);
}

addOnEvent("module", "load", "makeVocabs()");
fetchMenuValues();

/* Returns a menu's vocabname, instead of the (counter-intuitive) vocabid.
 */
String getFieldValue(String ref, Boolean doConvertVocabIds) {
  if (!doConvertVocabIds) {
    return getFieldValue(ref);
  }

  String val       = getFieldValue(ref);
  String vocabName = VOCABID_TO_VOCABNAME.get(val);

  if (val       == null) return "";
  if (vocabName == null) return "";
  return vocabName;
}

/* Shorthand for writing getFieldValue(ref, true). This function's use is
 * discouraged in favour of writing `getFieldValue(ref, true)`.
 */
String getMenuValue(String ref) {
  return getFieldValue(ref, true);
}

HashMap NODATA_DROPDOWNS = new HashMap(); // ref -> menu entries
void addNodataDropdownEntry(String ref, String entryKey, String entryVal) {
  List menuEntries = NODATA_DROPDOWNS.get(ref);
  if (menuEntries == null) {
    menuEntries = new ArrayList();
    NODATA_DROPDOWNS.put(ref, menuEntries);
  }

  List menuEntry = new ArrayList();
  menuEntry.add(entryKey);
  menuEntry.add(entryVal);

  menuEntries.add(menuEntry);
}



for (entry : NODATA_DROPDOWNS.entrySet()) {
  String ref = entry.getKey();
  List   entries = entry.getValue();
  populateMenu(ref, entries);
}

/******************************************************************************/
/*                                  GPS/MAP                                   */
/******************************************************************************/


void updateGPSDiagnostics() {
  String diagnosticsRef = "";
  if (diagnosticsRef.equals("")) {
    return;
  }

  String status         = "";
  String previousStatus = getFieldValue(diagnosticsRef);
  String notInitialised = "{GPS_is_not_initialised}";

  // Check if GPS is initialised or was previously initialised.
  if (!isExternalGPSOn() && !isInternalGPSOn()) {
    if (!isNull(previousStatus) && !previousStatus.equals(notInitialised)) { // previous gps status is some last valid coordinate.
      // This is hackish. Arch16n substitution happens only at display-time, but the following if clause requires substitution to have happened at run-time
      String error = "";
      error = "{GPS_is_no_longer_initialised}. {Previous_status}:";
      setFieldValue(diagnosticsRef, error);   // Arch16n entry is substituted after this
      error = getFieldValue(diagnosticsRef);

      // check that error message wasn't previously appended to the previous status message.
      if (previousStatus.length()    >= error.length() &&
          previousStatus.subSequence(0, error.length()).equals(error)) {
        status = previousStatus;
      } else {
        status = error + "\n" + previousStatus;
      }
    } else {
      status = notInitialised;
    }
  } else {
    status += "{Internal_GPS}: ";
    if (isInternalGPSOn())
    {
      status += "{on}";
    } else {
      status += "{off}";
    }
    status += "\nExternal GPS: ";
    if (isExternalGPSOn())
    {
      if (isBluetoothConnected()) {
        status += "{on_and_bluetooth_connected}";
      } else {
        status += "{on_and_bluetooth_disconnected}";
      }
    } else {
      status += "{off}";
    }
    Object position = getGPSPosition();
    if (position != null) {
      Object projPosition = getGPSPositionProjected();
      status += "\n{Latitude}: " + position.getLatitude();
      status += "   {Longitude}: " + position.getLongitude();
      status += "\n{Northing}: " + projPosition.getLatitude();
      status += "   {Easting}: " + projPosition.getLongitude();
      status += "\n{Accuracy}: " + getGPSEstimatedAccuracy();
    } else {
      status += "\n{Position}: {no_GPS_position_could_be_found}";
    }
  }
  setFieldValue(diagnosticsRef, status);
}

final String MAP_CFG_PATH = "files/data/saved_config.json";


void loadMapSettings() {
  String filePath = getAttachedFilePath(MAP_CFG_PATH);

  if (!new File(filePath).exists())
    return;

  String toast = "showToast(\"{Loaded_Map_Configuration}\")";
  loadMapViewConfiguration(MAP_REF, filePath, toast);
}

void saveMapSettings() {
  String filePath = getAttachedFilePath(MAP_CFG_PATH);

  String toast = "showToast(\"{Saved_Map_Configuration}\")";
  saveMapViewConfiguration(MAP_REF, filePath, toast);
}

/******************************************************************************/
/*                                 ACTION BAR                                 */
/******************************************************************************/
addActionBarItem("clean_synced_files", new ActionButtonCallback() {
  actionOnLabel() {
    "{Clean_Synced_Files}";
  }
  actionOn() {
    cleanSyncedFiles();
  }
});

addActionBarItem("sync", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_Sync}";
  }
  actionOn() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
    showToast("{Sync_Disabled}");
  }
  isActionOff() {
    isSyncEnabled();
  }
  actionOffLabel() {
    "{Enable_Sync}";
  }
  actionOff() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
    showToast("{Sync_Enabled}");
  }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_Internal_GPS}";
  }
  actionOn() {
    stopGPS();
    showToast("{Internal_GPS_Disabled}");
    updateGPSDiagnostics();
  }
  isActionOff() {
    isInternalGPSOn();
  }
  actionOffLabel() {
    "{Enable_Internal_GPS}";
  }
  actionOff() {
    if(isExternalGPSOn()) {
      stopGPS();
    }
    startInternalGPS();
    showToast("{Internal_GPS_Enabled}");
    updateGPSDiagnostics();
  }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_External_GPS}";
  }
  actionOn() {
    stopGPS();
    if (isBluetoothConnected()) {
      showToast("{External_GPS_Disabled}");
    } else {
      showToast("{Please_Enable_Bluetooth}");
    }
    updateGPSDiagnostics();
  }
  isActionOff() {
    isExternalGPSOn();
  }
  actionOffLabel() {
    "{Enable_External_GPS}";
  }
  actionOff() {
    if(isInternalGPSOn()) {
      stopGPS();
    }
    startExternalGPS();
    if(isBluetoothConnected()) {
      showToast("{External_GPS_Enabled}");
    } else {
      showToast("{Please_Enable_Bluetooth}");
      this.actionOn();
    }
    updateGPSDiagnostics();
  }
});

/******************************************************************************/
/*                                 USER LOGIN                                 */
/******************************************************************************/
boolean USER_MENU_IS_LOADED = false;

void populateListForUsers(){
  String q = "";
  q  = " SELECT          userid ";
  q += "        ||'\\0'||fname ";
  q += "        ||'\\0'||lname ";
  q += "        ||'\\0'||email ";
  q += "        ||'\\0'||password ";
  q += "        ,        fname ";
  q += "        || ' ' ||lname ";
  q += "   FROM user ";
  q += "  WHERE userdeleted is null";


  FetchCallback callback = new FetchCallback() {
    onFetch(result) {
      populateMenu(USER_MENU_PATH, result);
      USER_MENU_IS_LOADED = true;
    }
  };

  USER_MENU_IS_LOADED = false;
  populateMenu(USER_MENU_PATH, MSG_LOADING);
  fetchAll(q, callback);
}

String getUserMenuValue(int i) {
  String selectedUser = getListItemValue();
  if (selectedUser == null)
    return "";

  String[] splitted = selectedUser.split("\\\\0");
  if (i < splitted.length) return splitted[i];
  else                     return "";

}

void resetUser() {
  userId   = "";
  username = "";
  User user = new User(userId, "", "", "", "");
  setUser(user);
}

void selectUser() {
  userId           = getUserMenuValue(0);
  String nameFirst = getUserMenuValue(1);
  String nameLast  = getUserMenuValue(2);
  String email     = getUserMenuValue(3);
  String password  = getUserMenuValue(4);
  username         = nameFirst + " " + nameLast;

  User user = new User(userId, nameFirst, nameLast, email, password);
  setUser(user);
}

void onClickSignup__ () {
  setSyncEnabled(true);
  showCreateUserDialog("onSignupSuccessful()");
}

void onSignupSuccessful() {
  showWarning("{signup_head}", "{signup_body}");
  populateListForUsers();
}

if (!isNull(USER_MENU_PATH)) {
  addOnEvent(getTabGroupRef(USER_MENU_PATH), "show", "resetUser()");

  addOnEvent(USER_MENU_PATH, "show",  "populateListForUsers()");
  addOnEvent(USER_MENU_PATH, "click", "selectUser()");

  addOnEventCond(USER_MENU_PATH, "click", "USER_MENU_IS_LOADED");
}



/******************************************************************************/
/*                                 VALIDATION                                 */
/******************************************************************************/
/* `ref`  is a reference/ref to a field
 * `name` is a human-readable name for that field
 * `cond` is a String containing a boolean expression that evaluates to true if
 *        and only if the the field pair returned by this function should be
 *        validated.
 *
 *  Returns a field pair (really just an ArrayList).
 */
List fieldPair(String ref, String name, String cond) {
  List fp = new ArrayList();
  fp.add(ref);
  fp.add(name);
  fp.add(cond);
  return fp;
}

List fieldPair(String ref, String name) {
  String t = "true";
  return fieldPair(ref, name, t);
}

/* Returns true if field specified by `ref` is valid. False otherwise.
 */
boolean isValidField(String ref) {
  return !isNull(getFieldValue(ref));
}
/* `format` can either be HTML or PLAINTEXT
 */
String validateFields(List fields, String format) {
  Integer numInvalid = 0;

  /* Build validation message string (and count how many invalid fields exist) */
  String out = "{please_fill_out_the_following_fields}";
  for(f : fields) {
    String ref  = f.get(0); // Reference to field
    String name = f.get(1); // Human-readable name
    String cond = f.get(2); // Validation condition

    // Only validate a field whose validation condition evaluates to `true`
    Boolean doValidateField = (Boolean) eval(cond);
    if (!doValidateField)
      continue;

    // Add any invalid fields to the output and tally them
    if (!isValidField(ref)) {
      out += "- " + name + "\n";
      numInvalid++;
    }
  }
  // All the fields are valid; just overwrite `out` with a cheery message
  if (numInvalid == 0)
    out = "{all_fields_contain_valid_data}";

  /* Format the output as dictated by `format` */
  if (format == "HTML") {
    out = out.replace("\n", "<br>");
  } else if (format == "PLAINTEXT") {
    ;
  }

  return out;
}

void validateControl() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Control/ID_Numbers/Next_Source_ID", "{Next_Source_ID}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("{validation_results}", validationMessage);
}
void validateRecord() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Record/Survey/Source_ID", "{Source_ID}"));
  f.add(fieldPair("Record/Survey/Search_Type_Description", "{Search_Type_Description}"));
  f.add(fieldPair("Record/Survey/Start_Date", "{Start_Date}"));
  f.add(fieldPair("Record/Survey/Site_Name", "{Site_Name}"));
  f.add(fieldPair("Record/Survey/Projection_Reference", "{Projection_Reference}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("{validation_results}", validationMessage);
}
void validateSighting() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Sighting/Sighting/Taxon_ID", "{Taxon_ID}"));
  f.add(fieldPair("Sighting/Sighting/Scientific_Name", "{Scientific_Name}"));
  f.add(fieldPair("Sighting/Sighting/Count", "{Count}"));
  f.add(fieldPair("Sighting/Sighting/Unit_of_Measurement", "{Unit_of_Measurement}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("{validation_results}", validationMessage);
}


/******************************************************************************/
/*                                 AUTOSAVING                                 */
/******************************************************************************/
Map TABGROUP_TO_UUID = Collections.synchronizedMap(new HashMap());
Set SEEN_UUIDS       = Collections.synchronizedSet(new HashSet());

String getUuid(String tabgroup) {
  return TABGROUP_TO_UUID.get(tabgroup);
}

String getUuid() {
  return getUuid(getDisplayedTabGroup());
}

void setUuid(String tabgroup, String uuid) {
  TABGROUP_TO_UUID.put(tabgroup, uuid);
}

SaveCallback getDefaultSaveCallback(String tabgroup, String callback) {
  String parentTabgroup_     = parentTabgroup;
  String parentTabgroupUuid_ = getUuid(parentTabgroup_);

  parentTabgroup = null;

  Boolean userWasSet = !username.equals("");

  callback += "; " + fun2str("executeOnEvent", new Object[]{tabgroup, "save"});

  String callbackFirstSave =
    fun2str("executeOnEvent", new Object[]{tabgroup, "firstsave"}) + "; " +
    callback;

  return new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      // This is a workaround for a bug where `newRecord` can be `true` twice if
      // a record was saved again shortly after it was created.
      if (SEEN_UUIDS.contains(uuid))
        newRecord = false;
      if (uuid != null)
        SEEN_UUIDS.add(uuid);

      String cb = newRecord ? callbackFirstSave : callback;

      // Make a child-parent relationship if need be.
      if (
          newRecord &&
          !isNull(parentTabgroup_) &&
          !isNull(parentTabgroupUuid_)
      ) {
        String rel = "";
        rel += parentTabgroup_.replaceAll("_", " ");
        rel += " - ";
        rel += tabgroup.replaceAll("_", " ");
        saveEntitiesToHierRel(
          rel,
          parentTabgroupUuid_,
          uuid,
          "Parent Of",
          "Child Of",
          cb
        );
      } else {
        execute(cb);
      }

      // This fixes an interesting bug. Without this, if a user was not set
      // (by calling `setUser`) at the time `saveTabGroup` was first called, but
      // set by the time `onSave` was called, the tab group is saved correctly
      // the first time only.
      //
      // Adding this allows subsequent saves to succeed. Presumably it plays
      // some role in helping FAIMS associate the correct user with a record.
      if (!userWasSet) {
        saveTabGroup(tabgroup, cb);
      }

    }
    onError(message) {
      showToast(message);
    }
  };
}

void saveTabGroup(String tabgroup) {
  saveTabGroup(tabgroup, "");
}

void saveTabGroup(String tabgroup, String callback) {
  Boolean enableAutosave = true;
  String  uuid           = getUuid(tabgroup);

  SaveCallback saveCallback = getDefaultSaveCallback(tabgroup, callback);

  saveTabGroup(
      tabgroup,
      uuid,
      autoSaveGeo,
      autoSaveAttrs,
      saveCallback,
      enableAutosave
  );

  // Reset global variables
  autoSaveGeo   = null;
  autoSaveAttrs = null;
}

void setAutoSaveGeometry(List geometry) {
  autoSaveGeo = geometry;
}

void setToTimestampNow(String ref) {
  String now = getTimestampNow();
  setFieldValue(ref, now);
}

String getTimestampNow() {
  String fmt = "yyyy-MM-dd HH:mm:ssZ";
  return getTimestampNow(fmt);
}

String getTimestampNow(String fmt, boolean doInsertColon) {
  date    = new Date();
  dateFmt = new java.text.SimpleDateFormat(fmt);
  dateStr = dateFmt.format(date);

  // Insert colon into timezone (e.g. +1000 -> +10:00)
  if (doInsertColon) {
    String left; String right;

    left    = dateStr.substring(0, dateStr.length() - 2);
    right   = dateStr.substring(   dateStr.length() - 2);
    dateStr = left + ":" + right;
  }

  return dateStr;
}

String getTimestampNow(String fmt) {
  return getTimestampNow(fmt, true);
}

void populateAuthorAndTimestamp(String tabgroup) {
  Map tabgroupToAuthor    = new HashMap();
  Map tabgroupToTimestamp = new HashMap();
  
  
  String authorPath    = tabgroupToAuthor.get(tabgroup);
  String timestampPath = tabgroupToTimestamp.get(tabgroup);

  if (!isNull(authorPath))    setFieldValue(authorPath,    username);
  if (!isNull(timestampPath)) setFieldValue(timestampPath, getTimestampNow());
}

for (String tabGroup : getTabGroups()) {
  if (isFlaggedNodata    (tabGroup)) continue;
  if (hasNoUi            (tabGroup)) continue;
  if (isFlaggedNoautosave(tabGroup)) continue;
  String funStr = fun2str("saveTabGroup", new Object[]{tabGroup});
  addOnEvent(tabGroup, "show", funStr);
}

void onClickUserSelectUser () {
  newTab("Control", true);
}

void onClickControlNewRecord () {
  parentTabgroup__ = "Control";
  newRecord();
}







void onClickRecordNewSighting () {
  newSighting("Record");
}
addOnEvent("User/User/Select_User", "click", "onClickUserSelectUser()");
addOnEvent("Control/Main/New_Record", "click", "onClickControlNewRecord()");
addOnEvent("Record/Sighting/New_Sighting", "click", "onClickRecordNewSighting()");

/******************************************************************************/
/*                   AUDIO, CAMERA, FILE AND VIDEO BINDINGS                   */
/******************************************************************************/


/******************************************************************************/
/*                 BINDINGS FOR 'VIEW ATTACHED FILES' BUTTONS                 */
/******************************************************************************/


/******************************************************************************/
/*                             NAVIGATION DRAWER                              */
/******************************************************************************/
void removeNavigationButtons() {
  removeNavigationButton("new");
  removeNavigationButton("duplicate");
  removeNavigationButton("delete");
  removeNavigationButton("validate");
}

void addNavigationButtons(String tabgroup) {
  removeNavigationButtons();
  List tabgroupsToValidate = new ArrayList();
  tabgroupsToValidate.add("Control");
  tabgroupsToValidate.add("Record");
  tabgroupsToValidate.add("Sighting");
  addNavigationButton("new", new ActionButtonCallback() {
    actionOnLabel() {
      "{New}";
    }
    actionOn() {
      if(isNull(getUuid(tabgroup))) {
        showAlert(
            "{Warning}",
            "{The_current_record_has_not_been_saved_yet}",
            fun2str("newRecord", new Object[]{tabgroup, true}),
            ""
        );
      } else {
        newRecord(tabgroup, true);
        showToast("{New_record_created}");
      }
    }
  }, "success");
  addNavigationButton("duplicate", new ActionButtonCallback() {
    actionOnLabel() {
      "{Duplicate}";
    }
    actionOn() {
      if(!isNull(getUuid(tabgroup))) {
        duplicateRecord(tabgroup);
      } else {
        showWarning("{Warning}", "{This_record_is_unsaved_and_cannot_be_duplicated}");
      }
    }
  }, "primary");
  addNavigationButton("delete", new ActionButtonCallback() {
    actionOnLabel() {
      "{Delete}";
    }
    actionOn() {
      deleteRecord(tabgroup);
    }
  }, "danger");
  if (tabgroupsToValidate.contains(tabgroup)) {
    addNavigationButton("validate", new ActionButtonCallback() {
      actionOnLabel() {
        "{Validate}";
      }
      actionOn() {
        String validationFunction = "validate" + tabgroup.replaceAll("_", "") + "()";
        eval(validationFunction);
      }
    }, "default");
  }
}

/******************************************************************************/
/*        ENTITY AND RELATIONSHIP SAVING AND LOADING HELPER FUNCTIONS         */
/******************************************************************************/
/** Saves two entity id's as a relation. **/
void saveEntitiesToRel(String type, String entity1, String entity2) {
  String callback = null;
  saveEntitiesToRel(type, entity1, entity2, callback);
}

/** Saves two entity id's as a relation with some callback executed. **/
void saveEntitiesToRel(String type, String entity1, String entity2, String callback) {
  String e1verb = null;
  String e2verb = null;
  saveEntitiesToHierRel(type, entity1, entity2, e1verb, e2verb, callback);
}

/** Saves two entity id's as a hierachical relation with some callback executed. **/
void saveEntitiesToHierRel(String type, String entity1, String entity2, String e1verb, String e2verb, String callback) {
  if (isNull(entity1) || isNull(entity2)) return;

  SaveCallback execCallback = new SaveCallback() {
    onSaveAssociation(entity_id, rel_id) {
      if(!isNull(callback)) {
         execute(callback);
      }
    }
    onError(message) {
      Log.e("saveEntitiesToHierRel", message);
      showToast(message);
    }
  };

  SaveCallback addMoreToRel = new SaveCallback() {
    onSaveAssociation(entity_id, rel_id) {
      addReln(entity2, rel_id, e2verb, execCallback);
    }
    onError(message) {
      Log.e("saveEntitiesToHierRel", message);
      showToast(message);
    }
  };

  SaveCallback addToRel = new SaveCallback() {
    onSave(rel_id, newRecord) {
      addReln(entity1, rel_id, e1verb, addMoreToRel);
    }
    onError(message) {
      Log.e("saveEntitiesToHierRel", message);
      showToast(message);
    }
  };

  saveRel(null, type, null, null, addToRel);
}

// Makes a new record of the given tabgroup
void newRecord(String tabgroup) {
  boolean doUpdateRelVars = false;
  newRecord(tabgroup, doUpdateRelVars);
}

void newRecord(String tabgroup, String parentTabGroup) {
  parentTabgroup   = parentTabGroup;
  parentTabgroup__ = parentTabGroup;
  newRecord(tabgroup, false);
}

void newRecord(String tabgroup, boolean doUpdateRelVars) {
  if (doUpdateRelVars) {
    String uuidOld = getUuid(getDisplayedTabGroup());
    String q       = getDuplicateRelnQuery(uuidOld); // We're not duplicating
                                                     // anything, just getting
                                                     // the parent's UUID.

    cancelTabGroup(tabgroup, false);

    FetchCallback updateRelVars = new FetchCallback() {
      onFetch(result) {
        if (result != null && result.size() >= 1) {
          parentTabgroup   = result.get(0).get(4);
          parentTabgroup   = parentTabgroup.replaceAll(" ", "_");
          parentTabgroup__ = parentTabgroup;
        }

        newRecord(tabgroup, false);
      }
    };
    fetchAll(q, updateRelVars);
    return;
  }

  String newTabGroupFunction = "new" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "newTabgroup()"
  eval(newTabGroupFunction);

  Log.d("newRecord", tabgroup);
}

// Deletes the current record of the given tabgroup
void deleteRecord(String tabgroup) {
  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert(
        "{Confirm_Deletion}",
        "{Press_OK_to_Delete_this_Record}",
        fun2str("reallyDeleteRecord", tabgroup),
        "doNotDelete()"
    );
  }

  Log.d("deleteRecord", tabgroup);
}

void reallyDeleteRecord(String tabgroup) {
  DeleteCallback callback = new DeleteCallback() {
    onDelete(uuid) {
      populateEntityListsOfArchEnt(tabgroup);
      executeOnEvent(tabgroup, "delete");
    }

    onError(message) {
      showToast(message);
    }
  };

  deleteArchEnt(getUuid(tabgroup), callback);
  cancelTabGroup(tabgroup, false);
}

// Duplicates the current record of the given tabgroup
void duplicateRecord(String tabgroup) {
  dialog = showBusy("Duplicating", "Please wait...");

  String duplicateTabGroupFunction = "duplicate" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "duplicateTabgroup()"
  eval(duplicateTabGroupFunction);

  Log.d("duplicateRecord", tabgroup);
}

// generic fetch saved attributes query
String getDuplicateAttributeQuery(String originalRecordID, String attributesToDupe) {
  if (attributesToDupe.equals("")) {
    attributesToDupe = "''";
  }
  String duplicateQuery = "SELECT attributename, freetext, vocabid, measure, certainty " +
                          "  FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) " +
                          " WHERE attributename IN ('', "+attributesToDupe+") " +
                          "   AND uuid = '"+originalRecordID+"'; ";
  return duplicateQuery;
}

String getDuplicateRelnQuery(String originalRecordID) {
  String dupeRelnQuery = "SELECT relntypename, parentparticipatesverb, childparticipatesverb, parentuuid, parentaenttypename, childaenttypename"+
                         "  FROM parentchild join relationship using (relationshipid) "+
                         "  JOIN relntype using (relntypeid) "+
                         " WHERE childuuid = '"+originalRecordID+"' " +
                         "   AND parentparticipatesverb = 'Parent Of' ";
  return dupeRelnQuery;
}

void makeDuplicateRelationships(fetchedAttributes, String newUuid){
  Log.e("Module", "makeDuplicateRelationships");
  for (savedAttribute : fetchedAttributes){
    String relntypename           = savedAttribute.get(0);
    String parentparticipatesverb = savedAttribute.get(1);
    String childparticipatesverb  = savedAttribute.get(2);
    String parentUuid             = savedAttribute.get(3);
    String childArchEntType       = savedAttribute.get(5);

    String onSaveRel              = getStatementsString(
        childArchEntType.replaceAll(" ", "_"),
        "save"
    );

    saveEntitiesToHierRel(
        relntypename,
        parentUuid,
        newUuid,
        parentparticipatesverb,
        childparticipatesverb,
        onSaveRel
    );
  }
}

// generic get extra attributes
List getExtraAttributes(fetchedAttributes) {
  List extraAttributes = createAttributeList();
  Log.d("Module", "Duplicating fetched attributes: " + fetchedAttributes.toString());
  for (savedAttribute : fetchedAttributes) {
    extraAttributes.add(
      createEntityAttribute(
        savedAttribute.get(0),
        savedAttribute.get(1),
        savedAttribute.get(2),
        savedAttribute.get(3),
        savedAttribute.get(4)
      )
    );
  }
  return extraAttributes;
}

void loadEntity() {
  loadEntity(false);
}
void loadEntity(Boolean isDropdown) {
  if (isDropdown) {
    loadEntityFrom(getDropdownItemValue());
  } else {
    loadEntityFrom(getListItemValue());
  }
}

void loadEntityFrom(String entityID) {
  loadEntityFrom(entityID, "");
}

void loadEntityFrom(String entityID, String onFail) {
  if (isNull(entityID)) {
    return;
  }

  String getEntTypeNameQ = "SELECT aenttypename " +
                           "  FROM latestnondeletedarchent " +
                           "  JOIN aenttype " +
                           " USING (aenttypeid) " +
                           " WHERE uuid = '" + entityID + "'";
  fetchAll(getEntTypeNameQ, new FetchCallback() {
    onFetch(result) {
      if (
          result               == null ||
          result       .size() == 0    ||
          result.get(0).size() == 0
      ) {
        String head  = "{err_load_entity_head}";
        String body  = "{err_load_entity_body}";
        showWarning(head, body);
        execute(onFail);
        return;
      }

      String archEntName = result.get(0).get(0).replaceAll(" ", "");
      String loadFunction = "load" + archEntName + "From(entityID)"; // Typical value: loadContextFrom(entityID)
      eval(loadFunction);
    }
  });
}


void newRecord(String parent){
  String tabgroup = "Record";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  if (isNull("Control/ID_Numbers/Next_Source_ID")) {
    showWarning("{Alert}", "{A_next_ID_has_not_been_entered_please_provide_one}");
    return;
  }

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  incAutoNum("Record/Survey/Source_ID");

  executeOnEvent(tabgroup, "create");
}

void newRecord (){
  newRecord(null);
}

void newSighting(String parent){
  String tabgroup = "Sighting";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  executeOnEvent(tabgroup, "create");
}

void newSighting (){
  newSighting(null);
}
void duplicateRecord(){
  String tabgroup = "Record";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  incAutoNum("Record/Survey/Source_ID");
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateSighting(){
  String tabgroup = "Sighting";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
addOnEvent("Record", "save", "populateEntityListsOfArchEnt(\"Record\")");
addOnEvent("Sighting", "save", "populateEntityListsOfArchEnt(\"Sighting\")");

void doNotDelete(){
  showToast("{Delete_Cancelled}");
}

addOnEvent("User", "show", "removeNavigationButtons()");
addOnEvent("Control", "show", "removeNavigationButtons()");
addOnEvent("Record", "show", "removeNavigationButtons()");
addOnEvent("Sighting", "show", "removeNavigationButtons()");
addOnEvent("Record", "show", "addNavigationButtons(\"Record\")");
addOnEvent("Sighting", "show", "addNavigationButtons(\"Sighting\")");

/******************************************************************************/
/*                                   SEARCH                                   */
/******************************************************************************/
addOnEvent("Control/Search"               , "show"  , "search()");
addOnEvent("Control/Search/Entity_List"   , "click" , "loadEntity();");
addOnEvent("Control/Search/Search_Button" , "click" , "search()");
addOnEvent("Control/Search/Search_Term"   , "click" , "clearSearch()");

addOnEvent("Control/Search/Entity_Types"  , "click" , "search()");
entityTypes = new ArrayList();
entityTypes.add(new NameValuePair("{All}", ""));
entityTypes.add(new NameValuePair("{Record}", "Record"));
entityTypes.add(new NameValuePair("{Sighting}", "Sighting"));
populateDropDown("Control/Search/Entity_Types", entityTypes);

void clearSearch(){
  setFieldValue("Control/Search/Search_Term","");
}

void search(){
  String refEntityList  = "Control/Search/Entity_List";
  String refSearchTerm  = "Control/Search/Search_Term";
  String refEntityTypes = "Control/Search/Entity_Types";

  String type = getFieldValue(refEntityTypes);
  String term = getFieldValue(refSearchTerm);
  String searchQuery = "SELECT uuid, response "+
                       "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
                       " WHERE uuid in (SELECT uuid "+
                       "                  FROM latestNonDeletedArchEntIdentifiers "+
                       "                 WHERE measure LIKE {term}||'%'  "+
                       "                   AND ( aenttypename = {type} OR '' = {type} ) "+
                       "                )  "+
                       " ORDER BY substr(uuid, 7, 13) desc, response " +
                       " LIMIT ? "+
                       "OFFSET ? ";
  searchQuery = dbReplaceFirst(searchQuery, "{term}", term);
  searchQuery = dbReplaceFirst(searchQuery, "{type}", type);
  searchQuery = dbReplaceFirst(searchQuery, "{type}", type);

  populateMenu(refEntityList, MSG_LOADING);
  populateCursorList(refEntityList, searchQuery, 25);
  refreshTabgroupCSS("Control");

  Log.d("Module", "Search query: " + searchQuery);
}

void loadRecordFrom(String uuid) {
  String tabgroup = "Record";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadSightingFrom(String uuid) {
  String tabgroup = "Sighting";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}

/******************************************************************************/
/*                          TAKE FROM GPS BUTTON(S)                           */
/******************************************************************************/
addOnEvent("Record/Survey/Take_From_GPS_1", "click", "takePoint(\"Record\")");

Map getTakeFromGpsMappings() {
  Map tabgroupToTabRef = new HashMap();
  tabgroupToTabRef.put("Record", "Record/Survey");
  return tabgroupToTabRef;
}

/* Takes the current point using gps. */
void takePoint(String tabgroup) {
  triggerAutoSave();
  Map tabgroupToTabRef = getTakeFromGpsMappings();

  String archEntType = getArchEntType(tabgroup);
  String currentUuid = getUuid(tabgroup);

  boolean isInternalGPSOff = !isInternalGPSOn();
  boolean isExternalGPSOff = !isExternalGPSOn();
  Object  position = getGPSPosition();
  if (position == null || isInternalGPSOff && isExternalGPSOff) {
    showToast("{GPS_Not_Initialised}");
    return;
  }

  Object projPosition = getGPSPositionProjected();
  Double latitude     = position.getLatitude();
  Double longitude    = position.getLongitude();
  Double northing     = projPosition.getLatitude();
  Double easting      = projPosition.getLongitude();

  String sLatitude    = "" + latitude;
  String sLongitude   = "" + longitude;
  String sNorthing    = "" + northing;
  String sEasting     = "" + easting;

  MapPos mapPos = new MapPos(easting, northing);
  Point samplePoint = new Point(mapPos, null, (PointStyle) null, null);
  ArrayList geolist = new ArrayList();
  geolist.add(samplePoint);

  String accuracy = "" + getGPSEstimatedAccuracy();
  setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Accuracy",  accuracy);
  setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Longitude", sLongitude);
  setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Latitude",  sLatitude);
  setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Easting",   sEasting);
  setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Northing",  sNorthing);

  List attribs = createAttributeList();
  attribs.add(createEntityAttribute("Accuracy",  "", "", accuracy,   "1.0"));
  attribs.add(createEntityAttribute("Longitude", "", "", sLongitude,  "1.0"));
  attribs.add(createEntityAttribute("Latitude",  "", "", sLatitude, "1.0"));
  attribs.add(createEntityAttribute("Northing",  "", "", sNorthing,  "1.0"));
  attribs.add(createEntityAttribute("Easting",   "", "", sEasting,   "1.0"));

  String showToast = fun2str(
      "showToast",
      getArch16nKey(tabgroup) + " {toast_saved}"
  );
  SaveCallback saveCallback = getDefaultSaveCallback(tabgroup, showToast);
  saveArchEnt(currentUuid, archEntType, geolist, attribs, saveCallback);
}

/* Sets the value of GPS views for the given tab ref. */
void fillInGPS(String tabgroup) {
  Map tabgroupToTabRef = getTakeFromGpsMappings();
  String currentUuid = getUuid(tabgroup);
  if (isNull(currentUuid)) {
    return;
  }

  String query = "SELECT x(transform(geospatialcolumn,                4326)) as longtiude, " +
                 "       y(transform(geospatialcolumn,                4326)) as latitude, " +
                 "       x(transform(geospatialcolumn, "+getModuleSrid()+")) as easting, " +
                 "       y(transform(geospatialcolumn, "+getModuleSrid()+")) as northing " +
                 "  FROM latestnondeletedarchent " +
                 " WHERE uuid = '" + currentUuid + "';";

  fetchOne(query, new FetchCallback() {
    onFetch(result) {
      print("[fillInGPS()] Fetched DB transformed geometry: " + result);
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Longitude" , result.get(0));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Latitude"  , result.get(1));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Easting"   , result.get(2));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Northing"  , result.get(3));
    }
  });
}

void clearGpsInTabGroup(String tabgroup) {
  Map tabgroupToTabRef = getTakeFromGpsMappings();

  String tabRef = tabgroupToTabRef.get(tabgroup);
  if (isNull(tabRef)) return;

  clearGpsInTab(tabRef);
}

void clearGpsInTab(String tabRef) {
  setFieldValue(tabRef + "/Accuracy"  , "");
  setFieldValue(tabRef + "/Latitude"  , "");
  setFieldValue(tabRef + "/Longitude" , "");
  setFieldValue(tabRef + "/Easting"   , "");
  setFieldValue(tabRef + "/Northing"  , "");
}

/******************************************************************************/
/*               LOADING AND CREATION OF RECORDS FROM QR CODES                */
/******************************************************************************/
import java.util.regex.Pattern;
import java.util.regex.Matcher;

void bindQrScanning(String refButton) {
  addOnEvent(refButton, "click", "scanEntityFromQrCode()");
}

void scanEntityFromQrCode() {
  scanCode("loadEntityFromScannedQrCode()");
}

void loadEntityFromScannedQrCode() {
  String code = getLastScanContents();

  String  uuidString  = "";
  Pattern uuidPattern = Pattern.compile("(\\d{19})");
  Matcher matcher     = uuidPattern.matcher(code);
  while (matcher.find())
    uuidString = matcher.group(1);

  if (isNull(uuidString)) {
    showWarning("{load_scanned_err_head}", "{load_scanned_err_body}");
    return;
  }

  loadEntityFrom(uuidString);
}



/******************************************************************************/
/*                       AUTONUMBERING HELPER FUNCTIONS                       */
/******************************************************************************/
Map AUTONUM_DEST_TO_SOURCE = new HashMap();
AUTONUM_DEST_TO_SOURCE.put("Record/Survey/Source_ID", "Control/ID_Numbers/Next_Source_ID");

/*
 * If value of field specified by `ref` is null, sets the field to `defaultVal`,
 * otherwise increments its value.
 *
 * Returns the value the field was updated to.
 */
Integer incField(String ref, Integer defaultVal) {
  String val = getFieldValue(ref);

  if (isNull(val)) {
    setFieldValue(ref, defaultVal);
    return defaultVal;
  }

  Integer inc = null;
  try {
    inc = Integer.parseInt(val) + 1;
  } catch (Exception e) { ; }

  if (inc == null) {
    try {
      Double dinc = Double.parseDouble(val) + 1;
      inc = Math.round(dinc);

      String head, body;
      head  = "{inc_field_head}";
      body  = "{inc_field_body_1}" + getArch16nKey(ref) + "{inc_field_body_2}";

      showWarning(head, body);
    } catch (Exception e) {
      Log.d("incField", "" + e);
      ;
    }
  }

  if (inc == null) {
    String head, body;
    head  = "{inc_field_head}";
    body  = "{inc_field_body_1}" + getArch16nKey(ref) + "{inc_field_body_3}";

    showWarning(head, body);
  }

  if (inc != null) {
    setFieldValue(ref, inc);
    insertIntoLocalSettings(ref, inc.toString());
  }

  return inc;
}

/* Increments the field at `ref` or returns null if it does not contain a
 * number.
 */
Integer incField(String ref) {
  return incField(ref, 1);
}

for (String ref : getStartingIdRefs())
  persistOverSessions(ref, "1");

void incAutoNum(String destPath) {
  String sourcePath = AUTONUM_DEST_TO_SOURCE.get(destPath);
  String destVal    = getFieldValue(sourcePath);
  setFieldValue(destPath, destVal);
  incField(sourcePath);
}
/******************************************************************************/
/*                         POPULATION VIA <MARKDOWN>                          */
/******************************************************************************/


/******************************************************************************/
/*                POPULATION OF ENTITY AND CHILD ENTITY LISTS                 */
/******************************************************************************/
/*
 * `ref`       the reference of the GUI element to be populated.
 * `parentUuid` the parent in the relationship denoted by `relType`.
 * `entType`    the type of the entities the menu will be populated with.
 * `relType`    the name of the relationship the children are to be in with the
 *              entity denoted by `parentUuid`.
 */
void populateMenuWithEntities (
  String ref,
  String parentUuid,
  String entType,
  String relType
) {
  String viewType = getType(ref);

  String limit;
  switch (viewType) {
    case "dropdown": limit = "";                   break;
    case "list":     limit = " LIMIT ? OFFSET ? "; break;
  }

  String getChildEntitiesQ = "" +
    "SELECT childuuid, response " +
    "  FROM (select childuuid, createdat" +
    "          from (select childuuid, createdat, relationshipid" +
    "                    from parentchild" +
    "                   where parentuuid = '" + parentUuid + "' " +
    "                   and (childaenttypename = '"+entType+"')" +
    "                   order by createdat           " +
    "                   )" +
    "          JOIN (SELECT relationshipid   " +
    "                  FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  " +
    "                 WHERE relntypename = '"+relType+"') USING (relationshipid)" +
    "          order by createdat desc" +
    limit +
    "        )  " +
    "  JOIN latestNonDeletedArchEntFormattedIdentifiers ON (childuuid = uuid)   " +
    "  order by createdat desc, response";

  String getEntitiesQ = "" +
    "SELECT uuid, response "+
    "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
    " WHERE uuid in (SELECT uuid "+
    "                  FROM latestNonDeletedArchEntIdentifiers "+
    "                 WHERE aenttypename = '"+entType+"' OR '"+entType+"' = '' " +
    "               )  "+
    " ORDER BY substr(uuid, 7, 13) desc, response " +
    limit;

  FetchCallback cbPopulateDropDown = new FetchCallback() {
    onFetch(result) {
      populateDropDown(ref, result, true);
    }
  };

  String q;
  if (relType.equals("")) q = getEntitiesQ;
  else                    q = getChildEntitiesQ;

  switch (viewType) {
    case "dropdown": fetchAll(q, cbPopulateDropDown); break;
    case "list":     populateCursorList(ref, q, 25); break;
  }
}

void populateEntityListsInTabGroup(String tabGroup) {
  if (isNull(tabGroup)) {
    return;
  }

  for (m : ENTITY_MENUS) {
    String ref          = m[0];
    String menuTabGroup = getTabGroupRef(ref);
    String functionCall = getEntityMenuPopulationFunction(m);

    if (menuTabGroup.equals(tabGroup))
      execute(functionCall);
  }
}

/* Populates each list containing records whose archent type is the same as that
 * of `tabGroup`.
 */
void populateEntityListsOfArchEnt(String tabGroup) {
  if (isNull(tabGroup)) {
    return;
  }

  String archEntTypeToPopulate = getArchEntType(tabGroup);

  for (m : ENTITY_MENUS) {
    String archEntType  = m[2];
    String functionCall = getEntityMenuPopulationFunction(m);

    if (archEntType.equals(archEntTypeToPopulate))
      execute(functionCall);
  }
}

String getEntityMenuPopulationFunction(String[] menuDescriptor) {
  String ref            = menuDescriptor[0];
  String parentUuidCall = menuDescriptor[1];
  String entType        = menuDescriptor[2];
  String relType        = menuDescriptor[3];

  String functionCall = "";
  functionCall += "populateMenuWithEntities(";
  functionCall += "\"" + ref            + "\"";
  functionCall += ", ";
  functionCall +=        parentUuidCall       ;
  functionCall += ", ";
  functionCall += "\"" + entType        + "\"";
  functionCall += ", ";
  functionCall += "\"" + relType        + "\"";
  functionCall += ")";

  return functionCall;
}

ENTITY_MENUS = new ArrayList();
ENTITY_MENUS.add(new String[] {
    "Record/Sighting/Sightings",
    "getUuid(\"Record\")",
    "Sighting",
    "Record - Sighting"
});
for (m : ENTITY_MENUS) {
  String functionCall = getEntityMenuPopulationFunction(m);
  execute(functionCall);
}
for (m : ENTITY_MENUS) {
  String menuRef = m[0];

  String ref = getTabRef(menuRef);
  String evt = "show";
  String cmd = "clearField(\"{menuRef}\")";
  cmd = replaceFirst(cmd, "{menuRef}", menuRef);

  addOnEvent(ref, evt, cmd);
}

addOnEvent("Record/Sighting/Sightings", "click", "loadEntity()");
/******************************************************************************/
/*                             HANDWRITTEN LOGIC                              */
/******************************************************************************/

/************************************ TIME ************************************/

// TODO: Confirm before overwriting dates.
// TODO: Compute the differences upon more events

import java.text.SimpleDateFormat;
import java.util.concurrent.TimeUnit;

final String REF_START_DATE =
  "Record/Survey/Start_Date";
final String REF_FINISH_DATE =
  "Record/Survey/Finish_Date";

final String REF_START_TIME =
  "Record/Survey/Start_Time";
final String REF_FINISH_TIME =
  "Record/Survey/Finish_Time";

final String REF_SET_START_TIME =
  "Record/Survey/Set_Start_Time";
final String REF_SET_FINISH_TIME =
  "Record/Survey/Set_Finish_Time";

final String REF_DURATION_IN_MINUTES =
  "Record/Survey/Duration_in_Minutes";
final String REF_DURATION_IN_DAYS_NIGHTS =
  "Record/Survey/Duration_in_Days_Nights";

long getDateDiff(Date date1, Date date2, TimeUnit timeUnit) {
    long diffInMillies = date2.getTime() - date1.getTime();
    return timeUnit.convert(diffInMillies, TimeUnit.MILLISECONDS);
}

String getTime() {
  return getTimestampNow("HH:mm", false);
}

Date getUserEnteredDate(String refDate, String refTime) {
  String val = getFieldValue(refDate) + " " + getFieldValue(refTime);
  SimpleDateFormat parser = new SimpleDateFormat("dd/MM/yyyy HH:mm");
  try {
    return parser.parse(val);
  } catch (Exception e) {
    return null;
  }
}

void setStartTime() {
  setFieldValue(REF_START_TIME, getTime());
}

void setFinishTime() {
  setFieldValue(REF_FINISH_TIME, getTime());

  setDurationInMinutes();
  setDurationInDaysNights();
}

void setDuration(String refDest, TimeUnit unit) {
  Date start  = getUserEnteredDate(REF_START_DATE, REF_START_TIME);
  Date finish = getUserEnteredDate(REF_FINISH_DATE, REF_FINISH_TIME);

  if (start  == null) return;
  if (finish == null) return;

  String mins = "" + getDateDiff(start, finish, unit);
  setFieldValue(refDest, mins);
}

void setDurationInMinutes() {
  setDuration(REF_DURATION_IN_MINUTES, TimeUnit.MINUTES);
}

void setDurationInDaysNights() {
  setDuration(REF_DURATION_IN_DAYS_NIGHTS, TimeUnit.DAYS);
}


addOnEvent(
    REF_SET_START_TIME,
    "click",
    "setStartTime()"
);
addOnEvent(
    REF_SET_FINISH_TIME,
    "click",
    "setFinishTime()"
);

final String[] TAXON_ID = new String[] {
  "2",
  "u2",
  "u216",
  "u198a",
  "u7",
  "u37b",
  "u39b",
  "40",
  "u40a",
  "u40b",
  "5065",
  "u5065",
  "u805",
  "9925",
  "u9925a",
  "u966",
  "u46a",
  "767",
  "u767",
  "136",
  "u136",
  "139",
  "u139a",
  "u139b",
  "141",
  "u141",
  "138",
  "u138a",
  "u20",
  "u170",
  "u150b",
  "u149",
  "u153a",
  "u153b",
  "152",
  "u152",
  "129",
  "u129",
  "u165",
  "164",
  "u164a",
  "u164b",
  "u161",
  "u162",
  "u939",
  "u160",
  "u17",
  "u14b",
  "u16",
  "123",
  "u123",
  "118",
  "u118a",
  "u118b",
  "u985a",
  "u985b",
  "107",
  "u107b",
  "108",
  "u108b",
  "u108c",
  "926",
  "u926",
  "u8005",
  "u968",
  "3",
  "u3b",
  "u63b",
  "u64",
  "944",
  "u944",
  "u86",
  "846",
  "u846a",
  "u748",
  "u845",
  "u973",
  "u974",
  "u93",
  "u92",
  "u864",
  "u90",
  "u88",
  "u859",
  "931",
  "u931a",
  "u931b",
  "u91",
  "u861",
  "u863",
  "u862",
  "u802",
  "u937",
  "u929",
  "u81",
  "u83b",
  "u947",
  "78",
  "u78a",
  "u78b",
  "u971",
  "u922",
  "u921",
  "u919",
  "774",
  "u774a",
  "u76",
  "u73",
  "u915",
  "u916",
  "u917",
  "u975",
  "u70",
  "u72",
  "u853",
  "u913",
  "u67a",
  "920",
  "u920a",
  "u920b",
  "u197",
  "u909",
  "u854",
  "u105b",
  "970",
  "u970a",
  "u970b",
  "u233",
  "u224b",
  "u221b",
  "u221d",
  "u223",
  "u250a",
  "u250b",
  "u250c",
  "u246a",
  "u246b",
  "9922",
  "u9922b",
  "u807",
  "u319b",
  "u326a",
  "u236",
  "u264b",
  "u264d",
  "u265b",
  "u265c",
  "u266",
  "u794",
  "263",
  "u263",
  "u270a",
  "u277",
  "u278b",
  "u279",
  "275",
  "u275a",
  "u300",
  "u285a",
  "u309",
  "808",
  "u808a",
  "u311a",
  "u311c",
  "u312",
  "u305",
  "u8028",
  "u351",
  "355",
  "u355a",
  "u355b",
  "u356",
  "u682",
  "u555c",
  "u542a",
  "u542b",
  "u536b",
  "u535a",
  "u535c",
  "u526b",
  "u526c",
  "u526f",
  "u527",
  "u871a",
  "u516",
  "u517",
  "735",
  "u735a",
  "u735b",
  "u518",
  "u512a",
  "8022",
  "u8022f",
  "u8022c",
  "u8022e",
  "519",
  "u519a",
  "u519b",
  "u520",
  "u598",
  "u580a",
  "u451b",
  "u451c",
  "u603",
  "u639a",
  "u619a",
  "u967",
  "u571",
  "u958",
  "u498a",
  "u498b",
  "u502b",
  "u502d",
  "u487a",
  "u468",
  "u475a",
  "u482c",
  "u436a",
  "u402",
  "u398a",
  "u398e",
  "u422a",
  "u422b",
  "u422c",
  "u696a",
  "u694b",
  "u361f",
  "u382",
  "u380d",
  "u385a",
  "u385b",
  "u664a",
  "u663a",
  "u663b",
  "u667b",
  "u670",
  "u648e",
  "u956",
  "u574g",
  "u961",
  "u960",
  "u724",
  "u779b",
  "936",
  "u936a",
  "m_1",
  "m_2",
  "m_3",
  "m_4",
  "m_5",
  "m_6",
  "m_7",
  "m_8",
  "m_9",
  "m_10",
  "m_11",
  "m_12",
  "m_13",
  "m_14",
  "m_15",
  "m_16",
  "m_17",
  "m_18",
  "m_19",
  "m_20",
  "m_21",
  "m_22",
  "m_23",
  "m_24",
  "m_25",
  "m_26",
  "m_27",
  "m_28",
  "m_29",
  "m_30",
  "m_31",
  "m_32",
  "m_33",
  "m_34",
  "m_35",
  "m_36",
  "m_37",
  "m_38",
  "m_39",
  "m_40",
  "m_41",
  "m_42",
  "m_43",
  "m_44",
  "m_45",
  "m_46",
  "m_47",
  "m_48",
  "m_49",
  "m_50",
  "m_51",
  "m_52",
  "m_53",
  "m_54",
  "m_55",
  "m_56",
  "m_57",
  "m_58",
  "m_59",
  "m_60",
  "m_61",
  "m_62",
  "m_63",
  "m_64",
  "m_65",
  "m_66",
  "m_67",
  "m_68",
  "m_69",
  "m_70",
  "m_71",
  "m_72",
  "m_73",
  "m_74",
  "m_75",
  "m_76",
  "m_77",
  "m_78",
  "m_79",
  "m_80",
  "m_81",
  "m_82",
  "m_83",
  "m_84",
  "m_85",
  "m_86",
  "m_87",
  "m_88",
  "m_89",
  "m_90",
  "m_91",
  "m_92",
  "m_93",
  "m_94",
  "m_95",
  "m_96",
  "m_97",
  "m_98",
  "m_99",
  "m_100",
  "m_101",
  "m_102",
  "m_103",
  "m_104",
  "m_105",
  "m_106",
  "m_107",
  "m_108",
  "m_109",
  "m_110",
  "m_111",
  "m_112",
  "m_113",
  "m_114",
  "m_115",
  "m_116",
  "m_117",
  "m_118",
  "m_119",
  "m_120",
  "m_121",
  "m_122",
  "m_123",
  "m_124",
  "m_125",
  "m_126",
  "m_127",
  "m_128",
  "m_129",
  "m_130",
  "m_131",
  "m_132",
  "m_133",
  "m_134",
  "m_135",
  "m_136",
  "m_137",
  "m_138",
  "m_139",
  "m_140",
  "m_141",
  "m_142",
  "m_143",
  "m_144",
  "m_145",
  "m_146",
  "m_147",
  "m_148",
  "m_149",
  "m_150",
  "m_151",
  "m_152",
  "m_153",
  "m_154",
  "m_155",
  "m_156",
  "m_157",
  "m_158",
  "m_159",
  "m_160",
  "m_161",
  "m_162",
  "m_163",
  "m_164",
  "m_165",
  "m_166",
  "m_167",
  "m_168",
  "m_169",
  "m_170",
  "m_171",
  "m_172",
  "m_173",
  "m_174",
  "m_175",
  "m_176",
  "m_177",
  "m_178",
  "m_179",
  "m_180",
  "m_181",
  "m_182",
  "m_183",
  "m_184",
  "m_185",
  "m_186",
  "m_187",
  "m_188",
  "m_189",
  "m_190",
  "m_191",
  "m_192",
  "m_193",
  "m_194",
  "m_195",
  "m_196",
  "m_197",
  "m_198",
  "m_199",
  "m_200",
  "m_201",
  "m_202",
  "m_203",
  "m_204",
  "m_205",
  "m_206",
  "m_207",
  "m_208",
  "m_209",
  "m_210",
  "m_211",
  "m_212",
  "m_213",
  "m_214",
  "m_215",
  "m_216",
  "m_217",
  "m_218",
  "m_219",
  "m_220",
  "m_221",
  "m_222",
  "m_223",
  "m_224",
  "m_225",
  "m_226",
  "m_227",
  "m_228",
  "m_229",
  "m_230",
  "m_231",
  "m_232",
  "m_233",
  "m_234",
  "m_235",
  "m_236",
  "m_237",
  "m_238",
  "m_239",
  "m_240",
  "m_241",
  "m_242",
  "m_243",
  "m_244",
  "m_245",
  "m_246",
  "m_247",
  "m_248",
  "m_249",
  "m_250",
  "m_251",
  "m_252",
  "m_253",
  "m_254",
  "m_255",
  "m_256",
  "m_257",
  "m_258",
  "m_259",
  "m_260",
  "m_261",
  "m_262",
  "m_263",
  "m_264",
  "m_265",
  "m_266",
  "m_267",
  "m_268",
  "m_269",
  "m_270",
  "m_271",
  "m_272",
  "m_273",
  "m_274",
  "m_275",
  "m_276",
  "m_277",
  "m_278",
  "m_279",
  "m_280",
  "m_281",
  "m_282",
  "m_283",
  "m_284",
  "m_285",
  "m_286",
  "m_287",
  "m_288",
  "m_289",
  "m_290",
  "m_291",
  "m_292",
  "m_293",
  "m_294",
  "m_295",
  "m_296",
  "m_297",
  "m_298",
  "m_299",
  "m_300",
  "m_301",
  "m_302",
  "m_303",
  "m_304",
  "m_305",
  "m_306",
  "m_307",
  "m_308",
  "m_309",
  "m_310",
  "m_311",
  "m_312",
  "m_313",
  "m_314",
  "m_315",
  "m_316",
  "m_317",
  "m_318",
  "m_319",
  "m_320",
  "m_321",
  "m_322",
  "m_323",
  "m_324",
  "m_325",
  "m_326",
  "m_327",
  "m_328",
  "m_329",
  "m_330",
  "m_331",
  "m_332",
  "m_333",
  "m_334",
  "m_335",
  "m_336",
  "m_337",
  "m_338",
  "m_339",
  "m_340",
  "m_341",
  "m_342",
  "m_343",
  "m_344",
  "m_345",
  "m_346",
  "m_347",
  "m_348",
  "m_349",
  "m_350",
  "m_351",
  "m_352",
  "m_353",
  "m_354",
  "m_355",
  "m_356",
  "m_357",
  "m_358",
  "m_359",
  "m_360",
  "m_361",
  "m_362",
  "m_363",
  "m_364",
  "m_365",
  "m_366",
  "m_367",
  "m_368",
  "m_369",
  "m_370",
  "m_371",
  "m_372",
  "m_373",
  "m_374",
  "m_375",
  "m_376",
  "m_377",
  "m_378",
  "m_379",
  "m_380",
  "m_381",
  "m_382",
  "m_383",
  "m_384",
  "m_385",
  "m_386",
  "m_387",
  "m_388",
  "m_389",
  "m_390",
  "m_391",
  "m_392",
  "m_393",
  "m_394",
  "m_395",
  "m_396",
  "m_397",
  "m_398",
  "m_399",
  "m_400",
  "m_401",
  "m_402",
  "m_403",
  "m_404",
  "m_405",
  "m_406",
  "m_407",
  "m_408",
  "m_409",
  "m_410",
  "m_411",
  "m_412",
  "m_413",
  "m_414",
  "m_415",
  "m_416",
  "m_417",
  "m_418",
  "m_419",
  "m_420",
  "m_421",
  "m_422",
  "m_423",
  "m_424",
  "m_425",
  "m_426",
  "m_427",
  "m_428",
  "m_429",
  "m_430",
  "m_431",
  "m_432",
  "m_433",
  "m_434",
  "m_435",
  "m_436",
  "m_437",
  "m_438",
  "m_439",
  "m_440",
  "m_441",
  "m_442",
  "m_443",
  "m_444",
  "m_445",
  "m_446",
  "m_447",
  "m_448",
  "m_449",
  "m_450",
  "m_451",
  "m_452",
  "m_453",
  "m_454",
  "m_455",
  "m_456",
  "m_457",
  "m_458",
  "m_459",
  "m_460",
  "m_461",
  "m_462",
  "m_463",
  "m_464",
  "m_465",
  "m_466",
  "m_467",
  "m_468",
  "m_469",
  "m_470",
  "m_471",
  "m_472",
  "m_473",
  "m_474",
  "m_475",
  "m_476",
  "m_477",
  "m_478",
  "m_479",
  "m_480",
  "m_481",
  "m_482",
  "m_483",
  "m_484",
  "m_485",
  "m_486",
  "m_487",
  "m_488",
  "m_489",
  "m_490",
  "m_491",
  "m_492",
  "m_493",
  "m_494",
  "m_495",
  "m_496",
  "m_497",
  "m_498",
  "m_499",
  "m_500",
  "m_501",
  "m_502",
  "m_503",
  "m_504",
  "m_505",
  "m_506",
  "m_507",
  "m_508",
  "m_509",
  "m_510",
  "m_511",
  "m_512",
  "m_513",
  "m_514",
  "m_515",
  "m_516",
  "m_517",
  "m_518",
  "m_519",
  "m_520",
  "m_521",
  "m_522",
  "m_523",
  "m_524",
  "m_525",
  "m_526",
  "m_527",
  "m_528",
  "m_529",
  "m_530",
  "m_531",
  "m_532",
  "m_533",
  "m_534",
  "m_535",
  "m_536",
  "m_537",
  "m_538",
  "m_539",
  "m_540",
  "m_541",
  "m_542",
  "m_543",
  "m_544",
  "m_545",
  "m_546",
  "m_547",
  "m_548",
  "m_549",
  "m_550",
  "m_551",
  "m_552",
  "m_553",
  "p_115",
  "p_326",
  "p_378",
  "p_383",
  "p_387",
  "p_392",
  "p_407",
  "p_453",
  "p_457",
  "p_475",
  "p_486",
  "p_488",
  "p_9262",
  "p_526",
  "p_606",
  "p_648",
  "p_650",
  "p_680",
  "p_718",
  "p_743",
  "p_783",
  "p_802",
  "p_829",
  "p_832",
  "p_850",
  "p_885",
  "p_889",
  "p_956",
  "p_966",
  "p_976",
  "p_1103",
  "p_1107",
  "p_1114",
  "p_1163",
  "p_1209",
  "p_1217",
  "p_1250",
  "p_1262",
  "p_1288",
  "p_1296",
  "p_1322",
  "p_1396",
  "p_1506",
  "p_1538",
  "p_1539",
  "p_1574",
  "p_1580",
  "p_1631",
  "p_1704",
  "p_1736",
  "p_1753",
  "p_10263",
  "p_2039",
  "p_2042",
  "p_2043",
  "p_2049",
  "p_2056",
  "p_2086",
  "p_2089",
  "p_2090",
  "p_2129",
  "p_2131",
  "p_2162",
  "p_2174",
  "p_2175",
  "p_2194",
  "p_2227",
  "p_2228",
  "p_2258",
  "p_2268",
  "p_2300",
  "p_2643",
  "p_2649",
  "p_2656",
  "p_2884",
  "p_2900",
  "p_2917",
  "p_2968",
  "p_2982",
  "p_3001",
  "p_3112",
  "p_3173",
  "p_3191",
  "p_3339",
  "p_3362",
  "p_3448",
  "p_3553",
  "p_3613",
  "p_3618",
  "p_3619",
  "p_3675",
  "p_10818",
  "p_11850",
  "p_4379",
  "p_4418",
  "p_13888",
  "p_4521",
  "p_13904",
  "p_4530",
  "p_4534",
  "p_4537",
  "p_4570",
  "p_4576",
  "p_4580",
  "p_4588",
  "p_4590",
  "p_4619",
  "p_4622",
  "p_5152",
  "p_5238",
  "p_5414",
  "p_5562",
  "p_5568",
  "p_5572",
  "p_5605",
  "p_5634",
  "p_5703",
  "p_5723",
  "p_5724",
  "p_5727",
  "p_6118",
  "p_6123",
  "p_6137",
  "p_6449",
  "p_13925",
  "p_6689",
  "p_6815",
  "p_6834",
  "p_6894",
  "p_13948",
  "p_13955",
  "p_13971",
  "p_13994",
  "p_13998",
  "p_17379",
  "p_6998",
  "p_7035",
  "p_7247",
  "p_7257",
  "p_7298",
  "p_7497",
  "p_21225",
  "p_7692",
  "p_7914",
  "p_7923",
  "p_7958",
  "p_8004",
  "p_8075",
  "p_8234",
  "p_8237",
  "p_8245",
  "p_8251",
  "p_8255",
  "p_8402",
  "p_8436",
  "p_8437",
  "p_8442",
  "p_8445",
  "p_8447",
  "p_8509",
  "p_8511",
  "p_8724",
  "p_8887",
  "p_21230",
  "p_9114",
  "p_9132",
  "p_9137",
  "p_9183",
  "p_21618",
  "p_9469",
  "p_9749",
  "p_9756",
  "p_9767",
  "p_9806",
  "p_9822",
  "p_9844",
  "p_9854",
  "p_9876",
  "p_9948",
  "p_9956",
  "p_10000",
  "p_10058",
  "p_10060",
  "p_10090",
  "p_10131",
  "p_10252",
  "p_10256",
  "p_26663",
  "p_10744",
  "p_10754",
  "p_10758",
  "p_10759",
  "p_10764",
  "p_10782",
  "p_10785",
  "p_28881",
  "p_28887",
  "p_10895",
  "p_10935",
  "p_11268",
  "p_11680",
  "p_11737",
  "p_11757",
  "p_11762",
  "p_11794",
  "p_11814",
  "p_11836",
  "p_11843",
  "p_28935",
  "p_11849",
  "p_28941",
  "p_29012",
  "p_11884",
  "p_11948",
  "p_11983",
  "p_11991",
  "p_11994",
  "p_12004",
  "p_12103",
  "p_12116",
  "p_12162",
  "p_12190",
  "p_12208",
  "p_12253",
  "p_12255",
  "p_29111",
  "p_12284",
  "p_12292",
  "p_32019",
  "p_12350",
  "p_12362",
  "p_32440",
  "p_12772",
  "p_12919",
  "p_12920",
  "p_12939",
  "p_13012",
  "p_13470",
  "p_13524",
  "p_13525",
  "p_13527",
  "p_13744",
  "p_13852",
  "p_13884",
  "p_13887",
  "p_34240",
  "p_13889",
  "p_13890",
  "p_13893",
  "p_13894",
  "p_13895",
  "p_13896",
  "p_13897",
  "p_13901",
  "p_13903",
  "p_34255",
  "p_34269",
  "p_13916",
  "p_13917",
  "p_13919",
  "p_13920",
  "p_13923",
  "p_34301",
  "p_13928",
  "p_13930",
  "p_13931",
  "p_13932",
  "p_13934",
  "p_13937",
  "p_13938",
  "p_13940",
  "p_13941",
  "p_13942",
  "p_13944",
  "p_13946",
  "p_13947",
  "p_42459",
  "p_13949",
  "p_13950",
  "p_13951",
  "p_13952",
  "p_13953",
  "p_13954",
  "p_51389",
  "p_13963",
  "p_13965",
  "p_13967",
  "p_13968",
  "p_13969",
  "p_13970",
  "p_61178",
  "p_61375",
  "p_13995",
  "p_13996",
  "p_13997",
  "p_64896",
  "p_14000",
  "p_14001",
  "p_14003",
  "p_14004",
  "p_14005",
  "p_14006",
  "p_14009",
  "p_14010",
  "p_14223",
  "p_14241",
  "p_14409",
  "p_14422",
  "p_14447",
  "p_14458",
  "p_14498",
  "p_14503",
  "p_14581",
  "p_65302",
  "p_65305",
  "p_14734",
  "p_14735",
  "p_14834",
  "p_15062",
  "p_15072",
  "p_15295",
  "p_15470",
  "p_15634",
  "p_15937",
  "p_16220",
  "p_16335",
  "p_16393",
  "p_16709",
  "p_16725",
  "p_65308",
  "p_65315",
  "p_65316",
  "p_65320",
  "p_17474",
  "p_18065",
  "p_18437",
  "p_18618",
  "p_18757",
  "p_18810",
  "p_19502",
  "p_19506",
  "p_19789",
  "p_19859",
  "p_20183",
  "p_20206",
  "p_20239",
  "p_20240",
  "p_20244",
  "p_20389",
  "p_65323",
  "p_65326",
  "p_20475",
  "p_20561",
  "p_20577",
  "p_20582",
  "p_20584",
  "p_20601",
  "p_20628",
  "p_20804",
  "p_20806",
  "p_20809",
  "p_20818",
  "p_20831",
  "p_20861",
  "p_20970",
  "p_21015",
  "p_21098",
  "p_21100",
  "p_21107",
  "p_65327",
  "p_21229",
  "p_65328",
  "p_21236",
  "p_65335",
  "p_65338",
  "p_21243",
  "p_21288",
  "p_21345",
  "p_21378",
  "p_21414",
  "p_21457",
  "p_65340",
  "p_21633",
  "p_21767",
  "p_22160",
  "p_22433",
  "p_22530",
  "p_22538",
  "p_22730",
  "p_22735",
  "p_22849",
  "p_66323",
  "p_66349",
  "p_66386",
  "p_22954",
  "p_22988",
  "p_22990",
  "p_22992",
  "p_23007",
  "p_23034",
  "p_23154",
  "p_23308",
  "p_23645",
  "p_68788",
  "p_23962",
  "p_70515",
  "p_24173",
  "p_24206",
  "p_24208",
  "p_24210",
  "p_24218",
  "p_24220",
  "p_24224",
  "p_24234",
  "p_24238",
  "p_24241",
  "p_24265",
  "p_24266",
  "p_24274",
  "p_24277",
  "p_24279",
  "p_24283",
  "p_24341",
  "p_24368",
  "p_24369",
  "p_24370",
  "p_24454",
  "p_24455",
  "p_24496",
  "p_24520",
  "p_24530",
  "p_24532",
  "p_24549",
  "p_24564",
  "p_24601",
  "p_24619",
  "p_24621",
  "p_24644",
  "p_24649",
  "p_24678",
  "p_24731",
  "p_24821",
  "p_24858",
  "p_24859",
  "p_24879",
  "p_24882",
  "p_24883",
  "p_24973",
  "p_25032",
  "p_25088",
  "p_25228",
  "p_75354",
  "p_25245",
  "p_76004",
  "p_25273",
  "p_25298",
  "p_25492",
  "p_25501",
  "p_26048",
  "p_26134",
  "p_26274",
  "p_26383",
  "p_26393",
  "p_26423",
  "p_26435",
  "p_26521",
  "p_26561",
  "p_26648",
  "p_26649",
  "p_26660",
  "p_26661",
  "p_26662",
  "p_78608",
  "p_26667",
  "p_26669",
  "p_26675",
  "p_26679",
  "p_26680",
  "p_26682",
  "p_26697",
  "p_26827",
  "p_26838",
  "p_26858",
  "p_27058",
  "p_27080",
  "p_27082",
  "p_27084",
  "p_27085",
  "p_27089",
  "p_27376",
  "p_27392",
  "p_27457",
  "p_27462",
  "p_27889",
  "p_28207",
  "p_28299",
  "p_28320",
  "p_28355",
  "p_28420",
  "p_28433",
  "p_28441",
  "p_28451",
  "p_28551",
  "p_28715",
  "p_28723",
  "p_28729",
  "p_78810",
  "p_79213",
  "p_84350",
  "p_84368",
  "p_84373",
  "p_6896",
  "p_6917",
  "p_6930",
  "p_28945",
  "p_6935",
  "p_6942",
  "p_29065",
  "p_29106",
  "p_7498",
  "p_10799",
  "p_34307",
  "p_36747",
  "p_29157",
  "p_29574",
  "p_29655",
  "p_29856",
  "p_29863",
  "p_29935",
  "p_29994",
  "p_30016",
  "p_30036",
  "p_30044",
  "p_30054",
  "p_30220",
  "p_30225",
  "p_30234",
  "p_30240",
  "p_30242",
  "p_30244",
  "p_30532",
  "p_30535",
  "p_30544",
  "p_30559",
  "p_30955",
  "p_31103",
  "p_31163",
  "p_31176",
  "p_31177",
  "p_31235",
  "p_31238",
  "p_31252",
  "p_31253",
  "p_31264",
  "p_36752",
  "p_31300",
  "p_31301",
  "p_31309",
  "p_31310",
  "p_31319",
  "p_31343",
  "p_31365",
  "p_31381",
  "p_31387",
  "p_31406",
  "p_31457",
  "p_31473",
  "p_31474",
  "p_31486",
  "p_31487",
  "p_31493",
  "p_31549",
  "p_31558",
  "p_31582",
  "p_31591",
  "p_31593",
  "p_31617",
  "p_31620",
  "p_31635",
  "p_31712",
  "p_31729",
  "p_31770",
  "p_31861",
  "p_31892",
  "p_31932",
  "p_31971",
  "p_44072",
  "p_32040",
  "p_32088",
  "p_32089",
  "p_32107",
  "p_32113",
  "p_32133",
  "p_32141",
  "p_32143",
  "p_32187",
  "p_32194",
  "p_32200",
  "p_32223",
  "p_32250",
  "p_32251",
  "p_32279",
  "p_32317",
  "p_32370",
  "p_32396",
  "p_32430",
  "p_32433",
  "p_44073",
  "p_32464",
  "p_32583",
  "p_32586",
  "p_32602",
  "p_32610",
  "p_32615",
  "p_32633",
  "p_32638",
  "p_32695",
  "p_32720",
  "p_32786",
  "p_32797",
  "p_32801",
  "p_32812",
  "p_32851",
  "p_32856",
  "p_32857",
  "p_32892",
  "p_58078",
  "p_32909",
  "p_32931",
  "p_32985",
  "p_33247",
  "p_33259",
  "p_33283",
  "p_33290",
  "p_33298",
  "p_33317",
  "p_33373",
  "p_33399",
  "p_33458",
  "p_33471",
  "p_33491",
  "p_33534",
  "p_33609",
  "p_33649",
  "p_33716",
  "p_33975",
  "p_34087",
  "p_34089",
  "p_60741",
  "p_34204",
  "p_34205",
  "p_34206",
  "p_34215",
  "p_34217",
  "p_60744",
  "p_60745",
  "p_34231",
  "p_65301",
  "p_34250",
  "p_34254",
  "p_65304",
  "p_65309",
  "p_66387",
  "p_67106",
  "p_75286",
  "p_78798",
  "p_35210",
  "p_35603",
  "p_35617",
  "p_35619",
  "p_35622",
  "p_35626",
  "p_35690",
  "p_35725",
  "p_35737",
  "p_36205",
  "p_36332",
  "p_36370",
  "p_36433",
  "p_36434",
  "p_36463",
  "p_36481",
  "p_36485",
  "p_36486",
  "p_36492",
  "p_36502",
  "p_36505",
  "p_36511",
  "p_36525",
  "p_36601",
  "p_36620",
  "p_36728",
  "p_28930",
  "p_36753",
  "p_36754",
  "p_36756",
  "p_36757",
  "p_36783",
  "p_36784",
  "p_36806",
  "p_36807",
  "p_36943",
  "p_36948",
  "p_36960",
  "p_36985",
  "p_36986",
  "p_37213",
  "p_37251",
  "p_37870",
  "p_38056",
  "p_38091",
  "p_38120",
  "p_38171",
  "p_38342",
  "p_38343",
  "p_38487",
  "p_38489",
  "p_38521",
  "p_38562",
  "p_38634",
  "p_38635",
  "p_38638",
  "p_38647",
  "p_38649",
  "p_38694",
  "p_38709",
  "p_38710",
  "p_38711",
  "p_38719",
  "p_38725",
  "p_38755",
  "p_38806",
  "p_38830",
  "p_38847",
  "p_38866",
  "p_38874",
  "p_38892",
  "p_38901",
  "p_38943",
  "p_38948",
  "p_38963",
  "p_38964",
  "p_38986",
  "p_39004",
  "p_39012",
  "p_39100",
  "p_39123",
  "p_39124",
  "p_39139",
  "p_39145",
  "p_39146",
  "p_39151",
  "p_39158",
  "p_39195",
  "p_39250",
  "p_39251",
  "p_39337",
  "p_39338",
  "p_39348",
  "p_39356",
  "p_39359",
  "p_39370",
  "p_39404",
  "p_39406",
  "p_39426",
  "p_39554",
  "p_39569",
  "p_39649",
  "p_39743",
  "p_39971",
  "p_39987",
  "p_40052",
  "p_40064",
  "p_40143",
  "p_40174",
  "p_40244",
  "p_40251",
  "p_40318",
  "p_40427",
  "p_40566",
  "p_40572",
  "p_40627",
  "p_40688",
  "p_41550",
  "p_42011",
  "p_42037",
  "p_42115",
  "p_42232",
  "p_42408",
  "p_42411",
  "p_42520",
  "p_42599",
  "p_42657",
  "p_42658",
  "p_42707",
  "p_42804",
  "p_42846",
  "p_42986",
  "p_43010",
  "p_43026",
  "p_43033",
  "p_43089",
  "p_43105",
  "p_43173",
  "p_43328",
  "p_43473",
  "p_43477",
  "p_43484",
  "p_43486",
  "p_43488",
  "p_43494",
  "p_43496",
  "p_43498",
  "p_43499",
  "p_43805",
  "p_43858",
  "p_44269",
  "p_44305",
  "p_44387",
  "p_44388",
  "p_44518",
  "p_44627",
  "p_44977",
  "p_45197",
  "p_45206",
  "p_45358",
  "p_45395",
  "p_45433",
  "p_45701",
  "p_45704",
  "p_45804",
  "p_46627",
  "p_46630",
  "p_46637",
  "p_46671",
  "p_46674",
  "p_46702",
  "p_46812",
  "p_47068",
  "p_47141",
  "p_47303",
  "p_47316",
  "p_47325",
  "p_47536",
  "p_47551",
  "p_47689",
  "p_47694",
  "p_47715",
  "p_47727",
  "p_47780",
  "p_47799",
  "p_47818",
  "p_47890",
  "p_47964",
  "p_47992",
  "p_48062",
  "p_48096",
  "p_48099",
  "p_48107",
  "p_48110",
  "p_48118",
  "p_48300",
  "p_48334",
  "p_48340",
  "p_48357",
  "p_48375",
  "p_48385",
  "p_48459",
  "p_48514",
  "p_48590",
  "p_49006",
  "p_49190",
  "p_49247",
  "p_49448",
  "p_49751",
  "p_49796",
  "p_49809",
  "p_49826",
  "p_49874",
  "p_49902",
  "p_49909",
  "p_50161",
  "p_34202",
  "p_50402",
  "p_50867",
  "p_50871",
  "p_50966",
  "p_51114",
  "p_51126",
  "p_52220",
  "p_52285",
  "p_52286",
  "p_52290",
  "p_52294",
  "p_52327",
  "p_52407",
  "p_52427",
  "p_52430",
  "p_52455",
  "p_52456",
  "p_52457",
  "p_52461",
  "p_52462",
  "p_52470",
  "p_52472",
  "p_52473",
  "p_52479",
  "p_52563",
  "p_52840",
  "p_52866",
  "p_52881",
  "p_52882",
  "p_53024",
  "p_53044",
  "p_53049",
  "p_53339",
  "p_53348",
  "p_53519",
  "p_53622",
  "p_53782",
  "p_54055",
  "p_54334",
  "p_54358",
  "p_54614",
  "p_54615",
  "p_54894",
  "p_54921",
  "p_54995",
  "p_55018",
  "p_55037",
  "p_55047",
  "p_55161",
  "p_55162",
  "p_55395",
  "p_55639",
  "p_55992",
  "p_56027",
  "p_56181",
  "p_56209",
  "p_56265",
  "p_56350",
  "p_56368",
  "p_56381",
  "p_56419",
  "p_56464",
  "p_56465",
  "p_56807",
  "p_56837",
  "p_56842",
  "p_56848",
  "p_56920",
  "p_56961",
  "p_57158",
  "p_57268",
  "p_57273",
  "p_57598",
  "p_57684",
  "p_57776",
  "p_57793",
  "p_57819",
  "p_57846",
  "p_57880",
  "p_57895",
  "p_57899",
  "p_57921",
  "p_58110",
  "p_58399",
  "p_58460",
  "p_58606",
  "p_58835",
  "p_58890",
  "p_58895",
  "p_59589",
  "p_59602",
  "p_59755",
  "p_59773",
  "p_59839",
  "p_60026",
  "p_60185",
  "p_60427",
  "p_60453",
  "p_60469",
  "p_60477",
  "p_60516",
  "p_60529",
  "p_60530",
  "p_60584",
  "p_60590",
  "p_60601",
  "p_60623",
  "p_60644",
  "p_60934",
  "p_60955",
  "p_61041",
  "p_61044",
  "p_61059",
  "p_61103",
  "p_61161",
  "p_61183",
  "p_61194",
  "p_61195",
  "p_61196",
  "p_61197",
  "p_61198",
  "p_61199",
  "p_61200",
  "p_61201",
  "p_61202",
  "p_61203",
  "p_61204",
  "p_61233",
  "p_61273",
  "p_61304",
  "p_61321",
  "p_61339",
  "p_61346",
  "p_61372",
  "p_61373",
  "p_61395",
  "p_61399",
  "p_61436",
  "p_61443",
  "p_61480",
  "p_61481",
  "p_61482",
  "p_61483",
  "p_61484",
  "p_61486",
  "p_61487",
  "p_61939",
  "p_62068",
  "p_62173",
  "p_62225",
  "p_62326",
  "p_62398",
  "p_62460",
  "p_62465",
  "p_62466",
  "p_62493",
  "p_62693",
  "p_62790",
  "p_62839",
  "p_63022",
  "p_63030",
  "p_63225",
  "p_63243",
  "p_63388",
  "p_63392",
  "p_63396",
  "p_63407",
  "p_63409",
  "p_63442",
  "p_63493",
  "p_63556",
  "p_63572",
  "p_63622",
  "p_63752",
  "p_63753",
  "p_63754",
  "p_63755",
  "p_63756",
  "p_63757",
  "p_63758",
  "p_63759",
  "p_63760",
  "p_63761",
  "p_63762",
  "p_63781",
  "p_64079",
  "p_64496",
  "p_64678",
  "p_64734",
  "p_64752",
  "p_64782",
  "p_64786",
  "p_64792",
  "p_64794",
  "p_64799",
  "p_64801",
  "p_64820",
  "p_64829",
  "p_64867",
  "p_64871",
  "p_64906",
  "p_64916",
  "p_64936",
  "p_64941",
  "p_64946",
  "p_65296",
  "p_65307",
  "p_65310",
  "p_65311",
  "p_65313",
  "p_65317",
  "p_65318",
  "p_65321",
  "p_65324",
  "p_65334",
  "p_65336",
  "p_65337",
  "p_65342",
  "p_65343",
  "p_65487",
  "p_65496",
  "p_65509",
  "p_65519",
  "p_65520",
  "p_65531",
  "p_65536",
  "p_65540",
  "p_65546",
  "p_65549",
  "p_65567",
  "p_65587",
  "p_65601",
  "p_65607",
  "p_65633",
  "p_65718",
  "p_65720",
  "p_65726",
  "p_65880",
  "p_66194",
  "p_66236",
  "p_66311",
  "p_66313",
  "p_66314",
  "p_66317",
  "p_66319",
  "p_66320",
  "p_490",
  "p_66327",
  "p_11847",
  "p_66331",
  "p_66338",
  "p_66343",
  "p_11854",
  "p_66348",
  "p_13915",
  "p_66352",
  "p_66380",
  "p_66383",
  "p_14651",
  "p_20392",
  "p_66391",
  "p_21238",
  "p_66436",
  "p_66504",
  "p_66630",
  "p_66728",
  "p_66818",
  "p_66826",
  "p_66899",
  "p_66925",
  "p_67033",
  "p_67036",
  "p_67040",
  "p_28942",
  "p_67109",
  "p_67130",
  "p_67203",
  "p_67237",
  "p_29121",
  "p_68676",
  "p_68701",
  "p_34293",
  "p_50376",
  "p_58856",
  "p_68947",
  "p_69130",
  "p_69213",
  "p_69224",
  "p_69229",
  "p_69236",
  "p_69237",
  "p_69657",
  "p_69670",
  "p_69712",
  "p_69788",
  "p_69930",
  "p_70085",
  "p_70387",
  "p_70389",
  "p_70391",
  "p_70468",
  "p_61322",
  "p_70483",
  "p_65040",
  "p_70699",
  "p_70749",
  "p_70755",
  "p_70761",
  "p_70836",
  "p_70841",
  "p_70842",
  "p_70846",
  "p_70954",
  "p_71109",
  "p_72172",
  "p_72227",
  "p_72251",
  "p_72367",
  "p_72464",
  "p_72472",
  "p_65297",
  "p_72524",
  "p_72559",
  "p_72595",
  "p_72598",
  "p_72607",
  "p_72612",
  "p_72680",
  "p_73909",
  "p_73946",
  "p_73953",
  "p_74041",
  "p_74043",
  "p_74125",
  "p_74420",
  "p_65298",
  "p_74788",
  "p_74789",
  "p_74790",
  "p_74791",
  "p_74792",
  "p_74793",
  "p_74794",
  "p_74795",
  "p_74796",
  "p_74797",
  "p_74798",
  "p_74877",
  "p_74941",
  "p_75088",
  "p_75106",
  "p_66347",
  "p_66392",
  "p_75117",
  "p_75133",
  "p_75548",
  "p_75215",
  "p_75253",
  "p_82008",
  "p_83347",
  "p_83353",
  "p_6909",
  "p_76022",
  "p_76116",
  "p_76199",
  "p_76260",
  "p_76288",
  "p_76540",
  "p_76965",
  "p_77242",
  "p_77280",
  "p_77287",
  "p_77289",
  "p_77344",
  "p_77394",
  "p_77503",
  "p_77522",
  "p_77633",
  "p_77652",
  "p_77658",
  "p_77675",
  "p_77781",
  "p_77863",
  "p_77869",
  "p_77936",
  "p_77948",
  "p_77958",
  "p_78192",
  "p_78505",
  "p_78558",
  "p_78577",
  "p_78601",
  "p_14649",
  "p_78610",
  "p_78617",
  "p_78622",
  "p_78630",
  "p_20456",
  "p_78800",
  "p_78806",
  "p_78808",
  "p_21242",
  "p_78815",
  "p_78818",
  "p_78826",
  "p_78900",
  "p_78957",
  "p_78974",
  "p_79182",
  "p_28874",
  "p_79421",
  "p_79450",
  "p_79457",
  "p_79680",
  "p_79855",
  "p_79938",
  "p_80676",
  "p_80688",
  "p_80689",
  "p_80690",
  "p_80821",
  "p_81010",
  "p_81036",
  "p_81195",
  "p_81198",
  "p_81205",
  "p_81229",
  "p_81233",
  "p_81241",
  "p_81308",
  "p_81429",
  "p_81736",
  "p_81768",
  "p_81769",
  "p_81802",
  "p_81956",
  "p_29122",
  "p_29123",
  "p_82010",
  "p_82057",
  "p_82059",
  "p_82074",
  "p_82091",
  "p_82148",
  "p_82157",
  "p_82210",
  "p_82252",
  "p_44071",
  "p_44074",
  "p_50377",
  "p_82786",
  "p_55160",
  "p_83049",
  "p_83050",
  "p_83052",
  "p_83066",
  "p_83073",
  "p_83092",
  "p_83137",
  "p_83230",
  "p_83259",
  "p_83307",
  "p_56833",
  "p_58411",
  "p_66330",
  "p_83446",
  "p_83475",
  "p_83477",
  "p_83539",
  "p_83637",
  "p_83638",
  "p_83681",
  "p_83693",
  "p_83716",
  "p_83837",
  "p_83852",
  "p_83869",
  "p_83888",
  "p_83891",
  "p_83893",
  "p_83900",
  "p_83903",
  "p_83909",
  "p_83920",
  "p_83923",
  "p_83947",
  "p_83955",
  "p_83959",
  "p_83970",
  "p_83987",
  "p_83988",
  "p_83991",
  "p_83994",
  "p_83996",
  "p_84000",
  "p_84010",
  "p_84013",
  "p_84104",
  "p_84111",
  "p_84334",
  "p_84336",
  "p_84337",
  "p_84338",
  "p_84339",
  "p_84340",
  "p_84341",
  "p_84342",
  "p_84343",
  "p_84344",
  "p_84345",
  "p_84346",
  "p_84347",
  "p_84348",
  "p_84349",
  "p_67533",
  "p_84351",
  "p_84352",
  "p_84353",
  "p_84354",
  "p_84355",
  "p_84356",
  "p_84357",
  "p_84358",
  "p_84359",
  "p_84360",
  "p_84361",
  "p_84362",
  "p_84363",
  "p_84364",
  "p_84365",
  "p_84366",
  "p_84367",
  "p_75125",
  "p_84369",
  "p_84370",
  "p_84371",
  "p_84372",
  "p_81985",
  "p_84374",
  "p_84375",
  "p_84376",
  "p_84377",
  "p_84378",
  "p_84379",
  "p_84380",
  "p_84381",
  "p_84382",
  "p_84383",
  "p_84384",
  "p_84385",
  "p_84386",
  "p_84387",
  "p_84388",
  "p_84389",
  "p_84390",
  "p_84391",
  "p_84392",
  "p_84393",
  "p_84394",
  "p_84395",
  "p_84396",
  "p_84397",
  "p_84398",
  "p_84399",
  "p_84400",
  "p_84401",
  "p_84402",
  "p_84403",
  "p_84404",
  "p_84405",
  "p_84406",
  "p_84407",
  "p_84408",
  "p_84409",
  "p_84410",
  "p_84411",
  "p_84412",
  "p_84413",
  "p_84414",
  "p_84415",
  "p_84416",
  "p_84417",
  "p_84418",
  "p_84419",
  "p_84420",
  "p_84421",
  "p_84422",
  "p_84423",
  "p_84424",
  "p_84425",
  "p_84426",
  "p_84427",
  "p_84428",
  "p_84429",
  "p_84430",
  "p_84431",
  "p_84432",
  "p_84433",
  "p_84434",
  "p_84435",
  "p_84436",
  "p_84437",
  "p_84438",
  "p_84439",
  "p_84440",
  "p_84441",
  "p_84442",
  "p_84443",
  "p_84444",
  "p_84445",
  "p_84446",
  "p_84447",
  "p_84448",
  "p_84449",
  "p_84450",
  "p_84451",
  "p_84452",
  "p_84453",
  "p_84454",
  "p_84455",
  "p_84456",
  "p_84457",
  "p_84458",
  "p_84459",
  "p_84460",
  "p_84461",
  "p_84462",
  "p_84463",
  "p_84464",
  "p_84465",
  "p_84466",
  "p_84467",
  "p_84468",
  "p_84469",
  "p_84470",
  "p_84471",
  "p_84472",
  "p_84473",
  "p_84474",
  "p_84475",
  "p_84476",
  "p_84477",
  "p_84478",
  "p_84479",
  "p_84480",
  "p_84481",
  "p_84482",
  "p_84483",
  "p_84484",
  "p_84485",
  "p_84486",
  "p_84487",
  "p_84488",
  "p_84489",
  "p_84490",
  "p_84491",
  "p_84492",
  "p_84493",
  "p_84494",
  "p_84495",
  "p_84496",
  "p_84497",
  "p_84498",
  "p_84499",
  "p_84500",
  "p_84501",
  "p_84502",
  "p_84503",
  "p_84504",
  "p_84505",
  "p_84506",
  "p_84507",
  "p_84508",
  "p_84509",
  "p_84510",
  "p_84511",
  "p_84512",
  "p_84513",
  "p_84514",
  "p_84515",
  "p_84516",
  "p_84517",
  "p_84518",
  "p_84519",
  "p_84520",
  "p_84521",
  "p_84522",
  "p_84523",
  "p_84525",
  "p_84526",
  "p_84527",
  "p_84528",
  "p_84529",
  "p_84530",
  "p_84531",
  "p_84532",
  "p_84533",
  "p_84534",
  "p_84535",
  "p_84536",
  "p_84537",
  "p_84538",
  "p_84539",
  "p_84540",
  "p_84541",
  "p_84542",
  "p_84543",
  "p_84544",
  "p_84545",
  "p_84546",
  "p_84547",
  "p_84548",
  "p_84549",
  "p_84550",
  "p_84551",
  "p_84552",
  "p_84553",
  "p_84554",
  "p_84555",
  "p_84556",
  "p_84557",
  "p_84558",
  "p_84559",
  "p_84560",
  "p_84561",
  "p_84562",
  "p_84563",
  "p_84564",
  "p_84565",
  "p_84566",
  "p_84567",
  "p_84568",
  "p_84569",
  "p_84570",
  "p_84571",
  "p_84572",
  "p_84573",
  "p_84574",
  "p_84575",
  "p_84576",
  "p_84577",
  "p_84578",
  "p_84579",
  "p_84580",
  "p_84581",
  "p_84582",
  "p_84583",
  "p_84584",
  "p_84585",
  "p_84586",
  "p_84587",
  "p_84588",
  "p_84589",
  "p_84590",
  "p_84591",
  "p_84592",
  "p_84593",
  "p_84594",
  "p_84595",
  "p_84596",
  "p_84597",
  "p_84598",
  "p_84599",
  "p_84600",
  "p_84601",
  "p_84602",
  "p_84603",
  "p_84604",
  "p_84605",
  "p_84606",
  "p_84607",
  "p_84608",
  "p_84609",
  "p_84610",
  "p_84611",
  "p_84612",
  "p_84613",
  "p_84614"
};
final String[] COMMON_NAME = new String[] {
  "Southern Cassowary",
  "Australian Southern Cassowary",
  "Blue-billed Duck",
  "Recherche Cape Barren Goose",
  "Malleefowl",
  "Stokes Range White-quilled Rock-Pigeon",
  "Southern Squatter Pigeon",
  "Partridge Pigeon",
  "Western Partridge Pigeon",
  "Eastern Partridge Pigeon",
  "Grey-capped Emerald-Dove",
  "Christmas Island Grey-capped Emerald-Dove",
  "Christmas Island Imperial-Pigeon",
  "Glossy Swiftlet",
  "Christmas Island Glossy Swiftlet",
  "Lord Howe Woodhen",
  "Cocos Keeling Buff-banded Rail",
  "Black-faced Sheathbill",
  "Heard Island Black-faced Sheathbill",
  "Grey Plover",
  "Eastern Grey Plover",
  "Lesser Sand Plover",
  "Mongolian Lesser Sand Plover",
  "Kamchatkan Lesser Sand Plover",
  "Greater Sand Plover",
  "Mongolian Greater Sand Plover",
  "Hooded Plover",
  "Eastern Hooded Plover",
  "Plains-wanderer",
  "Australian Painted-snipe",
  "Eastern Siberian Whimbrel",
  "Far Eastern Curlew",
  "Western Alaskan Bar-tailed Godwit",
  "Northern Siberian Bar-tailed Godwit",
  "Black-tailed Godwit",
  "Eastern Siberian Black-tailed Godwit",
  "Ruddy Turnstone",
  "Palaearctic Ruddy Turnstone",
  "Great Knot",
  "Red Knot",
  "New Siberian Islands Red Knot",
  "North-eastern Siberian Red Knot",
  "Curlew Sandpiper",
  "Red-necked Stint",
  "Asian Dowitcher",
  "Terek Sandpiper",
  "Black-breasted Button-quail",
  "Houtman Abrolhos Painted Button-quail",
  "Buff-breasted Button-quail",
  "Lesser Noddy",
  "Houtman Abrolhos Lesser Noddy",
  "Fairy Tern",
  "New Caledonian Fairy Tern",
  "Australian Fairy Tern",
  "New Zealand Antarctic Tern",
  "Indian Ocean Antarctic Tern",
  "Red-tailed Tropicbird",
  "Indian Ocean Red-tailed Tropicbird",
  "White-tailed Tropicbird",
  "Christmas Island White-tailed Tropicbird",
  "Indian Ocean White-tailed Tropicbird",
  "Gentoo Penguin",
  "Subantarctic Gentoo Penguin",
  "Macaroni Penguin",
  "Royal Penguin",
  "Southern Rockhopper Penguin",
  "Eastern Rockhopper Penguin",
  "Subantarctic Wilson's Storm-Petrel",
  "Grey-backed Storm-Petrel",
  "White-bellied Storm-Petrel",
  "Tasman White-bellied Storm-Petrel",
  "Wandering Albatross",
  "Antipodean Albatross",
  "Gibson's Albatross",
  "Amsterdam Albatross",
  "Tristan Albatross",
  "Northern Royal Albatross",
  "Southern Royal Albatross",
  "Light-mantled Sooty Albatross",
  "Sooty Albatross",
  "Indian Yellow-nosed Albatross",
  "Grey-headed Albatross",
  "Black-browed Albatross",
  "Campbell Albatross",
  "Buller's Albatross",
  "Southern Buller's Albatross",
  "Northern Buller's Albatross",
  "Shy Albatross",
  "White-capped Albatross",
  "Chatham Albatross",
  "Salvin's Albatross",
  "Matsudaira's Storm-Petrel",
  "Northern Giant-Petrel",
  "Southern Giant-Petrel",
  "Blue Petrel",
  "Southern Fairy Prion",
  "Southern Fulmar Prion",
  "Gould's Petrel",
  "New Caledonian Gould's Petrel",
  "Australian Gould's Petrel",
  "Providence Petrel",
  "Western Kermadec Petrel",
  "Herald Petrel",
  "Mottled Petrel",
  "White-necked Petrel",
  "Southern White-necked Petrel",
  "Soft-plumaged Petrel",
  "Grey Petrel",
  "White-chinned Petrel",
  "Westland Petrel",
  "Black Petrel",
  "Buller's Shearwater",
  "Sooty Shearwater",
  "Flesh-footed Shearwater",
  "Streaked Shearwater",
  "Hutton's Shearwater",
  "Tasman Little Shearwater",
  "Tahiti Petrel",
  "Pacific Tahiti Petrel",
  "New Caledonian Tahiti Petrel",
  "Australasian Bittern",
  "Christmas Island Frigatebird",
  "Abbott's Booby",
  "Tasman Booby",
  "Imperial Shag",
  "Heard Island Imperial Shag",
  "Macquarie Island Imperial Shag",
  "Letter-winged Kite",
  "Tasmanian Wedge-tailed Eagle",
  "Papuan Brown Goshawk",
  "Christmas Island Goshawk",
  "Red Goshawk",
  "Tasmanian Masked Owl",
  "Northern Masked Owl",
  "Tiwi Masked Owl",
  "Papuan Barking Owl",
  "Southern Barking Owl",
  "Tasman Bookook",
  "Norfolk Island Boobook",
  "Christmas Island Hawk-Owl",
  "Tasmanian Azure Kingfisher",
  "Norfolk Island Sacred Kingfisher",
  "Grey Falcon",
  "South-eastern Red-tailed Black-Cockatoo",
  "Forest Red-tailed Black-Cockatoo",
  "Kangaroo Island Glossy Black-Cockatoo",
  "South-eastern Glossy Black-Cockatoo",
  "Baudin's Black-Cockatoo",
  "Carnaby's Black-Cockatoo",
  "Palm Cockatoo",
  "Australian Palm Cockatoo",
  "Eastern Major Mitchell's Cockatoo",
  "Superb Parrot",
  "Eastern Regent Parrot",
  "Princess Parrot",
  "Eclectus Parrot",
  "Cape York Eclectus Parrot",
  "Golden-shouldered Parrot",
  "King Island Green Rosella",
  "Swift Parrot",
  "Red-fronted Parakeet",
  "Norfolk Island Green Parrot",
  "Western Ground Parrot",
  "Mainland Ground Parrot",
  "Night Parrot",
  "Orange-bellied Parrot",
  "Coxen's Fig-Parrot",
  "Albert's Lyrebird",
  "Rufous Scrub-bird",
  "Southern Rufous Scrub-bird",
  "Northern Rufous Scrub-bird",
  "Noisy Scrub-bird",
  "Fawn-breasted Bowerbird",
  "South-eastern Brown Treecreeper",
  "Western Purple-crowned Fairy-wren",
  "Eastern Purple-crowned Fairy-wren",
  "Shark Bay Variegated Fairy-wren",
  "Barrow Island White-winged Fairy-wren",
  "Dirk Hartog White-winged Fairy-wren",
  "Dirk Hartog Southern Emu-wren",
  "Fleurieu Peninsula Southern Emu-wren",
  "Eyre Peninsula Southern Emu-wren",
  "Mallee Emu-wren",
  "Bulloo Grey Grasswren",
  "White-throated Grasswren",
  "Carpentarian Grasswren",
  "Short-tailed Grasswren",
  "Flinders Ranges Short-tailed Grasswren",
  "Gawler Ranges Short-tailed Grasswren",
  "Black Grasswren",
  "Eyre Peninsula Western Grasswren",
  "Thick-billed Grasswren",
  "Curawinya Thick-billed Grasswren",
  "Grey Range Thick-billed Grasswren",
  "Flinders Ranges Thick-billed Grasswren",
  "Eastern Bristlebird",
  "Southern Eastern Bristlebird",
  "Northern Eastern Bristlebird",
  "Western Bristlebird",
  "Painted Honeyeater",
  "South-eastern Black-chinned Honeyeater",
  "Capricorn Yellow Chat",
  "Alligator Rivers Yellow Chat",
  "Regent Honeyeater",
  "King Island Yellow Wattlebird",
  "Helmeted Honeyeater",
  "Black-eared Miner",
  "Forty-spotted Pardalote",
  "Norfolk Island Gerygone",
  "Mount Lofty Ranges Chestnut-rumped Heathwren",
  "Flinders Ranges Chestnut-rumped Heathwren",
  "Dorre Rufous Fieldwren",
  "Dirk Hartog Rufous Fieldwren",
  "King Island Scrubtit",
  "Chestnut-breasted Whiteface",
  "King Island Brown Thornbill",
  "Samphire Thornbill",
  "Mt Lofty Ranges Spotted Quail-thrush",
  "Red-lored Whistler",
  "Lord Howe Golden Whistler",
  "Norfolk Island Golden Whistler",
  "Kangaroo Island Western Whipbird",
  "Mallee Western Whipbird",
  "Western Heath Western Whipbird",
  "King Island Black Currawong",
  "Lord Howe Pied Currawong",
  "Norfolk Island Grey Fantail",
  "Flame Robin",
  "Norfolk Island Scarlet Robin",
  "South-eastern Hooded Robin",
  "Tiwi Hooded Robin",
  "White-bellied Crimson Finch",
  "Cape York Star Finch",
  "Southern Star Finch",
  "Southern Black-throated Finch",
  "Gouldian Finch",
  "Tiwi Horsfield's Bushlark",
  "Christmas Island White-eye",
  "Lord Howe Silvereye",
  "White-chested White-eye",
  "Slender-billed White-eye",
  "Singing Starling",
  "South Australian Bassian Thrush",
  "Island Thrush",
  "Christmas Island Thrush",
  "",
  "Feathertail Glider",
  "Rufous Bettong",
  "Kultarr",
  "Rusty Antechinus",
  "Agile Antechinus",
  "Silver-headed Antechinus",
  "Black-tailed Antechinus",
  "Fawn Antechinus",
  "Yellow-footed Antechinus",
  "",
  "Mardo",
  "",
  "Atherton Antechinus",
  "Cinnamon Antechinus",
  "Mainland Dusky Antechinus",
  "Swamp Antechinus",
  "Swamp Antechinus (coastal Victoria and far south-eastern South Australia)",
  "",
  "Buff-footed Antechinus",
  "Brown Antechinus",
  "Subtropical Antechinus",
  "Tasmanian Dusky Antechinus",
  "Dusky Antechinus (Grampians)",
  "",
  "",
  "Tasman Peninsula Dusky Antechinus",
  "Australian Fur Seal",
  "",
  "Subantarctic Fur Seal",
  "New Zealand Fur Seal",
  "",
  "Antarctic Fur Seal",
  "White-striped Freetail Bat",
  "Dwarf Minke Whale",
  "Antarctic Minke Whale",
  "Sei Whale",
  "",
  "",
  "Bryde's Whale",
  "Blue Whale",
  "Pygmy Blue Whale",
  "",
  "Omura's Whale",
  "Fin Whale",
  "",
  "Arnoux's Beaked Whale",
  "Desert Bettong",
  "Eastern Bettong",
  "",
  "",
  "Boodie",
  "Boodie (Barrow Island)",
  "Boodie (inland)",
  "Boodie (Shark Bay)",
  "Woylie",
  "",
  "",
  "Nullarbor Dwarf Bettong",
  "Northern Bettong",
  "Mountain Pygmy-possum",
  "Desert Rat-kangaroo",
  "Dingo",
  "Dingo",
  "Pygmy Right Whale",
  "Long-tailed Pygmy-possum",
  "",
  "Western Pygmy-possum",
  "Little Pygmy-possum",
  "Little Pygmy-possum (South Australia, Victoria)",
  "",
  "Eastern Pygmy-possum",
  "",
  "",
  "Northern Freetail Bat",
  "",
  "Pig-footed Bandicoot",
  "Large-eared Pied Bat",
  "Gould's Wattled Bat",
  "Chocolate Wattled Bat",
  "Hoary Wattled Bat",
  "Little Pied Bat",
  "White-footed Rabbit-rat",
  "Capricorn Rabbit-rat",
  "Brush-tailed Rabbit-rat",
  "Brush-tailed Rabbit-rat (Tiwi Islands)",
  "Brush-tailed Rabbit-rat (Kimberley, Top End)",
  "Christmas Island Shrew",
  "Striped Possum",
  "",
  "Brush-tailed Mulgara",
  "Crest-tailed Mulgara",
  "Kaluta",
  "Kowari",
  "Chuditch, Western Quoll",
  "Northern Quoll",
  "Spotted-tailed Quoll",
  "Spotted-tailed Quoll (north Queensland)",
  "Spotted-tailed Quoll (south-eastern mainland)",
  "Spotted-tailed Quoll (Tasmania)",
  "Eastern Quoll",
  "",
  "Common Dolphin",
  "",
  "Bennett's Tree-kangaroo",
  "Lumholtz's Tree-kangaroo",
  "Bare-backed Fruit Bat",
  "Dugong",
  "Long-nosed Echymipera",
  "",
  "Southern Right Whale",
  "Western False Pipistrelle",
  "Eastern False Pipistrelle",
  "Pygmy Killer Whale",
  "Short-finned Pilot Whale",
  "Long-finned Pilot Whale",
  "",
  "Risso's Dolphin",
  "Leadbeater's Possum",
  "Lemuroid Ringtail Possum",
  "Dusky Leaf-nosed Bat",
  "Dusky Leaf-nosed Bat (north Queensland), Eastern Dusky Leaf-nosed Bat",
  "",
  "Fawn Leaf-nosed Bat",
  "",
  "Diadem Leaf-nosed Bat",
  "Diadem Leaf-nosed Bat (Queensland)",
  "Arnhem Leaf-nosed Bat",
  "Semon's Leaf-nosed Bat",
  "Northern Leaf-nosed Bat",
  "Water-rat, Rakali",
  "Leopard Seal",
  "Southern Bottle-nosed Whale",
  "Musky Rat-kangaroo",
  "Longman's Beaked Whale",
  "Golden Bandicoot",
  "Golden Bandicoot (mainland)",
  "Golden Bandicoot (Barrow Island)",
  "Northern Brown Bandicoot",
  "",
  "",
  "Southern Brown Bandicoot",
  "Quenda",
  "Southern Brown Bandicoot (Nuyts Archipelago)",
  "Southern Brown Bandicoot (south-eastern)",
  "Cape York Brown Bandicoot",
  "Pygmy Sperm Whale",
  "Dwarf Sperm Whale",
  "Fraser's Dolphin",
  "Hourglass Dolphin",
  "Dusky Dolphin",
  "",
  "Kuluwarri, Central Hare-wallaby",
  "Spectacled Hare-wallaby",
  "Spectacled Hare-wallaby (Barrow Island)",
  "Spectacled Hare-wallaby (mainland)",
  "Rufous Hare-wallaby",
  "Rufous Hare-wallaby (Shark Bay)",
  "Mala",
  "Rufous Hare-wallaby (Dorre Island)",
  "Rufous Hare-wallaby (south-western)",
  "Eastern Hare-wallaby",
  "Banded Hare-wallaby",
  "Banded Hare-wallaby (mainland)",
  "Banded Hare-wallaby (eastern)",
  "",
  "Northern Hairy-nosed Wombat",
  "Northern Hairy-nosed Wombat (NSW, south-eastern Queensland)",
  "Northern Hairy-nosed Wombat (central Queensland)",
  "Southern Hairy-nosed Wombat",
  "Central Short-tailed Mouse",
  "Northern Short-tailed Mouse",
  "Lesser Stick-nest Rat",
  "Greater Stick-nest Rat",
  "Weddell Seal",
  "Southern Right Whale Dolphin",
  "Crabeater Seal",
  "Ghost Bat",
  "Northern Blossom Bat",
  "",
  "Tammar (western)",
  "Tammar (South Australia)",
  "Western Grey Kangaroo",
  "Eastern Grey Kangaroo",
  "Barrow Island Euro",
  "",
  "",
  "",
  "Bilby",
  "Yallara, Lesser Bilby",
  "Broad-toothed Rat",
  "Broad-toothed Rat (Tasmania)",
  "Broad-toothed Rat (mainland)",
  "Humpback Whale",
  "Grassland Melomys",
  "Cape York Melomys",
  "Fawn-footed Melomys",
  "Bramble Cay Melomys",
  "Black-footed Tree-rat",
  "Black-footed Tree-rat (Kimberley and mainland Northern Territory)",
  "Black-footed Tree-rat (Melville Island)",
  "Black-footed Tree-rat (north Queensland)",
  "Golden-backed Tree-rat",
  "Andrews' Beaked Whale",
  "Blainville's Beaked Whale",
  "Ginko-toothed Beaked Whale",
  "Gray's Beaked Whale",
  "Hector's Beaked Whale",
  "Strap-toothed Beaked Whale",
  "True's Beaked Whale",
  "East Coast Free-tailed Bat",
  "Little Bent-winged Bat",
  "",
  "",
  "Southern Bent-winged Bat",
  "Eastern Bent-winged bat",
  "Northern Bent-winged Bat",
  "Southern Elephant Seal",
  "Flute-nosed Bat",
  "",
  "Large-footed Myotis",
  "Numbat",
  "Australian Sea-lion",
  "Wongai Ningaui",
  "Pilbara Ningaui",
  "Southern Ningaui",
  "Toolache Wallaby",
  "Agile Wallaby",
  "Black-striped Wallaby",
  "Tammar",
  "Western Brush Wallaby",
  "Parma Wallaby",
  "Whiptail Wallaby",
  "Red-necked Wallaby",
  "Spinifex Hopping-mouse",
  "Short-tailed Hopping-mouse",
  "Northern Hopping-mouse",
  "Fawn Hopping-mouse",
  "Dusky Hopping-mouse",
  "Long-tailed Hopping-mouse",
  "Large-eared Hopping-mouse",
  "Mitchell's Hopping-mouse",
  "Darling Downs Hopping-mouse",
  "Broad-cheeked Hopping-mouse",
  "Kakarratul",
  "Itjaritjari",
  "Eastern Tube-nosed Bat",
  "Northern Long-eared Bat",
  "Eastern Long-eared Bat",
  "South-eastern Long-eared Bat",
  "Pallid Long-eared Bat",
  "Lesser Long-eared Bat",
  "Gould's Long-eared Bat",
  "Lord Howe Long-eared Bat",
  "Western Long-eared Bat",
  "",
  "Central Long-eared Bat",
  "Tasmanian Long-eared Bat",
  "Pygmy Long-eared Bat",
  "Ross Seal",
  "Bridled Nailtail Wallaby",
  "Crescent Nailtail Wallaby",
  "Northern Nailtail Wallaby",
  "Australian Snubfin Dolphin",
  "Killer Whale",
  "Platypus",
  "Antilopine Wallaroo",
  "Black Wallaroo",
  "Euro, Common Wallaroo",
  "Barrow Island Wallaroo",
  "Red Kangaroo",
  "Western Little Free-tailed Bat",
  "Cape York Free-tailed Bat",
  "South-western Free-tailed Bat",
  "",
  "Inland Free-tailed Bat",
  "South-eastern Free-tailed Bat",
  "Eastern Free-tailed Bat",
  "Dibbler",
  "Melon-headed Whale",
  "Western Barred Bandicoot",
  "",
  "Western Barred Bandicoot (eastern)",
  "Desert Bandicoot",
  "Liverpool Plains Striped Bandicoot",
  "Eastern Barred Bandicoot",
  "Eastern Barred Bandicoot (Tasmania)",
  "Eastern Barred Bandicoot (Victoria)",
  "Marl",
  "Long-nosed Bandicoot",
  "South-eastern Striped Bandicoot",
  "Northern Long-nosed Bandicoot",
  "Nullarbor Barred bandicoot",
  "Central Greater Glider",
  "Northern Greater Glider",
  "Southern Greater Glider",
  "Greater Glider (north-eastern Queensland)",
  "Greater Glider (south-eastern)",
  "Yellow-bellied Glider",
  "Yellow-bellied Glider (south-eastern)",
  "Yellow-bellied Glider (Wet Tropics)",
  "Sugar Glider",
  "",
  "",
  "",
  "Mahogany Glider",
  "Squirrel Glider",
  "Allied Rock-wallaby",
  "Short-eared Rock-wallaby",
  "",
  "Short-eared Rock-wallaby (Victoria River District)",
  "Monjon",
  "Cape York Rock-wallaby",
  "Nabarlek",
  "Nabarlek (Top End)",
  "Nabarlek (Victoria River District)",
  "Nabarlek (Kimberley)",
  "Godman's Rock-wallaby",
  "Herbert's Rock-wallaby",
  "Unadorned Rock-wallaby",
  "Black-footed Rock-wallaby",
  "Recherche Rock-wallaby",
  "Black-flanked Rock-wallaby",
  "Black-footed Rock-wallaby (MacDonnell Ranges), Warru",
  "Pearson Island Rock-wallaby",
  "Black-footed Rock-wallaby (west Kimberley)",
  "Mareeba Rock-wallaby",
  "Brush-tailed Rock-wallaby",
  "Proserpine Rock-wallaby",
  "Purple-necked Rock-wallaby",
  "Rothschild's Rock-wallaby",
  "Mount Claro Rock-wallaby, Sharman's Rock-wallaby",
  "Eastern Short-eared Rock-wallaby",
  "Yellow-footed Rock-wallaby",
  "Yellow-footed Rock-wallaby (central-western Queensland)",
  "Yellow-footed Rock-wallaby (South Australia, New South Wales)",
  "Wogoit, Rock Ringtail Possum",
  "Southern Common Cuscus",
  "Red-tailed Phascogale",
  "Northern Brush-tailed Phascogale",
  "Brush-tailed Phascogale",
  "Brush-tailed Phascogale (Kimberley)",
  "Brush-tailed Phascogale (eastern)",
  "Wambenga",
  "Koala",
  "Koala (combined populations of Qld, NSW and the ACT)",
  "New Zealand Sea-lion",
  "Spectacled Porpoise",
  "Golden-tipped Bat",
  "Sperm Whale",
  "Forest Pipistrelle",
  "Christmas  Island Pipistrelle",
  "Northern Pipistrelle",
  "Giles' Planigale",
  "Long-tailed Planigale",
  "Common Planigale",
  "Narrow-nosed Planigale",
  "Tree Mouse",
  "Gilbert's Potoroo",
  "Long-footed Potoroo",
  "Broad-faced Potoroo",
  "Long-nosed Potoroo",
  "Long-nosed Potoroo (Tasmania)",
  "Long-nosed Potoroo (south-eastern Queensland, north-eastern New South Wales)",
  "Long-nosed Potoroo (south-eastern mainland)",
  "Sandstone Antechinus",
  "Fat-tailed Antechinus",
  "Carpentarian Antechinus",
  "Ningbing Antechinus",
  "Rory's Antechinus",
  "Woolley's Antechinus",
  "Western Ringtail Possum",
  "Common Ringtail Possum",
  "",
  "",
  "",
  "",
  "Green Ringtail Possum",
  "Daintree Ringtail Possum",
  "Herbert River Ringtail Possum",
  "Ash-grey Mouse",
  "Silky Mouse",
  "Long-eared Mouse",
  "Plains Mouse",
  "Bolam's Mouse",
  "Kakadu Pebble-mouse",
  "Western Pebble-mouse",
  "Delicate Mouse",
  "Desert Mouse",
  "Djoongari, Shark Bay Mouse",
  "Smoky Mouse",
  "Blue-grey Mouse",
  "Gould's Mouse",
  "Eastern Chestnut Mouse",
  "Sandy Inland Mouse",
  "Long-tailed Mouse",
  "Central Pebble-mouse",
  "Western Chestnut Mouse",
  "New Holland Mouse",
  "Western Mouse",
  "Hastings River Mouse",
  "Eastern Pebble-mouse",
  "Pilliga Mouse",
  "Heath Mouse",
  "False Killer Whale",
  "Black Flying-fox",
  "",
  "Dusky Flying-fox",
  "Spectacled Flying-fox",
  "",
  "Large-eared Flying-fox",
  "",
  "Christmas Island Flying-fox",
  "Grey-headed Flying-fox",
  "Little Red Flying-fox",
  "Dusky Rat",
  "Bush Rat",
  "",
  "",
  "",
  "",
  "Cape York Rat",
  "",
  "",
  "Swamp Rat",
  "",
  "",
  "",
  "Maclear's Rat",
  "Bulldog Rat",
  "Canefield Rat",
  "Pale Field-rat",
  "",
  "Pale Field-rat (north-western)",
  "Long-haired Rat",
  "Lesser Large-eared Horseshoe-bat",
  "Eastern Horseshoe-bat",
  "",
  "",
  "Greater Large-eared Horseshoe-bat",
  "Orange Leaf-nosed Bat",
  "Pilbara Leaf-nosed Bat",
  "",
  "Yellow-bellied Sheath-tailed Bat",
  "Cape York Sheath-tailed Bat, Papuan Sheath-tailed Bat",
  "Bare-rumped Sheath-tailed Bat",
  "",
  "Tasmanian Devil",
  "Greater Broad-nosed Bat",
  "Inland Broad-nosed Bat",
  "Little Broad-nosed Bat",
  "Eastern Broad-nosed Bat",
  "Northern Broad-nosed Bat",
  "Bristle-faced Free-tailed Bat",
  "Quokka",
  "Chestnut Dunnart",
  "Kakadu Dunnart",
  "Butler's Dunnart",
  "Fat-tailed Dunnart",
  "Little Long-tailed Dunnart",
  "Julia Creek Dunnart",
  "Gilbert's Dunnart",
  "White-tailed Dunnart",
  "Grey-bellied Dunnart",
  "Kangaroo Island Dunnart",
  "Boullanger Island Dunnart",
  "Hairy-footed Dunnart",
  "White-footed Dunnart",
  "White-footed Dunnart (north Queensland)",
  "White-footed Dunnart (south-eastern mainland)",
  "",
  "Long-tailed Dunnart",
  "Stripe-faced Dunnart",
  "",
  "",
  "",
  "Common Dunnart",
  "",
  "Common Dunnart (north Queensland)",
  "Ooldea Dunnart",
  "Sandhill Dunnart",
  "Red-cheeked Dunnart",
  "",
  "",
  "Lesser Hairy-footed Dunnart",
  "",
  "Australian Hump-backed Dolphin",
  "",
  "Common Spotted Cuscus",
  "Pantropical Spotted Dolphin",
  "",
  "Striped Dolphin",
  "Long-snouted Spinner Dolphin",
  "",
  "Dwarf Spinner Dolphin",
  "Rough-toothed Dolphin",
  "Eastern Blossom Bat",
  "",
  "Short-beaked Echidna",
  "",
  "",
  "Kangaroo Island Echidna",
  "",
  "Coastal Sheath-tailed Bat",
  "Common Sheath-tailed Bat",
  "Hill's Sheath-tailed Bat",
  "Arnhem Sheath-tailed Bat",
  "Troughton's Sheath-tailed Bat",
  "Honey Possum",
  "Shepherd's Beaked Whale",
  "Thylacine",
  "Tasmanian Pademelon, Rufous-bellied Pademelon",
  "Red-legged Pademelon",
  "",
  "",
  "",
  "Red-necked Pademelon",
  "Short-eared Brushtail Possum",
  "Mountain Brushtail Possum",
  "Common Brushtail Possum",
  "Common Brushtail Possum (north-western)",
  "Kumarl",
  "",
  "Long-beaked Bottle-nosed Dolphin",
  "Burrunan Dolphin",
  "Bottlenose Dolphin",
  "",
  "Giant White-tailed Rat",
  "",
  "Pygmy White-tailed Rat",
  "Northern Cave Bat",
  "Yellow-lipped Cave Bat",
  "Finlayson's Cave Bat, Inland Cave Bat",
  "Southern Forest Bat",
  "Inland Forest Bat",
  "Large Forest Bat",
  "Eastern Forest Bat",
  "Eastern Cave Bat",
  "Little Forest Bat",
  "Common Wombat",
  "",
  "",
  "Common Wombat (Bass Strait Islands)",
  "Swamp Wallaby",
  "Scaly-tailed Possum",
  "Water Mouse",
  "Western Long-beaked Echidna",
  "Cuvier's Beaked Whale",
  "Common Rock-rat",
  "Arnhem Rock-rat",
  "Carpentarian Rock-rat",
  "Central Rock-rat",
  "Kimberley Rock-rat",
  "",
  "",
  "",
  "",
  "Blunt wattle",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Gibson wattle",
  "",
  "",
  "",
  "",
  "",
  "Chidarcooping wattle",
  "",
  "",
  "",
  "",
  "",
  "Wongan gully wattle",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Kundip wattle",
  "",
  "",
  "",
  "Wundowlin wattle; ghost wattle",
  "",
  "",
  "",
  "",
  "",
  "",
  "Tangled wattle",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Isis tamarind",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Giant andersonia",
  "",
  "Two Peoples Bay Andersonia",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Matchstick banksia",
  "",
  "",
  "Kamballup banksia",
  "",
  "Stirling Range dryandra",
  "",
  "",
  "Granite banksia",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Freycinet heath; bearded heath",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Crimson spider-orchid",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Dunsborough spider-orchid",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Wrinkled dollybush",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Prostrate flame pea",
  "",
  "",
  "",
  "",
  "",
  "",
  "Trigwell's rulingia",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Drummond's conostylis",
  "",
  "",
  "Grass conostylis",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Mogumber bell",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Gillam's darwinia",
  "",
  "",
  "",
  "Abba bell",
  "Witter's mountain bell",
  "",
  "",
  "",
  "",
  "Cunderdin daviesia",
  "",
  "",
  "Wongan cactus",
  "Maroon-flowered Daviesia",
  "",
  "",
  "Norseman pea",
  "Paddle-leaf Daviesia",
  "",
  "Stirling Range daviesia",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Milky emu-bush",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Gaping leek orchid",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Yellow-leafed gastrolobium",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Split-leaved grevillea",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Pyathara grevillea",
  "",
  "",
  "",
  "",
  "",
  "Corrigin grevillea",
  "",
  "",
  "",
  "",
  "",
  "",
  "Net-veined gyrostemon",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Hook-leaf isopogon; Albany cone-bush",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Fairall's honeysuckle",
  "Round-leaf honeysuckle",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Stirling Range beard-heath",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Bulberin nut",
  "",
  "",
  "Keighery's macarthuria",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Pineapple Zamia; Twisted Ricketts Wood",
  "",
  "",
  "",
  "",
  "Hairy-fruited billardiera",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Angus's onion orchid",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Small-flowered snottygobble",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "White-flowered Philotheca",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Wyalkatchem Foxglove",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Turnip copperburr",
  "",
  "",
  "",
  "Stiff groundsel",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Wongan Hills triggerplant",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Bancrofts symonanthus",
  "",
  "Quartz-loving synaphea",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Granite tetratheca",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Belyando cobblers peg",
  "",
  "",
  "",
  "",
  "Glossy spice bush",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "White featherflower",
  "",
  "",
  "",
  "",
  "Hughan's featherflower",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Long-flowered nancy",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Bago Leek-orchid",
  "",
  "Kelton's leek-orchid",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Spiral-pod wattle",
  "",
  "Hairy-stemmed zig-zag wattle",
  "",
  "",
  "",
  "Swamp honeypot",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Swamp starflower",
  "",
  "",
  "Irwin's conostylis",
  "",
  "",
  "Western cyphanthera",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Prickly honeysuckle",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Button wrinklewort",
  "",
  "",
  "",
  "",
  "Green Hill thomasia",
  "",
  "",
  "",
  "",
  "",
  "Scaly-leaved featherflower",
  "Wongan featherflower",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "Bago Leek-orchid",
  "",
  "Kelton's leek-orchid",
  "",
  "Hopetoun beard-orchid",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  ""
};
final String[] SCIENTIFIC_NAME = new String[] {
  "Casuarius casuarius",
  "Casuarius casuarius johnsonii",
  "Oxyura australis",
  "Cereopsis novaehollandiae grisea",
  "Leipoa ocellata",
  "Petrophassa albipennis boothi",
  "Geophaps scripta scripta",
  "Geophaps smithii",
  "Geophaps smithii blaauwi",
  "Geophaps smithii smithii",
  "Chalcophaps indica",
  "Chalcophaps indica natalis",
  "Ducula whartoni",
  "Collocalia esculenta",
  "Collocalia esculenta natalis",
  "Hypotaenidia sylvestris",
  "Hypotaenidia philippensis andrewsi",
  "Chionis minor",
  "Chionis minor nasicornis",
  "Pluvialis squatarola",
  "Pluvialis squatarola squatarola",
  "Charadrius mongolus",
  "Charadrius mongolus mongolus",
  "Charadrius mongolus stegmanni",
  "Charadrius leschenaultii",
  "Charadrius leschenaultii leschenaultii",
  "Thinornis cucullatus",
  "Thinornis cucullatus cucullatus",
  "Pedionomus torquatus",
  "Rostratula australis",
  "Numenius phaeopus variegatus",
  "Numenius madagascariensis",
  "Limosa lapponica baueri",
  "Limosa lapponica menzbieri",
  "Limosa limosa",
  "Limosa limosa melanuroides",
  "Arenaria interpres",
  "Arenaria interpres interpres",
  "Calidris tenuirostris",
  "Calidris canutus",
  "Calidris canutus piersmai",
  "Calidris canutus rogersi",
  "Calidris ferruginea",
  "Calidris ruficollis",
  "Limnodromus semipalmatus",
  "Xenus cinereus",
  "Turnix melanogaster",
  "Turnix varius scintillans",
  "Turnix olivii",
  "Anous tenuirostris",
  "Anous tenuirostris melanops",
  "Sternula nereis",
  "Sternula nereis exsul",
  "Sternula nereis nereis",
  "Sterna vittata bethunei",
  "Sterna vittata vittata",
  "Phaethon rubricauda",
  "Phaethon rubricauda westralis",
  "Phaethon lepturus",
  "Phaethon lepturus fulvus",
  "Phaethon lepturus lepturus",
  "Pygoscelis papua",
  "Pygoscelis papua papua",
  "Eudyptes chrysolophus",
  "Eudyptes schlegeli",
  "Eudyptes chrysocome",
  "Eudyptes chrysocome filholi",
  "Oceanites oceanicus oceanicus",
  "Garrodia nereis",
  "Fregetta grallaria",
  "Fregetta grallaria grallaria",
  "Diomedea exulans",
  "Diomedea antipodensis",
  "Diomedea antipodensis gibsoni",
  "Diomedea amsterdamensis",
  "Diomedea dabbenena",
  "Diomedea sanfordi",
  "Diomedea epomophora",
  "Phoebetria palpebrata",
  "Phoebetria fusca",
  "Thalassarche carteri",
  "Thalassarche chrysostoma",
  "Thalassarche melanophris",
  "Thalassarche impavida",
  "Thalassarche bulleri",
  "Thalassarche bulleri bulleri",
  "Thalassarche bulleri platei",
  "Thalassarche cauta",
  "Thalassarche steadi",
  "Thalassarche eremita",
  "Thalassarche salvini",
  "Hydrobates matsudairae",
  "Macronectes halli",
  "Macronectes giganteus",
  "Halobaena caerulea",
  "Pachyptila turtur subantarctica",
  "Pachyptila crassirostris flemingi",
  "Pterodroma leucoptera",
  "Pterodroma leucoptera caledonica",
  "Pterodroma leucoptera leucoptera",
  "Pterodroma solandri",
  "Pterodroma neglecta neglecta",
  "Pterodroma heraldica",
  "Pterodroma inexpectata",
  "Pterodroma cervicalis",
  "Pterodroma cervicalis cervicalis",
  "Pterodroma mollis",
  "Procellaria cinerea",
  "Procellaria aequinoctialis",
  "Procellaria westlandica",
  "Procellaria parkinsoni",
  "Ardenna bulleri",
  "Ardenna grisea",
  "Ardenna carneipes",
  "Calonectris leucomelas",
  "Puffinus huttoni",
  "Puffinus assimilis assimilis",
  "Pseudobulweria rostrata",
  "Pseudobulweria rostrata rostrata",
  "Pseudobulweria rostrata trouessarti",
  "Botaurus poiciloptilus",
  "Fregata andrewsi",
  "Papasula abbotti",
  "Sula dactylatra tasmani",
  "Phalacrocorax atriceps",
  "Phalacrocorax atriceps nivalis",
  "Phalacrocorax atriceps purpurascens",
  "Elanus scriptus",
  "Aquila audax fleayi",
  "Accipiter fasciatus dogwa",
  "Accipiter fasciatus natalis",
  "Erythrotriorchis radiatus",
  "Tyto novaehollandiae castanops",
  "Tyto novaehollandiae kimberli",
  "Tyto novaehollandiae melvillensis",
  "Ninox connivens assimilis",
  "Ninox connivens connivens",
  "Ninox novaeseelandiae",
  "Ninox novaeseelandiae undulata",
  "Ninox natalis",
  "Ceyx azureus diemenensis",
  "Todiramphus sanctus norfolkiensis",
  "Falco hypoleucos",
  "Calyptorhynchus banksii graptogyne",
  "Calyptorhynchus banksii naso",
  "Calyptorhynchus lathami halmaturinus",
  "Calyptorhynchus lathami lathami",
  "Zanda baudinii",
  "Zanda latirostris",
  "Probosciger aterrimus",
  "Probosciger aterrimus macgillivrayi",
  "Cacatua leadbeateri leadbeateri",
  "Polytelis swainsonii",
  "Polytelis anthopeplus monarchoides",
  "Polytelis alexandrae",
  "Eclectus roratus",
  "Eclectus roratus macgillivrayi",
  "Psephotellus chrysopterygius",
  "Platycercus caledonicus brownii",
  "Lathamus discolor",
  "Cyanoramphus novaezelandiae",
  "Cyanoramphus novaezelandiae cookii",
  "Pezoporus wallicus flaviventris",
  "Pezoporus wallicus wallicus",
  "Pezoporus occidentalis",
  "Neophema chrysogaster",
  "Cyclopsitta coxeni",
  "Menura alberti",
  "Atrichornis rufescens",
  "Atrichornis rufescens ferrieri",
  "Atrichornis rufescens rufescens",
  "Atrichornis clamosus",
  "Ptilonorhynchus cerviniventris",
  "Climacteris picumnus victoriae",
  "Malurus coronatus coronatus",
  "Malurus coronatus macgillivrayi",
  "Malurus lamberti bernieri",
  "Malurus leucopterus edouardi",
  "Malurus leucopterus leucopterus",
  "Stipiturus malachurus hartogi",
  "Stipiturus malachurus intermedius",
  "Stipiturus malachurus parimeda",
  "Stipiturus mallee",
  "Amytornis barbatus barbatus",
  "Amytornis woodwardi",
  "Amytornis dorotheae",
  "Amytornis merrotsyi",
  "Amytornis merrotsyi merrotsyi",
  "Amytornis merrotsyi pedleri",
  "Amytornis housei",
  "Amytornis textilis myall",
  "Amytornis modestus",
  "Amytornis modestus curnamona",
  "Amytornis modestus obscurior",
  "Amytornis modestus raglessi",
  "Dasyornis brachypterus",
  "Dasyornis brachypterus brachypterus",
  "Dasyornis brachypterus monoides",
  "Dasyornis longirostris",
  "Grantiella picta",
  "Melithreptus gularis gularis",
  "Epthianura crocea macgregori",
  "Epthianura crocea tunneyi",
  "Anthochaera phrygia",
  "Anthochaera paradoxa kingi",
  "Lichenostomus melanops cassidix",
  "Manorina melanotis",
  "Pardalotus quadragintus",
  "Gerygone modesta",
  "Calamanthus pyrrhopygius parkeri",
  "Calamanthus pyrrhopygius pedleri",
  "Calamanthus campestris dorrie",
  "Calamanthus campestris hartogi",
  "Acanthornis magna greenianus",
  "Aphelocephala pectoralis",
  "Acanthiza pusilla archibaldi",
  "Acanthiza iredalei rosinae",
  "Cinclosoma punctatum anachoreta",
  "Pachycephala rufogularis",
  "Pachycephala pectoralis contempta",
  "Pachycephala pectoralis xanthoprocta",
  "Psophodes nigrogularis lashmari",
  "Psophodes nigrogularis leucogaster",
  "Psophodes nigrogularis nigrogularis",
  "Strepera fuliginosa colei",
  "Strepera graculina crissalis",
  "Rhipidura fuliginosa pelzelni",
  "Petroica phoenicea",
  "Petroica multicolor multicolor",
  "Melanodryas cucullata cucullata",
  "Melanodryas cucullata melvillensis",
  "Neochmia phaeton evangelinae",
  "Neochmia ruficauda clarescens",
  "Neochmia ruficauda ruficauda",
  "Poephila cincta cincta",
  "Chloebia gouldiae",
  "Mirafra javanica melvillensis",
  "Zosterops natalis",
  "Zosterops lateralis tephropleurus",
  "Zosterops albogularis",
  "Zosterops tenuirostris",
  "Aplonis cantoroides",
  "Zoothera lunulata halmaturina",
  "Turdus poliocephalus",
  "Turdus poliocephalus erythropleurus",
  "Acrobates frontalis",
  "Acrobates pygmaeus",
  "Aepyprymnus rufescens",
  "Antechinomys laniger",
  "Antechinus adustus",
  "Antechinus agilis",
  "Antechinus argentus",
  "Antechinus arktos",
  "Antechinus bellus",
  "Antechinus flavipes",
  "Antechinus flavipes flavipes",
  "Antechinus flavipes leucogaster",
  "Antechinus flavipes rubeculus",
  "Antechinus godmani",
  "Antechinus leo",
  "Antechinus mimetes",
  "Antechinus minimus",
  "Antechinus minimus maritimus",
  "Antechinus minimus minimus",
  "Antechinus mysticus",
  "Antechinus stuartii",
  "Antechinus subtropicus",
  "Antechinus swainsonii",
  "Antechinus swainsonii insulanus",
  "Antechinus swainsonii mimetes",
  "Antechinus swainsonii swainsonii",
  "Antechinus vandycki",
  "Arctocephalus pusillus",
  "Arctocephalus pusillus doriferus",
  "Arctocephalus tropicalis",
  "Arctophoca australis",
  "Arctophoca australis forsteri",
  "Arctophoca gazella",
  "Austronomus australis",
  "Balaenoptera acutorostrata",
  "Balaenoptera bonaerensis",
  "Balaenoptera borealis",
  "Balaenoptera borealis schlegelii",
  "Balaenoptera brydei",
  "Balaenoptera edeni",
  "Balaenoptera musculus",
  "Balaenoptera musculus brevicauda",
  "Balaenoptera musculus intermedia",
  "Balaenoptera omura",
  "Balaenoptera physalus",
  "Balaenoptera physalus quoyi",
  "Berardius arnuxii",
  "Bettongia anhydra",
  "Bettongia gaimardi",
  "Bettongia gaimardi cuniculus",
  "Bettongia gaimardi gaimardi",
  "Bettongia lesueur",
  "Bettongia lesueur Barrow and Boodie Islands subspecies",
  "Bettongia lesueur graii",
  "Bettongia lesueur lesueur",
  "Bettongia penicillata",
  "Bettongia penicillata ogilbyi",
  "Bettongia penicillata penicillata",
  "Bettongia pusilla",
  "Bettongia tropica",
  "Burramys parvus",
  "Caloprymnus campestris",
  "Canis familiaris",
  "Canis lupus dingo",
  "Caperea marginata",
  "Cercartetus caudatus",
  "Cercartetus caudatus macrurus",
  "Cercartetus concinnus",
  "Cercartetus lepidus",
  "Cercartetus lepidus (South Australia, Victoria)",
  "Cercartetus lepidus (Tasmania)",
  "Cercartetus nanus",
  "Cercartetus nanus nanus",
  "Cercartetus nanus unicolor",
  "Chaerephon jobensis",
  "Chaerephon jobensis colonicus",
  "Chaeropus ecaudatus",
  "Chalinolobus dwyeri",
  "Chalinolobus gouldii",
  "Chalinolobus morio",
  "Chalinolobus nigrogriseus",
  "Chalinolobus picatus",
  "Conilurus albipes",
  "Conilurus capricornensis",
  "Conilurus penicillatus",
  "Conilurus penicillatus melibius",
  "Conilurus penicillatus penicillatus",
  "Crocidura trichura",
  "Dactylopsila trivirgata",
  "Dactylopsila trivirgata picata",
  "Dasycercus blythi",
  "Dasycercus cristicauda",
  "Dasykaluta rosamondae",
  "Dasyuroides byrnei",
  "Dasyurus geoffroii",
  "Dasyurus hallucatus",
  "Dasyurus maculatus",
  "Dasyurus maculatus gracilis",
  "Dasyurus maculatus maculatus (SE mainland population)",
  "Dasyurus maculatus maculatus (Tasmanian population)",
  "Dasyurus viverrinus",
  "Delphinus capensis",
  "Delphinus delphis",
  "Delphinus delphis delphis",
  "Dendrolagus bennettianus",
  "Dendrolagus lumholtzi",
  "Dobsonia magna",
  "Dugong dugon",
  "Echymipera rufescens",
  "Echymipera rufescens australis",
  "Eubalaena australis",
  "Falsistrellus mackenziei",
  "Falsistrellus tasmaniensis",
  "Feresa attenuata",
  "Globicephala macrorhynchus",
  "Globicephala melas",
  "Globicephala melas edwardii",
  "Grampus griseus",
  "Gymnobelideus leadbeateri",
  "Hemibelideus lemuroides",
  "Hipposideros ater",
  "Hipposideros ater aruensis",
  "Hipposideros ater gilberti",
  "Hipposideros cervinus",
  "Hipposideros cervinus cervinus",
  "Hipposideros diadema",
  "Hipposideros diadema reginae",
  "Hipposideros inornatus",
  "Hipposideros semoni",
  "Hipposideros stenotis",
  "Hydromys chrysogaster",
  "Hydrurga leptonyx",
  "Hyperoodon planifrons",
  "Hypsiprymnodon moschatus",
  "Indopacetus pacificus",
  "Isoodon auratus",
  "Isoodon auratus auratus",
  "Isoodon auratus barrowensis",
  "Isoodon macrourus",
  "Isoodon macrourus macrourus",
  "Isoodon macrourus torosa",
  "Isoodon obesulus",
  "Isoodon obesulus fusciventer",
  "Isoodon obesulus nauticus",
  "Isoodon obesulus obesulus",
  "Isoodon peninsulae",
  "Kogia breviceps",
  "Kogia sima",
  "Lagenodelphis hosei",
  "Lagenorhynchus cruciger",
  "Lagenorhynchus obscurus",
  "Lagenorhynchus obscurus posidonia",
  "Lagorchestes asomatus",
  "Lagorchestes conspicillatus",
  "Lagorchestes conspicillatus conspicillatus",
  "Lagorchestes conspicillatus leichardti",
  "Lagorchestes hirsutus",
  "Lagorchestes hirsutus bernieri",
  "Lagorchestes hirsutus Central Australian subspecies",
  "Lagorchestes hirsutus dorreae",
  "Lagorchestes hirsutus hirsutus",
  "Lagorchestes leporides",
  "Lagostrophus fasciatus",
  "Lagostrophus fasciatus albipilis",
  "Lagostrophus fasciatus baudinettei",
  "Lagostrophus fasciatus fasciatus",
  "Lasiorhinus krefftii",
  "Lasiorhinus krefftii barnardi",
  "Lasiorhinus krefftii gillespiei",
  "Lasiorhinus latifrons",
  "Leggadina forresti",
  "Leggadina lakedownensis",
  "Leporillus apicalis",
  "Leporillus conditor",
  "Leptonychotes weddellii",
  "Lissodelphis peronii",
  "Lobodon carcinophagus",
  "Macroderma gigas",
  "Macroglossus minimus",
  "Macroglossus minimus nanus",
  "Macropus eugenii derbianus",
  "Macropus eugenii eugenii",
  "Macropus fuliginosus",
  "Macropus giganteus",
  "Macropus robustus isabellinus",
  "Macropus robustus robustus",
  "Macropus rufogriseus banksianus",
  "Macropus rufogriseus rufogriseus",
  "Macrotis lagotis",
  "Macrotis leucura",
  "Mastacomys fuscus",
  "Mastacomys fuscus fuscus",
  "Mastacomys fuscus mordicus",
  "Megaptera novaeangliae",
  "Melomys burtoni",
  "Melomys capensis",
  "Melomys cervinipes",
  "Melomys rubicola",
  "Mesembriomys gouldii",
  "Mesembriomys gouldii gouldii",
  "Mesembriomys gouldii melvillensis",
  "Mesembriomys gouldii rattoides",
  "Mesembriomys macrurus",
  "Mesoplodon bowdoini",
  "Mesoplodon densirostris",
  "Mesoplodon ginkgodens",
  "Mesoplodon grayi",
  "Mesoplodon hectori",
  "Mesoplodon layardii",
  "Mesoplodon mirus",
  "Micronomus norfolkensis",
  "Miniopterus australis",
  "Miniopterus australis australis",
  "Miniopterus orianae",
  "Miniopterus orianae bassanii",
  "Miniopterus orianae oceanensis",
  "Miniopterus orianae orianae",
  "Mirounga leonina",
  "Murina florium",
  "Murina florium florium",
  "Myotis macropus",
  "Myrmecobius fasciatus",
  "Neophoca cinerea",
  "Ningaui ridei",
  "Ningaui timealeyi",
  "Ningaui yvonneae",
  "Notamacropus greyi",
  "Notomacropus agilis",
  "Notomacropus dorsalis",
  "Notomacropus eugenii",
  "Notomacropus irma",
  "Notomacropus parma",
  "Notomacropus parryi",
  "Notomacropus rufogriseus",
  "Notomys alexis",
  "Notomys amplus",
  "Notomys aquilo",
  "Notomys cervinus",
  "Notomys fuscus",
  "Notomys longicaudatus",
  "Notomys macrotis",
  "Notomys mitchellii",
  "Notomys mordax",
  "Notomys robustus",
  "Notoryctes caurinus",
  "Notoryctes typhlops",
  "Nyctimene robinsoni",
  "Nyctophilus arnhemensis",
  "Nyctophilus bifax",
  "Nyctophilus corbeni",
  "Nyctophilus daedalus",
  "Nyctophilus geoffroyi",
  "Nyctophilus gouldi",
  "Nyctophilus howensis",
  "Nyctophilus major",
  "Nyctophilus major major",
  "Nyctophilus major tor",
  "Nyctophilus sherrini",
  "Nyctophilus walkeri",
  "Ommatophoca rossii",
  "Onychogalea fraenata",
  "Onychogalea lunata",
  "Onychogalea unguifera",
  "Orcaella heinsohni",
  "Orcinus orca",
  "Ornithorhynchus anatinus",
  "Osphranter antilopinus",
  "Osphranter bernardus",
  "Osphranter robustus",
  "Osphranter robustus isabellinus",
  "Osphranter rufus",
  "Ozimops cobourgianus",
  "Ozimops halli",
  "Ozimops kitcheneri",
  "Ozimops lumsdenae",
  "Ozimops petersi",
  "Ozimops planiceps",
  "Ozimops ridei",
  "Parantechinus apicalis",
  "Peponocephala electra",
  "Perameles bougainville",
  "Perameles bougainville bougainville",
  "Perameles bougainville fasciata",
  "Perameles eremiana",
  "Perameles fasciata",
  "Perameles gunnii",
  "Perameles gunnii gunnii",
  "Perameles gunnii Victorian subspecies",
  "Perameles myosorus",
  "Perameles nasuta",
  "Perameles notina",
  "Perameles pallescens",
  "Perameles papillon",
  "Petauroides armillatus",
  "Petauroides minor",
  "Petauroides volans",
  "Petauroides volans minor",
  "Petauroides volans volans",
  "Petaurus australis",
  "Petaurus australis australis",
  "Petaurus australis Wet Tropics subspecies",
  "Petaurus breviceps",
  "Petaurus breviceps ariel",
  "Petaurus breviceps breviceps",
  "Petaurus breviceps longicaudatus",
  "Petaurus gracilis",
  "Petaurus norfolcensis",
  "Petrogale assimilis",
  "Petrogale brachyotis",
  "Petrogale brachyotis brachyotis",
  "Petrogale brachyotis victoriae",
  "Petrogale burbidgei",
  "Petrogale coenensis",
  "Petrogale concinna",
  "Petrogale concinna canescens",
  "Petrogale concinna concinna",
  "Petrogale concinna monastria",
  "Petrogale godmani",
  "Petrogale herberti",
  "Petrogale inornata",
  "Petrogale lateralis",
  "Petrogale lateralis hacketti",
  "Petrogale lateralis lateralis",
  "Petrogale lateralis MacDonnell Ranges race",
  "Petrogale lateralis pearsoni",
  "Petrogale lateralis West Kimberley race",
  "Petrogale mareeba",
  "Petrogale penicillata",
  "Petrogale persephone",
  "Petrogale purpureicollis",
  "Petrogale rothschildi",
  "Petrogale sharmani",
  "Petrogale wilkinsi",
  "Petrogale xanthopus",
  "Petrogale xanthopus celeris",
  "Petrogale xanthopus xanthopus",
  "Petropseudes dahli",
  "Phalanger mimicus",
  "Phascogale calura",
  "Phascogale pirata",
  "Phascogale tapoatafa",
  "Phascogale tapoatafa kimberleyensis",
  "Phascogale tapoatafa tapoatafa",
  "Phascogale tapoatafa wambenger",
  "Phascolarctos cinereus",
  "Phascolarctos cinereus (combined populations of Qld, NSW and the ACT)",
  "Phocarctos hookeri",
  "Phocoena dioptrica",
  "Phoniscus papuensis",
  "Physeter macrocephalus",
  "Pipistrellus adamsi",
  "Pipistrellus murrayi",
  "Pipistrellus westralis",
  "Planigale gilesi",
  "Planigale ingrami",
  "Planigale maculata",
  "Planigale tenuirostris",
  "Pogonomys sp.",
  "Potorous gilbertii",
  "Potorous longipes",
  "Potorous platyops",
  "Potorous tridactylus",
  "Potorous tridactylus apicalis",
  "Potorous tridactylus tridactylus",
  "Potorous tridactylus trisulcatus",
  "Pseudantechinus bilarni",
  "Pseudantechinus macdonnellensis",
  "Pseudantechinus mimulus",
  "Pseudantechinus ningbing",
  "Pseudantechinus roryi",
  "Pseudantechinus woolleyae",
  "Pseudocheirus occidentalis",
  "Pseudocheirus peregrinus",
  "Pseudocheirus peregrinus convolutor",
  "Pseudocheirus peregrinus cookii",
  "Pseudocheirus peregrinus peregrinus",
  "Pseudocheirus peregrinus pulcher",
  "Pseudochirops archeri",
  "Pseudochirulus cinereus",
  "Pseudochirulus herbertensis",
  "Pseudomys albocinereus",
  "Pseudomys apodemoides",
  "Pseudomys auritus",
  "Pseudomys australis",
  "Pseudomys bolami",
  "Pseudomys calabyi",
  "Pseudomys chapmani",
  "Pseudomys delicatulus",
  "Pseudomys desertor",
  "Pseudomys fieldi",
  "Pseudomys fumeus",
  "Pseudomys glaucus",
  "Pseudomys gouldii",
  "Pseudomys gracilicaudatus",
  "Pseudomys hermannsburgensis",
  "Pseudomys higginsi",
  "Pseudomys johnsoni",
  "Pseudomys nanus",
  "Pseudomys novaehollandiae",
  "Pseudomys occidentalis",
  "Pseudomys oralis",
  "Pseudomys patrius",
  "Pseudomys pilligaensis",
  "Pseudomys shortridgei",
  "Pseudorca crassidens",
  "Pteropus alecto",
  "Pteropus alecto gouldii",
  "Pteropus brunneus",
  "Pteropus conspicillatus",
  "Pteropus conspicillatus conspicillatus",
  "Pteropus macrotis",
  "Pteropus macrotis epularius",
  "Pteropus natalis",
  "Pteropus poliocephalus",
  "Pteropus scapulatus",
  "Rattus colletti",
  "Rattus fuscipes",
  "Rattus fuscipes assimilis",
  "Rattus fuscipes coracius",
  "Rattus fuscipes fuscipes",
  "Rattus fuscipes greyi",
  "Rattus leucopus",
  "Rattus leucopus cooktownensis",
  "Rattus leucopus leucopus",
  "Rattus lutreolus",
  "Rattus lutreolus lacus",
  "Rattus lutreolus lutreolus",
  "Rattus lutreolus velutinus",
  "Rattus macleari",
  "Rattus nativitatis",
  "Rattus sordidus",
  "Rattus tunneyi",
  "Rattus tunneyi culmorum",
  "Rattus tunneyi tunneyi",
  "Rattus villosissimus",
  "Rhinolophus 'intermediate'",
  "Rhinolophus megaphyllus",
  "Rhinolophus megaphyllus ignifer",
  "Rhinolophus megaphyllus megaphyllus",
  "Rhinolophus robertsi",
  "Rhinonicteris aurantia",
  "Rhinonicteris aurantia (Pilbara form)",
  "Rhinonicteris aurantia aurantia",
  "Saccolaimus flaviventris",
  "Saccolaimus mixtus",
  "Saccolaimus saccolaimus",
  "Saccolaimus saccolaimus nudicluniatus",
  "Sarcophilus harrisii",
  "Scoteanax rueppellii",
  "Scotorepens balstoni",
  "Scotorepens greyii",
  "Scotorepens orion",
  "Scotorepens sanborni",
  "Setirostris eleryi",
  "Setonix brachyurus",
  "Sminthopsis archeri",
  "Sminthopsis bindi",
  "Sminthopsis butleri",
  "Sminthopsis crassicaudata",
  "Sminthopsis dolichura",
  "Sminthopsis douglasi",
  "Sminthopsis gilberti",
  "Sminthopsis granulipes",
  "Sminthopsis griseoventer",
  "Sminthopsis fuliginosus aitkeni",
  "Sminthopsis griseoventris boullangerensis",
  "Sminthopsis hirtipes",
  "Sminthopsis leucopus",
  "Sminthopsis leucopus (north QLD)",
  "Sminthopsis leucopus ferruginifrons",
  "Sminthopsis leucopus leucopus",
  "Sminthopsis longicaudata",
  "Sminthopsis macroura",
  "Sminthopsis macroura froggatti",
  "Sminthopsis macroura macroura",
  "Sminthopsis macroura stalkeri",
  "Sminthopsis murina",
  "Sminthopsis murina murina",
  "Sminthopsis murina tatei",
  "Sminthopsis ooldea",
  "Sminthopsis psammophila",
  "Sminthopsis virginiae",
  "Sminthopsis virginiae nitela",
  "Sminthopsis virginiae virginiae",
  "Sminthopsis youngsoni",
  "Smithopsis griseoventer griseoventer",
  "Sousa sahulensis",
  "Spilocuscus maculatus nudicaudatus",
  "Spilocuscus nudicaudatus",
  "Stenella attenuata",
  "Stenella attenuata attenuata",
  "Stenella coeruleoalba",
  "Stenella longirostris",
  "Stenella longirostris longirostris",
  "Stenella longirostris roseiventris",
  "Steno bredanensis",
  "Syconycteris australis",
  "Syconycteris australis australis",
  "Tachyglossus aculeatus",
  "Tachyglossus aculeatus acanthion",
  "Tachyglossus aculeatus aculeatus",
  "Tachyglossus aculeatus multiaculeatus",
  "Tachyglossus aculeatus setosus",
  "Taphozous australis",
  "Taphozous georgianus",
  "Taphozous hilli",
  "Taphozous kapalgensis",
  "Taphozous troughtoni",
  "Tarsipes rostratus",
  "Tasmacetus shepherdi",
  "Thylacinus cynocephalus",
  "Thylogale billardieri",
  "Thylogale stigmatica",
  "Thylogale stigmatica coxenii",
  "Thylogale stigmatica stigmatica",
  "Thylogale stigmatica wilcoxi",
  "Thylogale thetis",
  "Trichosurus caninus",
  "Trichosurus cunninghami",
  "Trichosurus vulpecula",
  "Trichosurus vulpecula arnhemensis",
  "Trichosurus vulpecula hypoleucus",
  "Trichosurus vulpecula vulpecula",
  "Tursiops aduncus",
  "Tursiops australis",
  "Tursiops truncatus",
  "Tursiops truncatus truncatus",
  "Uromys caudimaculatus",
  "Uromys caudimaculatus caudimaculatus",
  "Uromys hadrourus",
  "Vespadalus caurinus",
  "Vespadalus douglasorum",
  "Vespadalus finlaysoni",
  "Vespadalus regulus",
  "Vespadelus baverstocki",
  "Vespadelus darlingtoni",
  "Vespadelus pumilus",
  "Vespadelus troughtoni",
  "Vespadelus vulturnus",
  "Vombatus ursinus",
  "Vombatus ursinus hirsutus",
  "Vombatus ursinus tasmaniensis",
  "Vombatus ursinus ursinus",
  "Wallabia bicolor",
  "Wyulda squamicaudata",
  "Xeromys myoides",
  "Zaglossus bruijnii",
  "Ziphius cavirostris",
  "Zyzomys argurus",
  "Zyzomys maini",
  "Zyzomys palatalis",
  "Zyzomys pedunculatus",
  "Zyzomys woodwardi",
  "Abutilon julianae",
  "Acacia ammophila",
  "Acacia anomala",
  "Acacia aphylla",
  "Acacia aprica",
  "Acacia araneosa",
  "Acacia aristulata",
  "Acacia atrox",
  "Acacia attenuata",
  "Acacia auratiflora",
  "Acacia ausfeldii",
  "Acacia awestoniana",
  "Azorella macquariensis",
  "Acacia baueri subsp. aspera",
  "Acacia brachypoda",
  "Acacia bynoeana",
  "Acacia caerulescens",
  "Acacia carneorum",
  "Acacia chrysotricha",
  "Acacia clunies-rossiae",
  "Acacia constablei",
  "Acacia courtii",
  "Acacia cretacea",
  "Acacia crombiei",
  "Acacia curranii",
  "Acacia dangarensis",
  "Acacia daviesii",
  "Acacia denticulosa",
  "Acacia depressa",
  "Acacia deuteroneura",
  "Acacia enterocarpa",
  "Acacia equisetifolia",
  "Acacia eremophiloides",
  "Acacia exudans",
  "Acacia flocktoniae",
  "Acacia forrestiana",
  "Acacia georgensis",
  "Acacia glandulicarpa",
  "Acacia gordonii",
  "Acacia grandifolia",
  "Acacia handonis",
  "Acacia imitans",
  "Acacia lanuginophylla",
  "Acacia latzii",
  "Acacia lauta",
  "Acacia leptalea",
  "Acacia leptoneura",
  "Acacia lobulata",
  "Acacia macnuttiana",
  "Acacia meiantha",
  "Acacia menzelii",
  "Barbarea australis",
  "Acacia peuce",
  "Acacia pharangites",
  "Acacia phasmoides",
  "Acacia pickardii",
  "Acacia pinguifolia",
  "Acacia porcata",
  "Acacia praemorsa",
  "Acacia praetermissa",
  "Acacia pubescens",
  "Acacia pubifolia",
  "Acacia purpureopetala",
  "Acacia pycnostachya",
  "Acacia pygmaea",
  "Acacia recurvata",
  "Acacia rhamphophylla",
  "Acacia rhetinocarpa",
  "Acacia rostriformis",
  "Acacia ruppii",
  "Acacia sciophanes",
  "Acacia spilleriana",
  "Acacia splendens",
  "Acacia sporadica",
  "Acacia undoolyana",
  "Acacia unguicula",
  "Acacia vassalii",
  "Acacia volubilis",
  "Acacia whibleyana",
  "Acacia wilsonii",
  "Acanthocladium dockeri",
  "Achyranthes arborescens",
  "Achyranthes margaretarum",
  "Acronychia littoralis",
  "Acrophyllum australe",
  "Actephila foetida",
  "Actinotus schwarzii",
  "Adenanthos dobagii",
  "Adenanthos ellipticus",
  "Adenanthos eyrei",
  "Adenanthos velutinus",
  "Bertya tasmanica subsp. tasmanica",
  "Boronia hemichiton",
  "Alectryon ramiflorus",
  "Alexfloydia repens",
  "Caladenia anthracina",
  "Allocasuarina defungens",
  "Caladenia campbellii",
  "Allocasuarina emuina",
  "Allocasuarina fibrosa",
  "Allocasuarina glareicola",
  "Allocasuarina portuensis",
  "Allocasuarina robusta",
  "Allocasuarina simulans",
  "Allocasuarina thalassoscopica",
  "Allocasuarina tortiramula",
  "Alloxylon flammeum",
  "Almaleea cambagei",
  "Ammobium craspedioides",
  "Amphibromus fluitans",
  "Amyema plicatula",
  "Ancistrachne maidenii",
  "Andersonia annelsii",
  "Andersonia axilliflora",
  "Andersonia gracilis",
  "Andersonia pinaster",
  "Androcalva bivillosa",
  "Androcalva perlaria",
  "Androcalva procumbens",
  "Androcalva rosea",
  "Angophora exul",
  "Angophora inopina",
  "Angophora robur",
  "Anthocercis gracilis",
  "Caladenia dienema",
  "Apatophyllum olsenii",
  "Aponogeton bullosus",
  "Aponogeton prolifer",
  "Arachnorchis actensis",
  "Caladenia lindleyana",
  "Caladenia pallida",
  "Caladenia saggicola",
  "Caladenia sylvicola",
  "Caladenia tonellii",
  "Centrolepis pedderensis",
  "Archidendron lovelliae",
  "Archontophoenix myolensis",
  "Argyrotegium nitidulum",
  "Aristida annua",
  "Aristida granitica",
  "Arthraxon hispidus",
  "Corunastylis brachystachya",
  "Asperula asthenes",
  "Asplenium hookerianum",
  "Asplenium listeri",
  "Asplenium pellucidum",
  "Asplenium wildii",
  "Astelia australiana",
  "Asterolasia asteriscophora subsp. albiflora",
  "Asterolasia buxifolia",
  "Asterolasia elegans",
  "Asterolasia nivea",
  "Asterolasia phebalioides",
  "Astrotricha crassifolia",
  "Astrotricha parvifolia subsp. 1",
  "Astrotricha parvifolia subsp. 2",
  "Astrotricha roddii",
  "Astrotricha sp. 1 subsp. 2",
  "Astrotricha sp. 3",
  "Atalaya brevialata",
  "Atalaya collina",
  "Atriplex infrequens",
  "Atriplex yeelirrie",
  "Corunastylis firthii",
  "Austrostipa bronwenae",
  "Austrostipa jacobsiana",
  "Austrostipa metatoris",
  "Austrostipa wakoolica",
  "Craspedia preminghana",
  "Baeckea kandos",
  "Ballantinia antipoda",
  "Baloghia marmorata",
  "Baloskion longipes",
  "Banksia anatona",
  "Banksia aurantia",
  "Banksia brownii",
  "Banksia catoglypta",
  "Banksia cuneata",
  "Banksia fuscobractea",
  "Banksia goodii",
  "Banksia ionthocarpa",
  "Banksia mimica",
  "Banksia montana",
  "Banksia oligantha",
  "Banksia pseudoplumosa",
  "Banksia verticillata",
  "Banksia vincentia",
  "Diuris lanceolata",
  "Bertya calycina",
  "Bertya ernestiana",
  "Bertya grampiana",
  "Bertya granitica",
  "Bertya ingramii",
  "Bertya opponens",
  "Bertya pinifolia",
  "Epacris apsleyensis",
  "Epacris barbata",
  "Beyeria lepidopetala",
  "Beyeria subtecta",
  "Blechnum norfolkianum",
  "Boronia adamsiana",
  "Boronia boliviensis",
  "Boronia citrata",
  "Boronia clavata",
  "Boronia deanei",
  "Boronia exilis",
  "Boronia galbraithiae",
  "Boronia granitica",
  "Epacris glabella",
  "Boronia hapalophylla",
  "Epacris grandis",
  "Epacris limbata",
  "Boronia keysii",
  "Boronia pilosa subsp. parvidaemonis",
  "Boronia quadrilata",
  "Boronia repanda",
  "Boronia revoluta",
  "Boronia ruppii",
  "Boronia umbellata",
  "Boronia viridiflora",
  "Borya mirabilis",
  "Bosistoa transversa",
  "Bossiaea bombayensis",
  "Bossiaea fragrans",
  "Bossiaea grayi",
  "Epacris stuartii",
  "Bossiaea oligosperma",
  "Bossiaea peninsularis",
  "Eucalyptus gunnii subsp. divaricata",
  "Bossiaea vombata",
  "Bothriochloa bunyensis",
  "Eucalyptus morrisbyi",
  "Brachyscias verecundus",
  "Brachyscome muelleri",
  "Brachyscome muelleroides",
  "Brachyscome papillosa",
  "Brachyscome tadgellii",
  "Budawangia gnidioides",
  "Bulbophyllum globuliforme",
  "Bulbophyllum gracillimum",
  "Bulbophyllum longiflorum",
  "Cadellia pentastylis",
  "Cajanus mareebensis",
  "Caladenia actensis",
  "Caladenia amoena",
  "Euphrasia collina subsp. tetragona",
  "Caladenia arenaria",
  "Caladenia argocalla",
  "Caladenia atroclavia",
  "Caladenia audasii",
  "Caladenia barbarella",
  "Caladenia behrii",
  "Caladenia brumalis",
  "Caladenia busselliana",
  "Caladenia calcicola",
  "Euphrasia fragosa",
  "Euphrasia gibbsiae subsp. psilantherea",
  "Caladenia christineae",
  "Caladenia colorata",
  "Caladenia concolor",
  "Caladenia conferta",
  "Caladenia cremna",
  "Euphrasia semipicta",
  "Caladenia dorrienii",
  "Caladenia drakeoides",
  "Caladenia elegans",
  "Caladenia excelsa",
  "Caladenia formosa",
  "Caladenia fulva",
  "Caladenia gladiolata",
  "Caladenia harringtoniae",
  "Caladenia hastata",
  "Caladenia hoffmanii",
  "Caladenia huegelii",
  "Caladenia insularis",
  "Caladenia intuta",
  "Hibbertia basaltica",
  "Caladenia lowanensis",
  "Caladenia macroclavia",
  "Caladenia melanema",
  "Caladenia orientalis",
  "Caladenia ornata",
  "Caladenia ovata",
  "Lomatia tasmanica",
  "Caladenia procera",
  "Caladenia pumila",
  "Caladenia richardsiorum",
  "Caladenia rigida",
  "Caladenia robinsonii",
  "Caladenia rosella",
  "Phebalium daviesii",
  "Philotheca freyciana",
  "Caladenia tensa",
  "Caladenia tessellata",
  "Caladenia thysanochila",
  "Pomaderris pilifera subsp. talpicutica",
  "Caladenia versicolor",
  "Caladenia viridescens",
  "Caladenia wanosa",
  "Caladenia williamsiae",
  "Caladenia winfieldii",
  "Caladenia woolcockiorum",
  "Caladenia xanthochila",
  "Caladenia xantholeuca",
  "Calectasia cyanea",
  "Calectasia pignattiana",
  "Callistemon forresterae",
  "Callistemon kenmorrisonii",
  "Callistemon linearifolius",
  "Callistemon megalongensis",
  "Callistemon pungens",
  "Callistemon purpurascens",
  "Callistemon wimmerensis",
  "Prasophyllum castaneum",
  "Prasophyllum crebriflorum",
  "Calochilus psednus",
  "Calochilus richiae",
  "Calophyllum bicolor",
  "Calotis glandulosa",
  "Calotis moorei",
  "Calystegia affinis",
  "Calytrix gurulmundensis",
  "Canarium acutifolium",
  "Capparis thozetiana",
  "Carex klaphakei",
  "Carmichaelia exsul",
  "Carronia pedicellata",
  "Cassinia rugata",
  "Cassinia tegulata",
  "Prasophyllum favonium",
  "Prasophyllum incorrectum",
  "Prasophyllum milfordense",
  "Prasophyllum olidum",
  "Cepobaculum carronii",
  "Cheiranthera volubilis",
  "Chingia australis",
  "Chordifex abortivus",
  "Chorizema humile",
  "Chorizema varium",
  "Clematis dubia",
  "Clematis fawcettii",
  "Codonocarpus pyramidalis",
  "Colobanthus curtisiae",
  "Commersonia apella",
  "Commersonia erythrogyna",
  "Commersonia procumbens",
  "Commersonia prostrata",
  "Commersonia rosea",
  "Conospermum galeatum",
  "Prasophyllum perangustum",
  "Prasophyllum pulchellum",
  "Conospermum undulatum",
  "Conostylis drummondii",
  "Conostylis lepidospermoides",
  "Conostylis micrantha",
  "Conostylis misera",
  "Conostylis rogeri",
  "Conostylis wonganensis",
  "Coopernookia georgei",
  "Coopernookia scabridiuscula",
  "Coprosma baueri",
  "Coprosma inopinata",
  "Coprosma pilosa",
  "Corchorus cunninghamii",
  "Cordyline obtecta",
  "Corokia whiteana",
  "Correa baeuerlenii",
  "Correa calycina",
  "Correa eburnea",
  "Prasophyllum robustum",
  "Corunastylis ectopa",
  "Prasophyllum secutum",
  "Corybas dentatus",
  "Prasophyllum stellatum",
  "Prasophyllum taphanyx",
  "Corybas montanus",
  "Corymbia clandestina",
  "Corymbia leptoloma",
  "Corymbia rhodops",
  "Corymbia xanthope",
  "Cossinia australiana",
  "Prasophyllum tunbridgense",
  "Craspedia sp. 2",
  "Crepidium lawleri",
  "Crowea exalata subsp. revoluta",
  "Cryptocarya foetida",
  "Cryptostylis hunteriana",
  "Ctenopterella blechnoides",
  "Cupaniopsis shirleyana",
  "Cupaniopsis tomentella",
  "Cyathea exilis",
  "Pterostylis commutata",
  "Pterostylis rubenachii",
  "Pterostylis wapstrarum",
  "Cycas cairnsiana",
  "Cycas megacarpa",
  "Cycas ophiolitica",
  "Cycas platyphylla",
  "Cycas silvestris",
  "Cyclophyllum costatum",
  "Cynanchum elegans",
  "Cyperus cephalotes",
  "Cyperus semifertilis",
  "Ranunculus prasinus",
  "Dampiera galbraithiana",
  "Sagina diemensis",
  "Daphnandra johnsonii",
  "Darwinia acerosa",
  "Darwinia apiculata",
  "Darwinia biflora",
  "Darwinia carnea",
  "Darwinia chapmaniana",
  "Darwinia collina",
  "Darwinia ferricola",
  "Darwinia foetida",
  "Darwinia glaucophylla",
  "Darwinia masonii",
  "Darwinia meeboldii",
  "Darwinia nubigena",
  "Darwinia oxylepis",
  "Darwinia peduncularis",
  "Darwinia polychroma",
  "Darwinia squarrosa",
  "Darwinia whicherensis",
  "Darwinia wittwerorum",
  "Dasymalla axillaris",
  "Davidsonia jerseyana",
  "Davidsonia johnsonii",
  "Daviesia bursarioides",
  "Daviesia cunderdin",
  "Daviesia dielsii",
  "Daviesia discolor",
  "Daviesia euphorbioides",
  "Daviesia glossosema",
  "Daviesia laevis",
  "Daviesia megacalyx",
  "Daviesia microcarpa",
  "Daviesia obovata",
  "Daviesia ovata",
  "Daviesia pseudaphylla",
  "Daviesia speciosa",
  "Decaspermum struckoilicum",
  "Dendrobium antennatum",
  "Dendrobium bigibbum",
  "Dendrobium johannis",
  "Dendrobium mirbelianum",
  "Dendrobium nindii",
  "Denhamia parvifolia",
  "Derwentia blakelyi",
  "Desmodium acanthocladum",
  "Deyeuxia appressa",
  "Stackhousia subterranea",
  "Deyeuxia drummondii",
  "Stonesiella selaginoides",
  "Deyeuxia pungens",
  "Dianella amoena",
  "Dichanthium queenslandicum",
  "Dichanthium setosum",
  "Dillwynia glaucula",
  "Dillwynia tenuifolia",
  "Diospyros mabacea",
  "Diplazium cordifolium",
  "Diplazium pallidum",
  "Diploglottis campbellii",
  "Diplolaena andrewsii",
  "Dipodium pictum",
  "Dischidia litoralis",
  "Diuris aequalis",
  "Diuris basaltica",
  "Diuris drummondii",
  "Diuris fragrantissima",
  "Diuris gregaria",
  "Tetratheca gunnii",
  "Diuris micrantha",
  "Diuris ochroma",
  "Diuris pedunculata",
  "Diuris praecox",
  "Diuris protena",
  "Diuris purdiei",
  "Diuris venosa",
  "Dodonaea procumbens",
  "Dodonaea rupicola",
  "Dodonaea subglandulifera",
  "Dracophyllum macranthum",
  "Drakaea concolor",
  "Drakaea confluens",
  "Drakaea elastica",
  "Drakaea isolata",
  "Drakaea micrantha",
  "Drosera prolifera",
  "Drosera schizandra",
  "Drummondita ericoides",
  "Drummondita longifolia",
  "Dysoxylum bijugum",
  "Eidothea hardeniana",
  "Elaeocarpus sedentarius",
  "Elaeocarpus williamsianus",
  "Elatostema montanum",
  "Eleocharis keigheryi",
  "Eleocharis obicis",
  "Eleocharis papillosa",
  "Eleocharis retroflexa",
  "Elymus multiflorus subsp. kingianus",
  "Endiandra cooperana",
  "Endiandra floydii",
  "Endiandra hayesii",
  "Thelymitra jonesii",
  "Thynninorchis nothofagicola",
  "Corybas sulcatus",
  "Prasophyllum atratum",
  "Prasophyllum limnetes",
  "Arachnorchis anthracina",
  "Arachnorchis dienema",
  "Arachnorchis lindleyana",
  "Epacris hamiltonii",
  "Arachnorchis pallida",
  "Arachnorchis saggicola",
  "Epacris purpurascens var. purpurascens",
  "Epacris sparsa",
  "Arthrochilus huntianus subsp. nothofagicola",
  "Bertya rosmarinifolia",
  "Euphrasia sp. fabula",
  "Genoplesium brachystachyum",
  "Epilobium brunnescens subsp. beaugleholei",
  "Eremochloa muricata",
  "Eremophila ciliata",
  "Eremophila koobabbiensis",
  "Eremophila lactea",
  "Eremophila nivea",
  "Eremophila pinnatifida",
  "Eremophila prostrata",
  "Eremophila resinosa",
  "Eremophila rostrata",
  "Eremophila scaberula",
  "Eremophila subteretifolia",
  "Eremophila ternifolia",
  "Eremophila vernicosa",
  "Eremophila verticillata",
  "Eremophila virens",
  "Eremophila viscida",
  "Eriocaulon aloefolium",
  "Eriocaulon australasicum",
  "Eriocaulon carsonii",
  "Eriocaulon giganticum",
  "Eryngium fontanum",
  "Eucalyptus absita",
  "Eucalyptus aggregata",
  "Eucalyptus alligatrix subsp. alligatrix",
  "Eucalyptus alligatrix subsp. limaensis",
  "Eucalyptus approximans",
  "Eucalyptus aquatica",
  "Eucalyptus argophloia",
  "Eucalyptus argutifolia",
  "Eucalyptus articulata",
  "Genoplesium firthii",
  "Eucalyptus baueriana subsp. deddickensis",
  "Eucalyptus baueriana subsp. thalassina",
  "Eucalyptus beaniana",
  "Eucalyptus beardiana",
  "Eucalyptus benthamii",
  "Eucalyptus boliviana",
  "Eucalyptus brevipes",
  "Eucalyptus burdettiana",
  "Eucalyptus cadens",
  "Eucalyptus caleyi subsp. ovendenii",
  "Eucalyptus camfieldii",
  "Eucalyptus cannonii",
  "Eucalyptus canobolensis",
  "Eucalyptus carolaniae",
  "Eucalyptus castrensis",
  "Eucalyptus ceracea",
  "Eucalyptus conferta",
  "Eucalyptus conglomerata",
  "Eucalyptus copulans",
  "Eucalyptus coronata",
  "Eucalyptus corticosa",
  "Eucalyptus crenulata",
  "Eucalyptus crispata",
  "Eucalyptus cuprea",
  "Eucalyptus dissita",
  "Eucalyptus dolorosa",
  "Eucalyptus elaeophloia",
  "Eucalyptus filiformis",
  "Eucalyptus fracta",
  "Eucalyptus glaucina",
  "Eucalyptus goniocalyx subsp. fallax",
  "Hymenochilus rubenachii",
  "Eucalyptus hallii",
  "Eucalyptus imlayensis",
  "Eucalyptus impensa",
  "Eucalyptus infera",
  "Eucalyptus insularis",
  "Eucalyptus johnsoniana",
  "Eucalyptus kabiana",
  "Eucalyptus kartzoffiana",
  "Eucalyptus langleyi",
  "Eucalyptus largeana",
  "Eucalyptus lateritica",
  "Eucalyptus leprophloia",
  "Eucalyptus leucoxylon subsp. bellarinensis",
  "Eucalyptus leucoxylon subsp. connata",
  "Eucalyptus litoralis",
  "Eucalyptus macarthurii",
  "Eucalyptus mckieana",
  "Eucalyptus merrickiae",
  "Eucalyptus molyneuxii",
  "Eucalyptus mooreana",
  "Hymenochilus wapstrarum",
  "Eucalyptus nicholii",
  "Eucalyptus oresbia",
  "Eucalyptus ornans",
  "Eucalyptus pachycalyx subsp. banyabba",
  "Eucalyptus paedoglauca",
  "Eucalyptus paludicola",
  "Eucalyptus parramattensis subsp. decadens",
  "Eucalyptus parvula",
  "Eucalyptus phoenix",
  "Eucalyptus platydisca",
  "Eucalyptus pruiniramis",
  "Eucalyptus pulverulenta",
  "Eucalyptus pumila",
  "Eucalyptus pyrenea",
  "Eucalyptus raveretiana",
  "Eucalyptus recta",
  "Eucalyptus recurva",
  "Eucalyptus rhodantha",
  "Oligochaetochilus commutatus",
  "Eucalyptus robertsonii subsp. hemisphaerica",
  "Eucalyptus rubida subsp. barbigerorum",
  "Eucalyptus scoparia",
  "Eucalyptus splendens",
  "Eucalyptus steedmanii",
  "Eucalyptus strzeleckii",
  "Eucalyptus sturgissiana",
  "Eucalyptus suberea",
  "Eucalyptus synandra",
  "Eucalyptus tetrapleura",
  "Eucalyptus tricarpa subsp. decora",
  "Eucalyptus viminalis subsp. siliceana",
  "Eucalyptus virens",
  "Eucalyptus walshii",
  "Eucalyptus x balanites",
  "Eucalyptus x phylacis",
  "Eucalyptus yarriambiack",
  "Eucryphia wilkiei",
  "Euphorbia carissoides",
  "Euphorbia norfolkiana",
  "Euphorbia obliqua",
  "Petalochilus campbellii",
  "Euphrasia arguta",
  "Euphrasia bella",
  "Euphrasia bowdeniae",
  "Euphrasia ciliolata",
  "Euphrasia collina subsp. 1",
  "Petalochilus sylvicola",
  "Petalochilus tonellii",
  "Euphrasia collina subsp. muelleri",
  "Prasophyllum brachystachyum",
  "Euphrasia crassiuscula subsp. glandulifera",
  "Euphrasia eichleri",
  "Prasophyllum correctum",
  "Prasophyllum firthii",
  "Pterostylis wapstreorum",
  "Pultenaea selaginoides",
  "Stackhousia gunnii",
  "Thelymitra azurea",
  "Fimbristylis adjuncta",
  "Floydia praealta",
  "Fontainea australis",
  "Fontainea oraria",
  "Fontainea rostrata",
  "Fontainea venosa",
  "Frankenia conferta",
  "Frankenia parvula",
  "Frankenia plicata",
  "Galium antarcticum",
  "Gardenia actinocarpa",
  "Gardenia psidioides",
  "Gastrolobium appressum",
  "Gastrolobium argyrotrichum",
  "Gastrolobium diabolophyllum",
  "Gastrolobium glaucum",
  "Gastrolobium graniticum",
  "Gastrolobium hamulosum",
  "Gastrolobium humile",
  "Gastrolobium lehmannii",
  "Gastrolobium luteifolium",
  "Gastrolobium modestum",
  "Gastrolobium papilio",
  "Gastrolobium vestitum",
  "Gaultheria viridicarpa subsp. merinoensis",
  "Geniostoma huttonii",
  "Epacris exserta",
  "Genoplesium plumosum",
  "Genoplesium rhyoliticum",
  "Genoplesium tectum",
  "Genoplesium vernale",
  "Gentiana baeuerlenii",
  "Gentiana bredboensis",
  "Gentiana wingecarribiensis",
  "Gentiana wissmannii",
  "Geranium sp. 1",
  "Geranium sp. 6",
  "Germainia capitata",
  "Gingidia montana",
  "Gingidia rupicola",
  "Glyceria drummondii",
  "Glycine latrobeana",
  "Goodenia arthrotricha",
  "Goodenia integerrima",
  "Goodenia macmillanii",
  "Goodenia nocoleche",
  "Goodenia quadrifida",
  "Gossia fragrantissima",
  "Gossia gonoclada",
  "Graptophyllum ilicifolium",
  "Graptophyllum reticulatum",
  "Grevillea acanthifolia subsp. paludosa",
  "Grevillea althoferorum",
  "Grevillea banyabba",
  "Grevillea barklyana",
  "Grevillea batrachioides",
  "Grevillea beadleana",
  "Grevillea bedggoodiana",
  "Grevillea burrowa",
  "Grevillea caleyi",
  "Grevillea calliantha",
  "Grevillea callichlaena",
  "Grevillea celata",
  "Grevillea christineae",
  "Grevillea corrugata",
  "Grevillea divaricata",
  "Grevillea elongata",
  "Grevillea evansiana",
  "Grevillea flexuosa",
  "Grevillea floripendula",
  "Grevillea glossadenia",
  "Grevillea guthrieana",
  "Grevillea humifusa",
  "Grevillea iaspicula",
  "Grevillea infecunda",
  "Grevillea infundibularis",
  "Grevillea involucrata",
  "Grevillea juniperina subsp. juniperina",
  "Grevillea kennedyana",
  "Grevillea maccutcheonii",
  "Grevillea masonii",
  "Grevillea maxwellii",
  "Grevillea miqueliana subsp. cincta",
  "Grevillea mollis",
  "Grevillea molyneuxii",
  "Grevillea montis-cole subsp. brevistyla",
  "Grevillea murex",
  "Grevillea obtusiflora",
  "Grevillea parviflora subsp. parviflora",
  "Grevillea parviflora subsp. supplicans",
  "Grevillea pythara",
  "Grevillea quadricauda",
  "Grevillea rara",
  "Grevillea renwickiana",
  "Grevillea rhizomatosa",
  "Grevillea rivularis",
  "Grevillea scapigera",
  "Grevillea scortechinii subsp. sarmentosa",
  "Grevillea shiressii",
  "Grevillea thelemanniana",
  "Grevillea treueriana",
  "Grevillea wilkinsonii",
  "Guichenotia seorsiflora",
  "Gyrostemon reticulatus",
  "Habenaria maccraithii",
  "Hakea aculeata",
  "Hakea archaeoides",
  "Hakea dohertyi",
  "Hakea fraseri",
  "Hakea maconochieana",
  "Hakea megalosperma",
  "Hakea pulvinifera",
  "Hakea trineura",
  "Haloragis exalata subsp. exalata",
  "Haloragis eyreana",
  "Haloragis platycarpa",
  "Haloragodendron lucasii",
  "Helicteres macrothrix",
  "Hemiandra gardneri",
  "Hemiandra rutilans",
  "Hemigenia ramosissima",
  "Hensmania chapmanii",
  "Hexaspora pubescens",
  "Hibbertia abyssus",
  "Hibbertia crispula",
  "Hibbertia fumana",
  "Hibbertia humifusa subsp. debilis",
  "Hibbertia humifusa subsp. erigens",
  "Hibbertia marginata",
  "Hibbertia priceana",
  "Hibbertia samaria",
  "Hibbertia spanantha",
  "Hibbertia stricta subsp. furcatula",
  "Hibbertia superans",
  "Hibbertia tenuis",
  "Hibiscus brennanii",
  "Hibiscus cravenii",
  "Hibiscus insularis",
  "Hicksbeachia pinnatifolia",
  "Homopholis belsonii",
  "Homoranthus binghiensis",
  "Homoranthus croftianus",
  "Homoranthus darwinioides",
  "Homoranthus decumbens",
  "Homoranthus lunatus",
  "Homoranthus montanus",
  "Homoranthus porteri",
  "Homoranthus prolixus",
  "Hybanthus cymulosus",
  "Hydriastele costata",
  "Hypocalymma longifolium",
  "Hypocalymma sylvestre",
  "Hypolepis dicksonioides",
  "Hypolepis distans",
  "Ileostylus micranthus",
  "Indigofera efoliata",
  "Irenepharsus trypherus",
  "Isoetes pusilla",
  "Isoglossa eranthemoides",
  "Isopogon fletcheri",
  "Isopogon robustus",
  "Isopogon uncinatus",
  "Jacksonia pungens",
  "Jacksonia quairading",
  "Jacksonia velveta",
  "Kardomia granitica",
  "Kardomia prominens",
  "Kelleria bogongensis",
  "Kennedia glabrata",
  "Kennedia lateritia",
  "Kennedia retrorsa",
  "Keraudrenia exastia",
  "Kunzea cambagei",
  "Kunzea rupestris",
  "Lachnagrostis adamsonii",
  "Lachnagrostis deflexa",
  "Lachnagrostis limitanea",
  "Lambertia fairallii",
  "Lambertia orbifolia",
  "Lasiopetalum joyceae",
  "Lasiopetalum longistamineum",
  "Lasiopetalum pterocarpum",
  "Lasiopetalum rotundifolium",
  "Lastreopsis calantha",
  "Lastreopsis walleri",
  "Latrobea colophona",
  "Lawrencia buchananensis",
  "Lechenaultia chlorantha",
  "Lechenaultia laricina",
  "Leiocarpa gatesii",
  "Leionema equestre",
  "Leionema lachnaeoides",
  "Leionema obtusifolium",
  "Leionema ralstonii",
  "Leionema sympetalum",
  "Lepidium aschersonii",
  "Lepidium ginninderrense",
  "Lepidium hyssopifolium",
  "Lepidium monoplocoides",
  "Lepidium peregrinum",
  "Lepidium pseudopapillosum",
  "Lepidorrhachis mooreana",
  "Lepidosperma evansianum",
  "Lepidosperma rostratum",
  "Leptomeria dielsiana",
  "Leptospermum deanei",
  "Leptospermum jingera",
  "Leptospermum thompsonii",
  "Leucopogon confertus",
  "Leucopogon exolasius",
  "Leucopogon fletcheri subsp. fletcheri",
  "Leucopogon gnaphalioides",
  "Leucopogon marginatus",
  "Leucopogon nitidus",
  "Leucopogon obtectus",
  "Leucopogon spectabilis",
  "Euphrasia amphisysepala",
  "Limosella granitica",
  "Livistona lanuginosa",
  "Livistona mariae",
  "Lobelia gelida",
  "Logania diffusa",
  "Logania insularis",
  "Lysiosepalum abollatum",
  "Macadamia integrifolia",
  "Macadamia jansenii",
  "Macadamia ternifolia",
  "Macadamia tetraphylla",
  "Macarthuria keigheryi",
  "Macropteranthes montana",
  "Macrozamia conferta",
  "Macrozamia cranei",
  "Macrozamia humilis",
  "Macrozamia johnsonii",
  "Macrozamia lomandroides",
  "Macrozamia macdonnellii",
  "Macrozamia machinii",
  "Macrozamia occidua",
  "Macrozamia parcifolia",
  "Macrozamia pauli-guilielmi",
  "Macrozamia platyrhachis",
  "Maireana cheelii",
  "Marattia salicina",
  "Marianthus aquilonaris",
  "Marianthus mollis",
  "Marianthus paralius",
  "Marsdenia brevifolia",
  "Marsdenia longiloba",
  "Marsdenia paludicola",
  "Medicosma elliptica",
  "Medicosma obovata",
  "Melaleuca biconvexa",
  "Melaleuca deanei",
  "Melaleuca kunzeoides",
  "Melaleuca sciotostyla",
  "Melicope littoralis",
  "Melicytus latifolius",
  "Meryta angustifolia",
  "Meryta latifolia",
  "Microcarpaea agonis",
  "Microcorys eremophiloides",
  "Microlepidium alatum",
  "Micromyrtus blakelyi",
  "Micromyrtus grandis",
  "Micromyrtus minutiflora",
  "Microtis angusii",
  "Microtis globula",
  "Minuria tridens",
  "Mitrella tiwiensis",
  "Muehlenbeckia australis",
  "Muehlenbeckia tuggeranong",
  "Myoporum cordifolium",
  "Myoporum obscurum",
  "Myoporum turbinatum",
  "Myriophyllum coronatum",
  "Myriophyllum lapidicola",
  "Myriophyllum porcatum",
  "Myrmecodia beccarii",
  "Myrsine ralstoniae",
  "Myrsine richmondensis",
  "Neisosperma kilneri",
  "Nematolepis frondosa",
  "Nematolepis rhytidophylla",
  "Nematolepis wilsonii",
  "Neoastelia spectabilis",
  "Neoroepera buxifolia",
  "Newcastelia velutina",
  "Notelaea ipsviciensis",
  "Notelaea lloydii",
  "Ochrosia moorei",
  "Olax angulata",
  "Olearia arckaringensis",
  "Olearia astroloba",
  "Olearia cordata",
  "Olearia flocktoniae",
  "Olearia hygrophila",
  "Olearia macdonnellensis",
  "Olearia microdisca",
  "Olearia pannosa subsp. pannosa",
  "Omphalea celata",
  "Oreogrammitis reinwardtii",
  "Ornduffia calthifolia",
  "Owenia cepiodora",
  "Ozothamnus eriocephalus",
  "Ozothamnus tesselatus",
  "Ozothamnus vagans",
  "Paracaleana dixonii",
  "Paragoodia crenulata",
  "Parsonsia dorrigoensis",
  "Parsonsia larcomensis",
  "Paspalidium grandispiculatum",
  "Patersonia spirifolia",
  "Pennantia endlicheri",
  "Persicaria elatior",
  "Persoonia acerosa",
  "Persoonia arborea",
  "Persoonia bargoensis",
  "Persoonia glaucescens",
  "Persoonia hindii",
  "Persoonia hirsuta",
  "Persoonia marginata",
  "Persoonia micranthera",
  "Persoonia mollis subsp. maxima",
  "Persoonia nutans",
  "Persoonia pauciflora",
  "Petrophile latericola",
  "Petrophile nivea",
  "Phaius australis",
  "Phaius bernaysii",
  "Phaius pictus",
  "Phaleria biflora",
  "Phebalium bifidum",
  "Phebalium distans",
  "Phebalium festivum",
  "Acacia boormanii subsp. gibba",
  "Caladenia cretacea",
  "Caladenia pilotensis",
  "Eucalyptus cinerea subsp. victoriensis",
  "Prasophyllum barnettii",
  "Prasophyllum gilgai",
  "Prasophyllum readii",
  "Prasophyllum viretrum",
  "Pterostylis diminuta",
  "Thelymitra basaltica",
  "Phebalium lowanense",
  "Phebalium speciosum",
  "Phebalium whitei",
  "Pherosphaera fitzgeraldii",
  "Philotheca angustifolia subsp. montana",
  "Philotheca basistyla",
  "Philotheca ericifolia",
  "Philotheca falcata",
  "Philotheca myoporoides subsp. euroensis",
  "Philotheca myoporoides subsp. petraea",
  "Philotheca sporadica",
  "Philotheca wonganensis",
  "Phlegmariurus carinatus",
  "Phlegmariurus dalhousieanus",
  "Phlegmariurus filiformis",
  "Phlegmariurus lockyeri",
  "Phlegmariurus marsupiiformis",
  "Phlegmariurus squarrosus",
  "Phlegmariurus tetrastichoides",
  "Phyllota humifusa",
  "Picris evae",
  "Pimelea axiflora subsp. pubescens",
  "Pimelea curviflora var. curviflora",
  "Pimelea leptospermoides",
  "Pimelea pagophila",
  "Pimelea spicata",
  "Pimelea spinescens subsp. pubiflora",
  "Pimelea spinescens subsp. spinescens",
  "Pimelea venosa",
  "Pittosporum bracteolatum",
  "Pityrodia augustensis",
  "Pityrodia scabra",
  "Planchonella costata",
  "Planchonella eerwah",
  "Platylobium infecundum",
  "Platylobium rotundum",
  "Plectranthus gratus",
  "Plectranthus habrophyllus",
  "Plectranthus leiperi",
  "Plectranthus nitidus",
  "Plectranthus omissus",
  "Plectranthus torrenticola",
  "Plesioneuron tuberculatum",
  "Pleuropappus phyllocalymmeus",
  "Plinthanthesis rodwayi",
  "Pneumatopteris truncata",
  "Poa physoclina",
  "Caladenia ampla",
  "Caladenia cruciformis",
  "Caladenia sp. aff. fragrantissima (Central Victoria)",
  "Lachnagrostis ├ùcontracta",
  "Prasophyllum chasmogamum",
  "Prasophyllum maccannii",
  "Prasophyllum sp. aff. correctum (Mortlake)",
  "Pterostylis agrestis",
  "Pterostylis sp. aff. aciculiformis (Beechworth)",
  "Thelymitra gregaria",
  "Poa sallacustris",
  "Polianthion minutiflorum",
  "Polyphlebium endlicherianum",
  "Polyscias bellendenkerensis",
  "Polystichum moorei",
  "Pomaderris adnata",
  "Pomaderris bodalla",
  "Pomaderris brunnea",
  "Pomaderris clivicola",
  "Pomaderris cocoparrana",
  "Pomaderris cotoneaster",
  "Pomaderris delicata",
  "Pomaderris gilmourii var. cana",
  "Pomaderris helianthemifolia subsp. helianthemifolia",
  "Pomaderris pallida",
  "Pomaderris parrisiae",
  "Pomaderris reperta",
  "Pomaderris sericea",
  "Pomaderris subplicata",
  "Pomaderris vacciniifolia",
  "Pomaderris walshii",
  "Prasophyllum affine",
  "Prasophyllum diversiflorum",
  "Prasophyllum frenchii",
  "Prasophyllum fuscum",
  "Prasophyllum goldsackii",
  "Prasophyllum morganii",
  "Prasophyllum murfetii",
  "Prasophyllum pallidum",
  "Prasophyllum petilum",
  "Prasophyllum spicatum",
  "Prasophyllum suaveolens",
  "Prasophyllum subbisectum",
  "Prasophyllum validum",
  "Prasophyllum wallum",
  "Prostanthera albohirta",
  "Prostanthera askania",
  "Prostanthera calycina",
  "Prostanthera cineolifera",
  "Prostanthera clotteniana",
  "Prostanthera cryptandroides subsp. cryptandroides",
  "Prostanthera densa",
  "Prostanthera discolor",
  "Prostanthera eurybioides",
  "Prostanthera galbraithiae",
  "Prostanthera junonis",
  "Prostanthera marifolia",
  "Prostanthera nudula",
  "Prostanthera palustris",
  "Prostanthera schultzii",
  "Prostanthera spinosa",
  "Prostanthera staurophylla",
  "Prostanthera stricta",
  "Pseudocephalozia paludicola",
  "Pteris kingiana",
  "Pteris zahlbruckneriana",
  "Pterostylis arenicola",
  "Pterostylis basaltica",
  "Pterostylis bicornis",
  "Pterostylis bryophila",
  "Pterostylis cheraphila",
  "Pterostylis chlorogramma",
  "Acacia axillaris",
  "Pterostylis cucullata",
  "Boronia gunnii",
  "Pterostylis despectans",
  "Pterostylis gibbosa",
  "Pterostylis mirabilis",
  "Boronia hippopala",
  "Pterostylis pulchella",
  "Caladenia caudata",
  "Pterostylis saxicola",
  "Pterostylis tenuissima",
  "Pterostylis valida",
  "Callitris oblonga subsp. oblonga",
  "Conospermum hookeri",
  "Pterostylis xerophila",
  "Corybas dienemus",
  "Ptilotus beckerianus",
  "Ptilotus fasciculatus",
  "Ptilotus pyramidatus",
  "Ptychosema pusillum",
  "Pultenaea aristata",
  "Pultenaea baeuerlenii",
  "Pultenaea elusa",
  "Pultenaea glabra",
  "Pultenaea parrisiae",
  "Pultenaea parviflora",
  "Pultenaea pauciflora",
  "Epacris graniticola",
  "Pultenaea setulosa",
  "Pultenaea sp. Genowlan Point",
  "Pultenaea trichophylla",
  "Pultenaea williamsoniana",
  "Epacris virgata",
  "Randia moorei",
  "Ranunculus anemoneus",
  "Euphrasia phragmostoma",
  "Limonium australe var. baudinii",
  "Ozothamnus reflexifolius",
  "Reedia spathacea",
  "Rhagodia acicularis",
  "Rhaphidospora bonneyana",
  "Rhaponticum australe",
  "Rhinerrhizopsis matutina",
  "Rhizanthella gardneri",
  "Rhizanthella slateri",
  "Ricinocarpos brevis",
  "Ricinocarpos gloria-medii",
  "Ricinocarpos trichophorus",
  "Ristantia gouldii",
  "Romnalda strobilacea",
  "Roycea pycnophylloides",
  "Rutidosis heterogama",
  "Rutidosis leiolepis",
  "Rutidosis leptorrhynchoides",
  "Rytidosperma pumilum",
  "Pherosphaera hookeriana",
  "Rytidosperma vickeryae",
  "Poranthera petalifera",
  "Samadera bidwillii",
  "Sankowskya stipularis",
  "Sannantha crenulata",
  "Sannantha tozerensis",
  "Sarcochilus fitzgeraldii",
  "Sarcochilus hartmannii",
  "Sarcochilus hirticalcar",
  "Sarcochilus weinthalii",
  "Sauropus macranthus",
  "Scaevola macrophylla",
  "Sclerolaena blakei",
  "Sclerolaena napiformis",
  "Sclerolaena walkeri",
  "Selaginella andrewsii",
  "Senecio australis",
  "Senecio behrianus",
  "Prasophyllum amoenum",
  "Senecio evansianus",
  "Senecio hooglandii",
  "Senecio linearifolius var. dangarensis",
  "Senecio linearifolius var. graniticola",
  "Senecio macrocarpus",
  "Senecio megaglossus",
  "Senecio psilocarpus",
  "Solanum celatum",
  "Solanum dissectum",
  "Solanum dunalianum",
  "Solanum johnsonianum",
  "Solanum karsense",
  "Solanum orgadophilum",
  "Sophora fraseri",
  "Prasophyllum apoxychilum",
  "Sphaerolobium acanthos",
  "Caladenia ancylosa",
  "Caladenia douglasiorum",
  "Diuris daltonii",
  "Prasophyllum anticum",
  "Prasophyllum erythrocommum",
  "Prasophyllum niphopedium",
  "Prasophyllum sp. aff. diversiflorum 2",
  "Pterostylis conferta",
  "Pterostylis spissa",
  "Thelymitra hiemalis",
  "Sphenotoma drummondii",
  "Spirogardnera rubescens",
  "Spyridium coactilifolium",
  "Spyridium furculentum",
  "Pterostylis pratensis",
  "Pterostylis ziegeleri",
  "Spyridium lawrencei",
  "Spyridium obcordatum",
  "Stenanthemum pimeleoides",
  "Stachystemon nematophorus",
  "Stackhousia annua",
  "Veronica novae-hollandiae",
  "Xanthorrhoea arenaria",
  "Xanthorrhoea bracteata",
  "Arachnorchis caudata",
  "Streblus pendulinus",
  "Stylidium applanatum",
  "Stylidium coroniforme",
  "Stylidium ensatum",
  "Stylidium galioides",
  "Stylidium semaphorum",
  "Styphelia perileuca",
  "Swainsona murrayana",
  "Swainsona plagiotropis",
  "Swainsona pyrophila",
  "Swainsona recta",
  "Symonanthus bancroftii",
  "Symplocos baeuerlenii",
  "Synaphea quartzitica",
  "Synaphea stenoloba",
  "Syzygium hodgkinsoniae",
  "Syzygium moorei",
  "Syzygium paniculatum",
  "Syzygium velarum",
  "Taraxacum cygnorum",
  "Tasmannia glaucifolia",
  "Tasmannia purpurascens",
  "Tectaria devexa",
  "Tecticornia bulbosa",
  "Tecticornia flabelliformis",
  "Tephrosia leveillei",
  "Tetraria australiensis",
  "Tetratheca aphylla",
  "Tetratheca deltoidea",
  "Tetratheca glandulosa",
  "Callitris oblonga",
  "Tetratheca harperi",
  "Tetratheca juncea",
  "Tetratheca nephelioides",
  "Tetratheca paynterae",
  "Conospermum taxifolium",
  "Thelymitra cyanapicata",
  "Thelymitra dedmaniarum",
  "Thelymitra epipactoides",
  "Corybas macranthus",
  "Thelymitra matthewsii",
  "Thelymitra psammophila",
  "Thelymitra stellata",
  "Thesium australe",
  "Thomasia glabripetala",
  "Thomasia montana",
  "Thryptomene wittweri",
  "Epacris aff. virgata 'graniticola'",
  "Tmesipteris norfolkensis",
  "Toechima pterocarpum",
  "Tomophyllum walleri",
  "Trachymene scapigera",
  "Tribonanthes purpurea",
  "Trichanthodium baracchianum",
  "Trioncinia retroflexa",
  "Triplarina imbricata",
  "Triplarina nitchaga",
  "Triplarina nowraensis",
  "Trithuria occidentalis",
  "Triunia robusta",
  "Tropilis callitrophilis",
  "Tylophora linearis",
  "Tylophora rupicola",
  "Tylophora woollsii",
  "Typhonium jonesii",
  "Typhonium mirabile",
  "Typhonium taylori",
  "Ungeria floribunda",
  "Uromyrtus australis",
  "Vanda hindsii",
  "Vappodes lithocola",
  "Vappodes phalaenopsis",
  "Velleia perfoliata",
  "Veronica ciliolata",
  "Epacris virgata (Beaconsfield)",
  "Epacris virgata (Kettering)",
  "Veronica parnkalliana",
  "Verticordia albida",
  "Verticordia apecta",
  "Verticordia carinata",
  "Verticordia crebra",
  "Verticordia helichrysantha",
  "Verticordia hughanii",
  "Verticordia pityrhops",
  "Verticordia spicata subsp. squamosa",
  "Hymenochilus pratensis",
  "Hymenochilus ziegeleri",
  "Limonium baudinii",
  "Vrydagzynea grayi",
  "Microstrobos niphophilus",
  "Westringia crassifolia",
  "Westringia cremnophila",
  "Westringia davidii",
  "Westringia kydrensis",
  "Westringia parvifolia",
  "Westringia rupicola",
  "Wikstroemia australis",
  "Wollemia nobilis",
  "Wurmbea calcicola",
  "Wurmbea tubulosa",
  "Nematoceras dienemum",
  "Oreoporanthera petalifera",
  "Pterostylis cycnocephala",
  "Xanthosia scopulicola",
  "Xanthostemon formosus",
  "Xanthostemon oppositifolius",
  "Xerochrysum palustre",
  "Xerothamnella herbacea",
  "Xerothamnella parvifolia",
  "Xylopia monosperma",
  "Xylosma parvifolia",
  "Xyris exilis",
  "Zehneria baueriana",
  "Zeuxine polygonoides",
  "Zieria adenophora",
  "Zieria baeuerlenii",
  "Zieria bifida",
  "Zieria buxijugum",
  "Zieria citriodora",
  "Zieria collina",
  "Zieria covenyi",
  "Zieria floydii",
  "Zieria formosa",
  "Zieria granulata",
  "Zieria ingramii",
  "Zieria involucrata",
  "Zieria lasiocaulis",
  "Zieria murphyi",
  "Zieria obcordata",
  "Zieria obovata",
  "Zieria odorifera subsp. copelandii",
  "Zieria odorifera subsp. warrabahensis",
  "Zieria parrisiae",
  "Zieria prostrata",
  "Zieria rimulosa",
  "Zieria tuberculata",
  "Zieria verrucosa",
  "Diuris bracteata",
  "Acacia cochlocarpa subsp. velutinosa",
  "Banksia serratuloides subsp. perissa",
  "Boehmeria australis subsp. australis",
  "Brachychiton sp. Ormeau (L.H.Bird AQ435851)",
  "Bruguiera hainesii",
  "Caladenia attenuata",
  "Caladenia lodgeana",
  "Caladenia luteola",
  "Caladenia sp. Kilsyth South (G.S.Lorimer 1253)",
  "Calochilus cupreus",
  "Conostylis setigera subsp. dasys",
  "Corunastylis insignis",
  "Corunastylis littoralis",
  "Corunastylis sp. Charmhaven (NSW 896673)",
  "Racosperma axillare",
  "Diuris flavescens",
  "Duma horrida subsp. abdita",
  "Elymus multiflorus subsp. kingianus",
  "Eremophila sp. Narrow leaves (J.D.Start D12-150)",
  "Eucalyptus sp. Cattai (Gregson s.n., 28 Aug 1954)",
  "Euphrasia gibbsiae subsp. psilantherea",
  "Grevillea brachystylis subsp. grandis",
  "Grevillea bracteosa subsp. howatharra",
  "Grevillea sp. Gillingarra (R.J.Cranfield 4087)",
  "Hibbertia puberula subsp. glabrescens",
  "Kunzea similis subsp. similis",
  "Lasiopetalum sp. Proston (J.A.Baker 17)",
  "Leucopogon sp. Flynn (F.Hort, J.Hort & A.Lowrie 859)",
  "Oberonia attenuata",
  "Phreatia limenophylax",
  "Pimelea spinescens subsp. pubiflora",
  "Pimelea spinescens subsp. spinescens",
  "Spyridium microphyllum",
  "Prasophyllum bagoense",
  "Prasophyllum innubum",
  "Prasophyllum keltonii",
  "Prasophyllum laxum",
  "Veronica distans var. pubescens",
  "Prasophyllum sp. Wybong (C.Phelps ORG 5269)",
  "Pterostylis oreophila",
  "Pterostylis psammophila",
  "Pterostylis vernalis",
  "Pultenaea sp. Genowlan Point (NSW 417813)",
  "Styphelia longissima",
  "Synaphea sp. Fairbridge Farm (D. Papenfus 696)",
  "Synaphea sp. Pinjarra (R. Davis 6578)",
  "Synaphea sp. Serpentine (G.R. Brand 103)",
  "Thelymitra adorata",
  "Thelymitra hygrophila",
  "Thelymitra kangaloonica",
  "Veronica derwentiana subsp. homalodonta",
  "Acacia ataxiphylla subsp. magna",
  "Acacia chapmanii subsp. australis",
  "Acacia cochlocarpa subsp. cochlocarpa",
  "Acacia insolita subsp. recurva",
  "Acacia subflexuosa subsp. capillata",
  "Acacia terminalis subsp. terminalis MS",
  "Adenanthos pungens subsp. effusus",
  "Anigozanthos bicolor subsp. minor",
  "Banksia nivea subsp. uliginosa",
  "Banksia rufa subsp. pumila",
  "Bertya tasmanica subsp. tasmanica",
  "Boronia capitata subsp. capitata",
  "Burmannia sp. Bathurst Island (R.Fensham 1021)",
  "Caladenia bryceana subsp. bryceana",
  "Caladenia caesarea subsp. maritima",
  "Caladenia granitora",
  "Caladenia hopperiana",
  "Caladenia leucochila",
  "Callitris oblonga subsp. oblonga",
  "Calytrix breviseta subsp. breviseta",
  "Chamelaucium sp. Gingin (N.G.Marchant 6)",
  "Conospermum densiflorum subsp. unicephalatum",
  "Conostylis dielsii subsp. teres",
  "Conostylis seorsiflora subsp. trichophylla",
  "Correa lawrenceana var. genoensis",
  "Cyphanthera odgersii subsp. occidentalis",
  "Dendrobium brachypus",
  "Dipodium campanulatum",
  "Diuris eborensis",
  "Eremophila denticulata subsp. trisulcata",
  "Eremophila glabra subsp. chlorella",
  "Eucalyptus alligatrix subsp. limaensis",
  "Eucalyptus crucis subsp. praecipua",
  "Eucalyptus gunnii subsp. divaricata",
  "Eucalyptus pachycalyx subsp. banyabba",
  "Eucalyptus sp. Howes Swamp Creek (M.Doherty 26)",
  "Euphrasia collina subsp. muelleri",
  "Euphrasia collina subsp. osbornii",
  "Euphrasia sp. Bivouac Bay (W.R.Barker 7626 et al.)",
  "Genoplesium baueri",
  "Grevillea acanthifolia subsp. paludosa",
  "Grevillea curviloba subsp. curviloba",
  "Grevillea curviloba subsp. incurva",
  "Grevillea dryandroides subsp. dryandroides",
  "Grevillea dryandroides subsp. hirsuta",
  "Lambertia echinata subsp. echinata",
  "Lambertia echinata subsp. occidentalis",
  "Leucochrysum albicans var. tricolor = Leucochrysum albicans subsp. tricolor",
  "Leucopogon sp. Coolmunda (D.Halford Q1635)",
  "Livistona mariae subsp. mariae",
  "Lychnothamnus barbatus",
  "Melichrus sp. Gibberagee (Benwell 97239)",
  "Melichrus sp. Newfoundland State Forest (P.Gilmour 7852)",
  "Pandanus spiralis var. flammeus",
  "Pelargonium sp. Striatellum (G.W.Carr 10345)",
  "Persoonia mollis subsp. maxima",
  "Phalaenopsis amabilis subsp. rosenstromii",
  "Phreatia paleata",
  "Pityrodia sp. Marble Bar (G.Woodman & D.Coultas GWDC Opp 4)",
  "Prasophyllum pruinosum",
  "Pterostylis X aenigma",
  "Pterostylis lepida",
  "Pterostylis sinuata",
  "Pterostylis sp. Botany Bay (A.Bishop J221/1-13)",
  "Pterostylis sp. Hale (R.Bates 21725)",
  "Rutidosis leptorrhynchoides = Rutidosis leptorhynchoides",
  "Samadera sp. Moonee Creek (J.King s.n. Nov. 1949)",
  "Schoenia filifolia subsp. subulifolia",
  "Solanum sulphureum",
  "Synaphea sp. Pinjarra Plain (A.S. George 17182)",
  "Thomasia sp. Green Hill (S.Paust 1322)",
  "Toechima sp. East Alligator (J.Russell-Smith 8418)",
  "Verticordia densiflora var. pedunculata",
  "Verticordia fimbrilepis subsp. fimbrilepis",
  "Verticordia plumosa var. ananeotes",
  "Verticordia plumosa var. vassensis",
  "Verticordia spicata subsp. squamosa",
  "Verticordia staminosa subsp. staminosa",
  "Verticordia staminosa var. cylindracea",
  "Acriopsis emarginata",
  "Adenanthos pungens subsp. pungens",
  "Anigozanthos viridis subsp. terraspectans",
  "Apium prostratum subsp. Porongurup Range (G.J.Keighery 8631)",
  "Banksia serratuloides subsp. serratuloides",
  "Banksia sphaerocarpa var. dolichostyla",
  "Banksia squarrosa subsp. argillacea",
  "Caladenia bryceana subsp. cracens",
  "Chamelaucium sp. Cataby (G.J.Keighery 11009)",
  "Chamelaucium sp. S coastal plain (R.D.Royce 4872)",
  "Comesperma oblongatum",
  "Corynocarpus rupestris subsp. rupestris",
  "Daviesia elongata subsp. elongata",
  "Epilobium brunnescens subsp. beaugleholei",
  "Eremophila denticulata subsp. denticulata",
  "Eucalyptus alligatrix subsp. miscella",
  "Eucalyptus caleyi subsp. ovendenii",
  "Eucalyptus crucis subsp. crucis",
  "Eucalyptus parramattensis subsp. decadens",
  "Eucalyptus robertsonii subsp. hemisphaerica",
  "Eucalyptus rubida subsp. barbigerorum",
  "Euphrasia crassiuscula subsp. glandulifera",
  "Gaultheria viridicarpa J.B.Williams subsp. viridicarpa ms.",
  "Grevillea brachystylis subsp. australis",
  "Grevillea montis-cole subsp. brevistyla",
  "Grevillea parviflora subsp. parviflora",
  "Grevillea scortechinii subsp. scortechinii",
  "Haloragis exalata subsp. exalata",
  "Haloragis exalata subsp. velutina",
  "Hibbertia humifusa subsp. debilis",
  "Hibbertia humifusa subsp. erigens",
  "Hoya australis subsp. oramicola",
  "Ixodia achillaeoides subsp. arenicola",
  "Kunzea ericifolia subsp. subulata",
  "Leucopogon sp. Ongerup (A.S. George 16682)",
  "Limonium australe var. baudinii",
  "Lindsaea pulchella var. blanda",
  "Melicytus ramiflorus subsp. oblongifolius",
  "Nematolepis squamea subsp. coriacea",
  "Olearia pannosa subsp. pannosa",
  "Phebalium glandulosum subsp. eglandulosum",
  "Pimelea curviflora var. curviflora",
  "Pomaderris gilmourii var. cana",
  "Pomaderris halmaturina subsp. halmaturina",
  "Pomaderris pilifera subsp. talpicutica",
  "Prasophyllum colemaniae",
  "Prostanthera cryptandroides subsp. cryptandroides",
  "Prostanthera sp. Dunmore (D.M.Gordon 8A)",
  "Prostanthera spathulata",
  "Pultenaea villifera var. glabrescens",
  "Spyridium eriocephalum var. glabrisepalum",
  "Taeniophyllum norfolkianum",
  "Thelymitra mackibbinii",
  "Verticordia fimbrilepis subsp. australis",
  "Prasophyllum bagoense",
  "Prasophyllum innubum",
  "Prasophyllum keltonii",
  "Caladenia graniticola",
  "Calochilus pruinosus",
  "Caladenia fulva (= Arachnorchis fulva)",
  "Gunniopsis sp. (Edgbaston R.J. Fensham 5094)",
  "Genetiana bredboensis",
  "Pterostylis ventricosa",
  "Caladenia maritima",
  "Hakea asperma",
  "Prasophyllum hygrophilum",
  "Prasophyllum uvidulum",
  "Thelymitra mackibbinii",
  "Pterostylis sinuata",
  "Caladenia clavescens",
  "Caladenia grampiana",
  "Diuris sp. aff. dendrobioides (Bairnsdale)",
  "Prasophyllum argillaceum",
  "Prasophyllum fosteri",
  "Prasophyllum parviflorum",
  "Prasophyllum stygium",
  "Pterostylis crassa",
  "Pterostylis ├ùaenigma",
  "Thelymitra pallidiflora",
  "Rutidosis leptorrynchoides",
  "Acacia terminalis subsp. terminalis",
  "Asterolasia sp. 'Dungowan Creek'",
  "Astrotricha sp. Wallagaraugh",
  "Bertya sp. (Chambigne NR, M. Fatemi 24)",
  "Bertya sp. (Clouds Creek, M. Fatemi 4)",
  "Calochilus pulchellus",
  "Camarophyllopsis kearneyi",
  "Chiloglottis anaticeps",
  "Chiloglottis platyptera",
  "Corunastylis sp. Charmhaven (NSW896673)",
  "Corybas dowlingii",
  "Diuris arenaria",
  "Diuris disposita",
  "Diuris sp. (Oaklands, D.L. Jones 5380)",
  "Diuris sp. aff. chrysantha",
  "Eucalyptus sp. Cattai",
  "Eucalyptus sp. Howes Swamp Creek",
  "Gaultheria viridicarpa subsp. viridicarpa",
  "Genoplesium insignis",
  "Genoplesium littorale",
  "Genoplesium superbum",
  "Hibbertia sp. Bankstown",
  "Hygrocybe aurantipes",
  "Hygrocybe collucera",
  "Hygrocybe griseoramosa",
  "Hygrocybe lanecovensis",
  "Melichrus hirsutus",
  "Melichrus sp. Gibberagee",
  "Prasophyllum canaliculatum",
  "Prasophyllum pallens",
  "Prasophyllum sp. Majors Creek",
  "Prostanthera staurophylla sensu stricto",
  "Pterostylis elegans",
  "Pterostylis metcalfei",
  "Pterostylis sp. Botany Bay",
  "Pultenaea sp. Olinda",
  "Quassia sp. Mooney Creek",
  "Solanum amourense",
  "Typhonium sp. aff. brownii",
  "Pterostylis biseta",
  "Corunastylis nudiscapa",
  "Thelymitra canaliculata",
  "Prasophyllum nudiscapum",
  "Callitris aff. oblonga",
  "Prasophyllum sp. Arthurs Lake",
  "Euphrasia amplidens",
  "Euphrasia sp. Bivouac Bay",
  "Genoplesium nudiscapum",
  "Nematoceras sulcatum",
  "Hibbertia sp. Richmond dolerite",
  "Epacris sp. Graniticola",
  "Pterostylis aff. cycnocephala \"cape portland\"",
  "Euphrasia sp. (Southport)",
  "Prasophyllum rogersii",
  "Euphrasia collina subsp. Northwest Tasmania",
  "Hymenochilus cycnocephalus",
  "Epacris aff. virgata 'Mt Cameron'",
  "Xanthorrhoea aff. arenaria",
  "Xanthorrhoea aff. bracteata",
  "Caladenia venusta",
  "Caladenia reticulata",
  "Epacris aff. exserta 'Mt Cameron'",
  "Euphrasia sp. Wilson River",
  "Sagina \"sp. nov. Mt. Anne\"",
  "Prasophyllum aff. fitzgeraldii",
  "Prasophyllum aff. montanum",
  "Prasophyllum montanum",
  "Hibbertia sp. 'Pontville'"
};
/**************************** MENU CORRESPONDENCE *****************************/

final String REF_TAXON_ID =
  "Sighting/Sighting/Taxon_ID";
final String REF_COMMON_NAME =
  "Sighting/Sighting/Common_Name";
final String REF_SCIENTIFIC_NAME =
  "Sighting/Sighting/Scientific_Name";

String[] toArch16nKeys(String[] array) {
  String[] out = new String[array.length];
  System.arraycopy(array, 0, out, 0, array.length);

  for (int i = 0; i < out.length; i++) {
    out[i] = "{" + out[i].replaceAll("([^0-9a-zA-Z])", "_") + "}";
  }
  return out;
}

Map getIdMap(String[] array) {
  Map map = new HashMap();
  for (int i = 0; i < array.length; i ++) {
    if (map.containsKey(array[i]))
      map.put(array[i], -1);
    else
      map.put(array[i], i);
  }
  return map;
}

final String[] TAXON_ID_16        = toArch16nKeys(TAXON_ID);
final String[] COMMON_NAME_16     = toArch16nKeys(COMMON_NAME);
final String[] SCIENTIFIC_NAME_16 = toArch16nKeys(SCIENTIFIC_NAME);

final Map TAXON_ID_TO_INDEX        = getIdMap(TAXON_ID_16);
final Map COMMON_NAME_TO_INDEX     = getIdMap(COMMON_NAME_16);
final Map SCIENTIFIC_NAME_TO_INDEX = getIdMap(SCIENTIFIC_NAME_16);

int getOrDefault(Map map, String key) {
  int default_ = -1;
  Integer value = map.get(key);
  if (value == null)
    return default_;
  else
    return value;
}

int getTaxonIdIndex() {
  return getOrDefault(TAXON_ID_TO_INDEX, getMenuValue(REF_TAXON_ID));
}

int getCommonNameIndex() {
  return getOrDefault(COMMON_NAME_TO_INDEX, getMenuValue(REF_COMMON_NAME));
}

int getScientificNameIndex() {
  return getOrDefault(SCIENTIFIC_NAME_TO_INDEX, getMenuValue(REF_SCIENTIFIC_NAME));
}

void setByIndex(int index) {
  if (index == -1) {
    return;
  }

  if (
      !TAXON_ID_16[index].equals(getMenuValue(REF_TAXON_ID)) &&
      !setMenuValue(REF_TAXON_ID, TAXON_ID_16[index])
  ) {
    setFieldValue(REF_TAXON_ID, null);
  }

  if (
      !COMMON_NAME_16[index].equals(getMenuValue(REF_COMMON_NAME)) &&
      !setMenuValue(REF_COMMON_NAME, COMMON_NAME_16[index])
  ) {
    setFieldValue(REF_COMMON_NAME, null);
  }

  if (
      !SCIENTIFIC_NAME_16[index].equals(getMenuValue(REF_SCIENTIFIC_NAME)) &&
      !setMenuValue(REF_SCIENTIFIC_NAME, SCIENTIFIC_NAME_16[index])
  ) {
    setFieldValue(REF_SCIENTIFIC_NAME, null);
  }
}

void setByTaxonId() {
  setByIndex(getTaxonIdIndex());
}
void setByCommonName() {
  setByIndex(getCommonNameIndex());
}
void setByScientificName() {
  setByIndex(getScientificNameIndex());
}

addOnEvent(
    REF_TAXON_ID,
    "click",
    "setByTaxonId()");
addOnEvent(
    REF_COMMON_NAME,
    "click",
    "setByCommonName()");
addOnEvent(
    REF_SCIENTIFIC_NAME,
    "click",
    "setByScientificName()");


/******************************************************************************/
/*                                    INIT                                    */
/*                                                                            */
/* Stuff which needs to be done last.                                         */
/******************************************************************************/
bindOnEvents();
decAndExecIfModuleLoaded();
